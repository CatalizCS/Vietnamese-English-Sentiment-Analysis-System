This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-28T14:21:42.275Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
algorithms.md
comments_element.html
extension/background.js
extension/content.js
extension/manifest.json
extension/package.json
extension/popup.css
extension/popup.html
extension/popup.js
extension/src/input.css
extension/style.css
extension/tailwind.config.js
metrics.json
notebooks/0.0-init-environment.ipynb
notebooks/1.0-data_labeling.ipynb
notebooks/continue_training.ipynb
notebooks/sentiment_analysis_pipeline.ipynb
README.md
run_api.py
scripts/data_collection_cli.py
scripts/generate_training_data.py
scripts/train_models.py
setup.py
src/api/__init__.py
src/api/app.py
src/api/templates/dashboard.html
src/config.py
src/data/data_augmentation.py
src/data/data_collection.py
src/data/data_loader.py
src/data/preprocessor.py
src/docs/algorithm_overview.py
src/features/feature_engineering.py
src/features/text_cleaner.py
src/main.py
src/models/model_predictor.py
src/models/model_trainer.py
src/utils/augmentation.py
src/utils/evaluation.py
src/utils/logger.py
src/utils/menu.py
src/utils/metrics_store.py
src/utils/report.py
src/utils/server_utils.py
src/utils/templates.py
src/visualization.py
tests/test_model.py
tests/test_preprocessor.py

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Chrome Extension
*.crx
*.pem
*.pub
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#  According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#  However, in case you do not want to do that, uncomment the following line to ignore it.
# Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyderworkspace

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

================
File: algorithms.md
================
# Tổng Quan Thuật Toán Machine Learning

## 1. Thuật Toán Trích Xuất Đặc Trưng

### 1.1 TF-IDF (Term Frequency-Inverse Document Frequency)

- **Mục đích**: Chuyển đổi văn bản thành vector số dựa trên tần suất từ
- **Công thức**:

  ```markdown
  TF(t,d) = số lần từ t xuất hiện trong văn bản d
  IDF(t) = log(N/DF(t))
  ```

  Trong đó:

  - N: tổng số văn bản
  - DF(t): số văn bản chứa từ t

  ```markdown
  TF-IDF(t,d) = TF(t,d) × IDF(t)
  ```

- **Tham số chính**:
  - `max_features`: 2000 (giới hạn số đặc trưng)
  - `ngram_range`: (1,3) (sử dụng unigrams đến trigrams)
  - `min_df`: 2 (loại bỏ từ hiếm)
  - `max_df`: 0.95 (loại bỏ từ quá phổ biến)

### 1.2 SVD (Singular Value Decomposition)

- **Mục đích**: Giảm chiều dữ liệu và trích xuất đặc trưng quan trọng
- **Công thức**:

  ```markdown
  A = U × Σ × V^T
  ```

  Trong đó:

  - A: ma trận dữ liệu gốc
  - U: ma trận trái trực giao
  - Σ: ma trận đường chéo các giá trị kỳ dị
  - V^T: chuyển vị của ma trận phải trực giao

- **Tham số**: `n_components = min(n_features-1, n_samples-1)`
## 2. Thuật Toán Phân Loại

### 2.1 Random Forest

- **Nguyên lý**: Tổng hợp nhiều cây quyết định
- **Công thức Gini**:
  ```markdown
  Gini = 1 - Σ(pi)²
  ```
  Trong đó:
- **Tham số tối ưu**:
  - `n_estimators`: 200-300 cây
  - `max_depth`: 20-30 levels
  - `min_samples_split`: 2-5

### 2.2 Linear SVM

- **Nguyên lý**: Tìm siêu phẳng phân tách tối ưu
- **Công thức**:

  ```markdown
  min(1/2 ||w||² + C Σ ξᵢ)
  ```

  Ràng buộc:

  ```markdown
  yᵢ(w·xᵢ + b) ≥ 1 - ξᵢ
  ξᵢ ≥ 0
  ```

  Trong đó:

  - w: vector trọng số
  - C: hệ số điều chuẩn
  - ξᵢ: biến slack

- **Tham số chính**: `C = [0.1, 1.0, 10.0]`

### 2.3 Naive Bayes

- **Nguyên lý**: Xác suất có điều kiện theo Bayes
- **Công thức**:

  ```markdown
  P(c|x) = P(x|c)P(c)/P(x)
  ```

  Trong đó:

  - P(c|x): xác suất posterior
  - P(x|c): likelihood
  - P(c): xác suất prior
  - P(x): evidence

- **Tham số**: `alpha = [0.1, 0.5, 1.0]`

## 3. Đánh Giá Mô Hình

### 3.1 Precision-Recall

```markdown
Precision = TP/(TP + FP)
Recall = TP/(TP + FN)
F1-Score = 2 × (Precision × Recall)/(Precision + Recall)
```

### 3.2 ROC-AUC

- **Công thức AUC**:
  ```markdown
  AUC = Σ(1/2 × (FPRᵢ₊₁ - FPRᵢ)(TPRᵢ₊₁ + TPRᵢ))
  ```
  Trong đó:
  - TPR = TP/(TP + FN)
  - FPR = FP/(FP + TN)

## 4. Kỹ Thuật Tối Ưu Hóa

### 4.1 Cross-Validation

- **K-fold CV công thức**:
  ```markdown
  CV Score = (1/K) × Σ Score_i
  ```
  Trong đó:
  - K: số fold
  - Score_i: điểm của fold thứ i

### 4.2 Grid Search

- **Mục đích**: Tìm tham số tối ưu
- **Công thức điểm cuối cùng**:
  ```markdown
  Final Score = (1/N) × Σ CV_Score(params)
  ```

### 4.3 Ensemble Learning

- **Voting công thức**:
  ```markdown
  Final Prediction = mode(predictions_i)
  Confidence = max(count(predictions_i)/total_models)
  ```

## 5. Pipeline Xử Lý

### 5.1 Chuẩn Hóa Dữ Liệu

- **MinMax Scaling**:

  ```markdown
  X_scaled = (X - X_min)/(X_max - X_min)
  ```

- **Z-Score Normalization**:
  ```markdown
  X_norm = (X - μ)/σ
  ```

### 5.2 Feature Selection

- **Chi-square Test**:
  ```markdown
  χ² = Σ((O - E)²/E)
  ```
  Trong đó:
  - O: giá trị quan sát
  - E: giá trị kỳ vọng

### 5.3 Class Balancing

- **Class Weights**:
  ```markdown
  weight_i = n_samples/(n_classes × n_samples_class_i)
  ```

## 6. Các Metric Đánh Giá

### 6.1 Confusion Matrix

```markdown
     Predicted
     Actual P N
     P TP FN
     N FP TN
```

### 6.2 Classification Report

- **Macro Average**:

  ```
  Macro_avg = (1/n_classes) × Σ metric_per_class
  ```

- **Weighted Average**:
  ```
  Weighted_avg = Σ(metric_per_class × support_per_class)/total_support
  ```

## 7. Mục Đích Sử Dụng Các Thành Phần

### 7.1 Thành Phần Trích Xuất Đặc Trưng

- **TfidfVectorizer**:

  - Chuyển đổi văn bản thành vector số dựa trên tần suất từ
  - Chuẩn hóa và tính toán trọng số cho các từ

- **TruncatedSVD**:
  - Giảm chiều dữ liệu vector
  - Chọn lọc đặc trưng quan trọng nhất

### 7.2 Các Mô Hình Phân Loại

#### 7.2.1 Khởi Tạo Mô Hình

```python
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import MultinomialNB

rf = RandomForestClassifier(
    n_estimators=300,
    max_depth=30,
    class_weight='balanced'
)

svm = LinearSVC(
    C=1.0,
    max_iter=2000,
    class_weight='balanced'
)

nb = MultinomialNB(
    alpha=0.1,
    fit_prior=True
)
```

#### 7.2.2 Mục Đích Từng Mô Hình

- **RandomForestClassifier**: Tổng hợp dự đoán từ nhiều cây quyết định
- **LinearSVC**: Phân loại tuyến tính với SVM
- **MultinomialNB**: Phân loại xác suất cho văn bản

### 7.3 Kỹ Thuật Tối Ưu

#### 7.3.1 Code Tối Ưu

```python
from sklearn.model_selection import GridSearchCV
from sklearn.feature_selection import SelectKBest, chi2

param_grid = {
    'rf__n_estimators': [200, 300],
    'rf__max_depth': [20, 30],
    'svm__C': [0.1, 1.0, 10.0],
    'nb__alpha': [0.1, 0.5, 1.0]
}

grid_search = GridSearchCV(
    estimator=pipeline,
    param_grid=param_grid,
    cv=5,
    scoring='f1_weighted'
)

feature_selector = SelectKBest(
    score_func=chi2,
    k=200
)
```

#### 7.3.2 Mục Đích Tối Ưu

- **GridSearchCV**: Tìm tham số tối ưu cho mô hình
- **SelectKBest**: Chọn đặc trưng quan trọng

### 7.4 Tiền Xử Lý và Tăng Cường Dữ Liệu

#### 7.4.1 Code Xử Lý

```python
import re
from nltk.tokenize import word_tokenize

def clean_text(text):
    text = re.sub(r'[^\w\s]', '', text)
    text = text.lower()
    return ' '.join(word_tokenize(text))

def augment_text(text):
    augmented = []
    tokens = text.split()
    augmented.append(' '.join(random.sample(tokens, len(tokens))))
    return augmented
```

#### 7.4.2 Mục Đích Xử Lý

- **Làm sạch văn bản**: Chuẩn hóa và xử lý nhiễu
- **Tăng cường dữ liệu**: Mở rộng tập huấn luyện

================
File: comments_element.html
================
<div
  class="html-div x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1gslohp"
>
  <div
    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1iyjqo2"
  >
    <div
      class="x1n2onr6 x1ja2u2z x9f619 x78zum5 xdt5ytf x2lah0s x193iq5w xwib8y2 x1iorvi4"
    >
      <div class="x9f619 x1n2onr6 x1ja2u2z x78zum5 xdt5ytf x1iyjqo2 x2lwn1j">
        <div class="x9f619 x1n2onr6 x1ja2u2z x78zum5 xdt5ytf x2lah0s x193iq5w">
          <div class="">
            <div
              role="table"
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
            >
              <div
                class="html-div x11i5rnm xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x9otpla x1wsgfga xp7jhwk"
              >
                <div class="xwib8y2 xurb0ha x1y1aw1k">
                  <div class="x78zum5 x1q0g3np x1a2a7pz">
                    <div
                      class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
                    >
                      <div
                        aria-hidden="true"
                        class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz"
                        role="button"
                        tabindex="-1"
                      >
                        <div
                          aria-label="Available Voices"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz"
                          role="button"
                          tabindex="0"
                        >
                          <div
                            class="x4k7w5x x1h91t0o x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1jfb8zj x1beo9mf x3igimt xarpa2k x1n2onr6 x1qrby5j"
                          >
                            <div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                              <svg
                                aria-hidden="true"
                                class="x3ajldb"
                                data-visualcompletion="ignore-dynamic"
                                role="none"
                                style="height: 32px; width: 32px"
                              >
                                <mask id=":r2q:">
                                  <circle
                                    cx="16"
                                    cy="16"
                                    fill="white"
                                    r="16"
                                  ></circle>
                                  <circle
                                    cx="27"
                                    cy="27"
                                    data-visualcompletion="ignore"
                                    fill="black"
                                    r="6"
                                  ></circle>
                                </mask>
                                <g mask="url(#:r2q:)">
                                  <image
                                    x="0"
                                    y="0"
                                    height="100%"
                                    preserveAspectRatio="xMidYMid slice"
                                    width="100%"
                                    xlink:href="https://scontent.fsgn5-13.fna.fbcdn.net/v/t39.30808-1/187808618_859447511647838_5040021211396183192_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=104&amp;ccb=1-7&amp;_nc_sid=50d2ac&amp;_nc_ohc=58VBLSi_PVcQ7kNvgEoP-_C&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-13.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYCTjTuNibaZ715B_RCMZHioyuAfem2Ca-lvI3iCb6Kh2w&amp;oe=673F82A8"
                                    style="height: 32px; width: 32px"
                                  ></image>
                                  <circle
                                    class="xbh8q5q x1pwv2dq xvlca1e"
                                    cx="16"
                                    cy="16"
                                    r="16"
                                  ></circle>
                                </g>
                              </svg>
                              <div
                                class="x14yjl9h xudhj91 x18nykt9 xww2gxu x10l6tqk xhtitgo"
                                data-visualcompletion="ignore"
                                style="
                                  bottom: 5px;
                                  right: 5px;
                                  transform: translate(50%, 50%);
                                "
                              >
                                <div
                                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r x14yjl9h xudhj91 x18nykt9 xww2gxu x1rg5ohu x1iorvi4 x150jy0e xjkvuk6 x1e558r4 x3ajldb"
                                >
                                  <div
                                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1qhmfi1 x14yjl9h xudhj91 x18nykt9 xww2gxu x78zum5 x6ikm8r x10wlt62 x1n2onr6"
                                  >
                                    <svg
                                      viewBox="0 0 16 16"
                                      width="12"
                                      height="12"
                                      fill="currentColor"
                                      class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                                      style="--color: var(--primary-icon)"
                                    >
                                      <g
                                        fill-rule="evenodd"
                                        transform="translate(-448 -544)"
                                      >
                                        <path
                                          fill-rule="nonzero"
                                          d="M452.707 549.293a1 1 0 0 0-1.414 1.414l4 4a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0-1.414-1.414L456 552.586l-3.293-3.293z"
                                        ></path>
                                      </g>
                                    </svg>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                              role="none"
                              data-visualcompletion="ignore"
                            ></div>
                          </div>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div>
                        </div>
                        <div
                          class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                          role="none"
                          data-visualcompletion="ignore"
                        ></div>
                      </div>
                    </div>
                    <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x4uap5">
                      <form
                        class="x1ed109x x1n2onr6 xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x972fbf xcfux6l x1qhh985 xm0m39n x78zum5 x1iyjqo2 x13a6bvl"
                        role="presentation"
                      >
                        <div class="xh8yej3">
                          <div class="x78zum5 x13a6bvl">
                            <div
                              class="xi81zsa xo1l8bm xlyipyv xuxw1ft x49crj4 x1ed109x xdl72j9 x1iyjqo2 xs83m0k x6prxxf x6ikm8r x10wlt62 x1y1aw1k xn6708d xwib8y2 x1ye3gou"
                              data-visualcompletion="ignore"
                            >
                              <div
                                class="xb57i2i x1q594ok x5lxg6s x78zum5 xdt5ytf x6ikm8r x1ja2u2z x1pq812k x1rohswg xfk6m8 x1yqm8si xjx87ck xx8ngbg xwo3gff x1n2onr6 x1oyok0e x1odjw0f x1e4zzel x3d5gib"
                              >
                                <div class="x78zum5 xdt5ytf x1iyjqo2 x1n2onr6">
                                  <div class="x1n2onr6">
                                    <div
                                      aria-label="Answer as Vũ Nguyễn Thành Tâm"
                                      class="xzsf02u x1a2a7pz x1n2onr6 x14wi4xw notranslate"
                                      contenteditable="true"
                                      spellcheck="true"
                                      tabindex="0"
                                      aria-placeholder="Answer as Vũ Nguyễn Thành Tâm"
                                      style="
                                        user-select: text;
                                        white-space: pre-wrap;
                                        word-break: break-word;
                                      "
                                      data-lexical-editor="true"
                                      role="textbox"
                                    >
                                      <p
                                        class="xdj266r x11i5rnm xat24cr x1mh8g0r"
                                      >
                                        <br />
                                      </p>
                                    </div>
                                    <div aria-hidden="true">
                                      <div
                                        class="xi81zsa x17qophe x6ikm8r x10wlt62 x47corl x10l6tqk xlyipyv x13vifvy x87ps6o xuxw1ft xh8yej3"
                                      >
                                        Answer as Vũ Nguyễn Thành Tâm
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  class="x14nfmen x1s85apg x5yr21d xds687c xg01cxk x10l6tqk x13vifvy x1wsgiic x19991ni xwji4o3 x1kky2od x1sd63oq"
                                  data-visualcompletion="ignore"
                                  data-thumb="1"
                                  style="
                                    display: none;
                                    height: 20px;
                                    right: 0px;
                                  "
                                ></div>
                                <div
                                  class="x9f619 x1s85apg xds687c xg01cxk xexx8yu x18d9i69 x1e558r4 x150jy0e x47corl x10l6tqk x13vifvy x1n4smgl x1d8287x x19991ni xwji4o3 x1kky2od"
                                  data-visualcompletion="ignore"
                                  data-thumb="1"
                                  style="
                                    display: block;
                                    height: 0px;
                                    right: 0px;
                                    transform: matrix3d(
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        -1
                                      )
                                      scale(0.952381) translateZ(0.047619px)
                                      translateZ(-2px);
                                  "
                                >
                                  <div
                                    class="x1hwfnsy x1lcm9me x1yr5g0i xrt01vj x10y3i5r x5yr21d xh8yej3"
                                  ></div>
                                </div>
                              </div>
                            </div>
                            <div class="x4b6v7d x1ojsi0c">
                              <ul
                                class="x6s0dn4 xpvyfi4 x78zum5 xc9qbxq xw3qccf xp7jhwk"
                                data-id="unfocused-state-actions-list"
                              >
                                <li class="x1rg5ohu x1mnrxsn x1w0mnb">
                                  <span
                                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                    ><div
                                      aria-expanded="false"
                                      aria-label="Comment with an avatar sticker"
                                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                                      role="button"
                                      tabindex="0"
                                    >
                                      <i
                                        data-visualcompletion="css-img"
                                        class="x1b0d499 x1d69dk1"
                                        style="
                                          background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yf/r/jyAJnQ0P5sN.png');
                                          background-position: 0px -226px;
                                          background-size: auto;
                                          width: 16px;
                                          height: 16px;
                                          background-repeat: no-repeat;
                                          display: inline-block;
                                        "
                                      ></i>
                                      <div
                                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                                        role="none"
                                        data-visualcompletion="ignore"
                                      ></div></div
                                  ></span>
                                </li>
                                <li class="x1rg5ohu x1mnrxsn x1w0mnb">
                                  <span
                                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                    ><div
                                      aria-expanded="false"
                                      aria-label="Insert an emoji"
                                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                                      role="button"
                                      tabindex="0"
                                    >
                                      <i
                                        data-visualcompletion="css-img"
                                        class="x1b0d499 x1d69dk1"
                                        style="
                                          background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yf/r/jyAJnQ0P5sN.png');
                                          background-position: 0px -328px;
                                          background-size: auto;
                                          width: 16px;
                                          height: 16px;
                                          background-repeat: no-repeat;
                                          display: inline-block;
                                        "
                                      ></i>
                                      <div
                                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                                        role="none"
                                        data-visualcompletion="ignore"
                                      ></div></div
                                  ></span>
                                </li>
                                <li class="x1rg5ohu x1mnrxsn x1w0mnb">
                                  <span
                                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                    ><div
                                      aria-label="Attach a photo or video"
                                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                                      role="button"
                                      tabindex="0"
                                    >
                                      <i
                                        data-visualcompletion="css-img"
                                        class="x1b0d499 x1d69dk1"
                                        style="
                                          background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yf/r/jyAJnQ0P5sN.png');
                                          background-position: 0px -277px;
                                          background-size: auto;
                                          width: 16px;
                                          height: 16px;
                                          background-repeat: no-repeat;
                                          display: inline-block;
                                        "
                                      ></i>
                                      <div
                                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                                        role="none"
                                        data-visualcompletion="ignore"
                                      ></div></div></span
                                  ><input
                                    accept="video/*,  video/x-m4v, video/webm, video/x-ms-wmv, video/x-msvideo, video/3gpp, video/flv, video/x-flv, video/mp4, video/quicktime, video/mpeg, video/ogv, .ts, .mkv, image/*, image/heic, image/heif"
                                    class="x1s85apg"
                                    type="file"
                                  />
                                </li>
                                <li class="x1rg5ohu x1mnrxsn x1w0mnb">
                                  <span
                                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                    ><div
                                      aria-expanded="false"
                                      aria-label="Comment with a GIF"
                                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                                      role="button"
                                      tabindex="0"
                                    >
                                      <i
                                        data-visualcompletion="css-img"
                                        class="x1b0d499 x1d69dk1"
                                        style="
                                          background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yf/r/jyAJnQ0P5sN.png');
                                          background-position: 0px -345px;
                                          background-size: auto;
                                          width: 16px;
                                          height: 16px;
                                          background-repeat: no-repeat;
                                          display: inline-block;
                                        "
                                      ></i>
                                      <div
                                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                                        role="none"
                                        data-visualcompletion="ignore"
                                      ></div></div
                                  ></span>
                                </li>
                                <li class="x1rg5ohu x1mnrxsn x1w0mnb">
                                  <span
                                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                    ><div
                                      aria-label="Comment with a Sticker"
                                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                                      role="button"
                                      tabindex="0"
                                    >
                                      <i
                                        data-visualcompletion="css-img"
                                        class="x1b0d499 x1d69dk1"
                                        style="
                                          background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yf/r/jyAJnQ0P5sN.png');
                                          background-position: 0px -430px;
                                          background-size: auto;
                                          width: 16px;
                                          height: 16px;
                                          background-repeat: no-repeat;
                                          display: inline-block;
                                        "
                                      ></i>
                                      <div
                                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                                        role="none"
                                        data-visualcompletion="ignore"
                                      ></div></div
                                  ></span>
                                </li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </form>
                      <div class="x1iyjqo2"></div>
                      <div class="x1iyjqo2"></div>
                      <div class="x1iyjqo2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xv6pb6r x10ick3y xg4rxxw xmjcpbm x10l6tqk xfo62xy"
        ></div>
        <div
          aria-label="Comment by Nguyen Sy Loc 19 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100024615393831/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r2s:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r2s:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t1.6435-1/147677418_924385471725291_1982309700143158628_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=105&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=y8a4WJ5Z29sQ7kNvgFHqZN_&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=AydVjipvye9D3japVbay0-F&amp;oh=00_AYCdVipuMfSeMc9MF469YGguhzAPSxEZsUHV0-bYtV1F9A&amp;oe=6761388E"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                    style="inset: 0px"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100024615393831/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Nguyen Sy Loc</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Sắp đến ngày hội ban 2k7 chưa nhỉ<span
                              class="html-span xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x3nfvp2 x1j61x8r x1fcty0u xdj266r xat24cr xgzva0m xhhsvwb xxymvpz xlup9mm x1kky2od"
                              ><img
                                height="16"
                                width="16"
                                alt="🥲"
                                class="xz74otr"
                                referrerpolicy="origin-when-cross-origin"
                                src="https://static.xx.fbcdn.net/images/emoji.php/v9/tec/1/16/1f972.png"
                            /></span>
                          </div>
                          <div
                            class="sentiment-result sentiment-negative"
                            style="
                              opacity: 1;
                              transform: translateY(0px);
                              transition: opacity 0.3s, transform 0.3s;
                            "
                          >
                            <div style="margin: 4px 0">
                              <span class="emoji">😢</span>
                              <strong>Tiêu cực</strong>
                              - buồn
                            </div>
                            <span class="sentiment-confidence">
                              Độ tin cậy: 40.0%
                            </span>
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 274px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873422734941908&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >19h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
        >
          <div
            class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 x1n2onr6 x46jau6"
          >
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1q0q8m5 xlxy82 x1o7swki xp7cj6j x1bkzgmd xl02xpf xgk8upj x26u7qi x19p7ews x10l6tqk x10ick3y xvy4d1p xlxyqfn"
            ></div>
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x78zum5 x1iyjqo2 x21xpn4 x1n2onr6"
            >
              <div
                class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xwnonoy x1ey2m1c xg01cxk x10l6tqk x13vifvy x1k90msu x19991ni xz4gly6 xfo62xy xh0n66s"
              ></div>
              <div
                class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x87ps6o x1lku1pv x1a2a7pz x6s0dn4 xi81zsa x1q0g3np x1iyjqo2 xs83m0k xsyo7zv x1mnrxsn"
                role="button"
                tabindex="0"
              >
                <span
                  class="html-span xdj266r xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x78zum5 x1w0mnb xeuugli"
                  ><span
                    class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen x1s688f xi81zsa"
                    dir="auto"
                    >View all 3 replies</span
                  ></span
                >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xv6pb6r x10ick3y xg4rxxw xmjcpbm x10l6tqk xfo62xy"
        ></div>
        <div
          aria-label="Comment by Nguyễn Vũ 19 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100062095076682/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r30:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r30:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t39.30808-1/466383356_911520164261144_8009671551059314177_n.jpg?stp=c12.0.727.727a_cp0_dst-jpg_s32x32&amp;_nc_cat=111&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=tBmHw6s7GFQQ7kNvgG6wXap&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=AydVjipvye9D3japVbay0-F&amp;oh=00_AYALaaRO7zyLzDFV-MeWMqKn7n9zFB8yu7Wd-l0XRFa8sA&amp;oe=673F8244"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100062095076682/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Nguyễn Vũ</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Chỗ nên học thì anh kh biết nma nhớ né Thầy Văn Hoa
                            em nhé:v
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 450px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873422761608572&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >19h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <span
                      class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                      ><div
                        aria-label="1 reaction; see who reacted to this"
                        class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz"
                        role="button"
                        tabindex="0"
                      >
                        <div
                          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r x6s0dn4 x78zum5 x1ncwhqj x1nn3v0j xg83lxy x1120s5i x1h0ha7o x1tlxs6b x1g8br2z x1gn5b1j x230xth xmix8c7"
                        >
                          <div
                            class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 x6s0dn4 x78zum5 x15zctf7 xkhd6sd"
                          >
                            <span
                              class="html-span xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x9bbmet x48pi3f xol2nv x1a2cdl4 xnhgr82 x1qt0ttw xgk8upj x78zum5 x1a2a7pz x1n2onr6 xd10rxx x1mh8g0r"
                              ><img
                                class=""
                                height="18"
                                role="presentation"
                                width="18"
                                src="data:image/svg+xml,%3Csvg fill='none' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath d='M16.0001 7.9996c0 4.418-3.5815 7.9996-7.9995 7.9996S.001 12.4176.001 7.9996 3.5825 0 8.0006 0C12.4186 0 16 3.5815 16 7.9996Z' fill='url(%23paint0_linear_15251_63610)'/%3E%3Cpath d='M16.0001 7.9996c0 4.418-3.5815 7.9996-7.9995 7.9996S.001 12.4176.001 7.9996 3.5825 0 8.0006 0C12.4186 0 16 3.5815 16 7.9996Z' fill='url(%23paint1_radial_15251_63610)'/%3E%3Cpath d='M16.0001 7.9996c0 4.418-3.5815 7.9996-7.9995 7.9996S.001 12.4176.001 7.9996 3.5825 0 8.0006 0C12.4186 0 16 3.5815 16 7.9996Z' fill='url(%23paint2_radial_15251_63610)' fill-opacity='.5'/%3E%3Cpath d='M7.3014 3.8662a.6974.6974 0 0 1 .6974-.6977c.6742 0 1.2207.5465 1.2207 1.2206v1.7464a.101.101 0 0 0 .101.101h1.7953c.992 0 1.7232.9273 1.4917 1.892l-.4572 1.9047a2.301 2.301 0 0 1-2.2374 1.764H6.9185a.5752.5752 0 0 1-.5752-.5752V7.7384c0-.4168.097-.8278.2834-1.2005l.2856-.5712a3.6878 3.6878 0 0 0 .3893-1.6509l-.0002-.4496ZM4.367 7a.767.767 0 0 0-.7669.767v3.2598a.767.767 0 0 0 .767.767h.767a.3835.3835 0 0 0 .3835-.3835V7.3835A.3835.3835 0 0 0 5.134 7h-.767Z' fill='%23fff'/%3E%3Cdefs%3E%3CradialGradient id='paint1_radial_15251_63610' cx='0' cy='0' r='1' gradientUnits='userSpaceOnUse' gradientTransform='rotate(90 .0005 8) scale(7.99958)'%3E%3Cstop offset='.5618' stop-color='%230866FF' stop-opacity='0'/%3E%3Cstop offset='1' stop-color='%230866FF' stop-opacity='.1'/%3E%3C/radialGradient%3E%3CradialGradient id='paint2_radial_15251_63610' cx='0' cy='0' r='1' gradientUnits='userSpaceOnUse' gradientTransform='rotate(45 -4.5257 10.9237) scale(10.1818)'%3E%3Cstop offset='.3143' stop-color='%2302ADFC'/%3E%3Cstop offset='1' stop-color='%2302ADFC' stop-opacity='0'/%3E%3C/radialGradient%3E%3ClinearGradient id='paint0_linear_15251_63610' x1='2.3989' y1='2.3999' x2='13.5983' y2='13.5993' gradientUnits='userSpaceOnUse'%3E%3Cstop stop-color='%2302ADFC'/%3E%3Cstop offset='.5' stop-color='%230866FF'/%3E%3Cstop offset='1' stop-color='%232B7EFF'/%3E%3C/linearGradient%3E%3C/defs%3E%3C/svg%3E"
                            /></span>
                          </div>
                        </div>
                        <div
                          class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                          role="none"
                          data-visualcompletion="ignore"
                        ></div></div
                    ></span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
        >
          <div
            class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 x1n2onr6 x46jau6"
          >
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1q0q8m5 xlxy82 x1o7swki xp7cj6j x1bkzgmd xl02xpf xgk8upj x26u7qi x19p7ews x10l6tqk x10ick3y xvy4d1p xlxyqfn"
            ></div>
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x78zum5 x1iyjqo2 x21xpn4 x1n2onr6"
            >
              <div
                class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xwnonoy x1ey2m1c xg01cxk x10l6tqk x13vifvy x1k90msu x19991ni xz4gly6 xfo62xy xh0n66s"
              ></div>
              <div
                class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x87ps6o x1lku1pv x1a2a7pz x6s0dn4 xi81zsa x1q0g3np x1iyjqo2 xs83m0k xsyo7zv x1mnrxsn"
                role="button"
                tabindex="0"
              >
                <span
                  class="html-span xdj266r xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x78zum5 x1w0mnb xeuugli"
                  ><span
                    class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen x1s688f xi81zsa"
                    dir="auto"
                    >View all 3 replies</span
                  ></span
                >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Phúc Yên 19 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100065615257390/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r35:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r35:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t39.30808-1/466390139_912007710996396_8780735790022748004_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=103&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=uDwCbwFhChQQ7kNvgGpQRay&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=AydVjipvye9D3japVbay0-F&amp;oh=00_AYBY6wimkV0gmIyWwW7SnlerJ9rTk5JBIlp4kfpnt1-Hhw&amp;oe=673F7484"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100065615257390/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Phúc Yên</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Năm nay thi theo ctrinhf mới hết 9 môn đấy ông , nên
                            cân nhắc nếu ông muốn tập trung vào THPT
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 584px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873447371606111&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >19h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Phạm Long 8 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100035428063730/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r40:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r40:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t39.30808-1/465713242_1282750322915891_7924172691351432352_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=108&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=R0Pf_UiYf9AQ7kNvgGqhQnf&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYAiYhKzwAOnjycp9LcNXoc4aLXZ5W2bfjDey4sWZ_uL5w&amp;oe=673F8AEB"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100035428063730/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Phạm Long</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            năm nay ko bt thế nào, chứ năm t thi thì thấy đề dễ
                            phết, chỉ cần học đều chút, thậm chí không cần cả ôn
                            đề vẫn &gt;100
                          </div>
                          <div dir="auto" style="text-align: start">
                            à mà đây là ngoài bắc, chứ trong nam nnao thì t chịu
                            <span
                              class="html-span xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x3nfvp2 x1j61x8r x1fcty0u xdj266r xat24cr xgzva0m xhhsvwb xxymvpz xlup9mm x1kky2od"
                              ><img
                                height="16"
                                width="16"
                                alt=":v"
                                class="xz74otr"
                                referrerpolicy="origin-when-cross-origin"
                                src="https://static.xx.fbcdn.net/images/emoji.php/v9/e31/1/16/PACMAN.png"
                            /></span>
                          </div></div
                      ></span>
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 584px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873751784909003&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >8h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Minh Cao Pham 17 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100059902172899/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r44:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r44:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t39.30808-1/459925656_890593586280706_6753903169330045661_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=105&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=JswIOxjGiF0Q7kNvgGkNu8m&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYAwP2BC1REZRKNLyeyxqrOgEzdMW6C7i2gH7Urc04RTFw&amp;oe=673F6BE1"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100059902172899/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Minh Cao Pham</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Nếu mà bro học chắc trên lớp rồi thì bro có thể mua
                            tài liệu rồi tự ôn cũng được, đỡ mất tiền mua khoá
                            ôn online. Năm ngoái t mua đúng 3 cuốn minh hoa đề
                            HSA vừa ôn thi ĐH vừa làm, đến lúc thi vẫn được 104
                            điểm
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 584px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873489514935230&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >17h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Trần Văn Nam 19 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100020297670770/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r48:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r48:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-13.fna.fbcdn.net/v/t39.30808-1/462453294_1449797372373505_3510694893474925030_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=106&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=ghM9fPsEg7EQ7kNvgGioiky&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-13.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYAOQUCkemSec45ROGNPdlJDNgF13xj_TkdMZC6Cn3b9CA&amp;oe=673F6B76"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100020297670770/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Trần Văn Nam</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Vốt ban 10 em 2k7 ngẫu nhiên để ôn thi đại học
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 344px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873434738274041&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >19h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <span
                      class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                      ><div
                        aria-label="4 reactions; see who reacted to this"
                        class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz"
                        role="button"
                        tabindex="0"
                      >
                        <div
                          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r x6s0dn4 x1a2cdl4 xnhgr82 x1qt0ttw xgk8upj x78zum5 x1ncwhqj xlup9mm x1nn3v0j xg83lxy x1120s5i x1h0ha7o"
                        >
                          <span
                            class="html-span xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x18d9i69 x1hl2dhg x16tdsg8 x1vvkbs xi81zsa x1nxh6w3 x1fcty0u x1sibtaa x1h0ha7o xg83lxy xuxw1ft"
                            >4</span
                          >
                          <div
                            class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 x6s0dn4 x78zum5 x15zctf7 x1e558r4"
                          >
                            <span
                              class="html-span xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x9bbmet x48pi3f xu3j5b3 xol2nv x1a2cdl4 xnhgr82 x1qt0ttw xgk8upj x78zum5 x139jcc6 x1a2a7pz x1n2onr6"
                              ><img
                                class=""
                                height="18"
                                role="presentation"
                                width="18"
                                src="data:image/svg+xml,%3Csvg fill='none' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cg clip-path='url(%23clip0_15251_63610)'%3E%3Cpath d='M15.9943 8.0004c0 4.4181-3.5815 7.9996-7.9996 7.9996-4.418 0-7.9996-3.5815-7.9996-7.9996 0-4.418 3.5816-7.9995 7.9996-7.9995 4.4181 0 7.9996 3.5815 7.9996 7.9995Z' fill='url(%23paint0_linear_15251_63610)'/%3E%3Cpath d='M15.9973 7.9992c0 4.4178-3.5811 7.9992-7.9987 7.9992C3.5811 15.9984 0 12.417 0 7.9992S3.5811 0 7.9986 0c4.4176 0 7.9987 3.5814 7.9987 7.9992Z' fill='url(%23paint1_radial_15251_63610)'/%3E%3Cpath d='M15.9943 8.0004c0 4.4181-3.5815 7.9996-7.9996 7.9996-4.418 0-7.9996-3.5815-7.9996-7.9996 0-4.418 3.5816-7.9995 7.9996-7.9995 4.4181 0 7.9996 3.5815 7.9996 7.9995Z' fill='url(%23paint2_radial_15251_63610)' fill-opacity='.8'/%3E%3Cpath d='M12.3964 9.0861c0 1.1142-.3999 1.1142-1.1999 1.1142-.7999 0-1.2 0-1.2-1.1142 0-.8205.5373-1.4856 1.2-1.4856s1.1999.6651 1.1999 1.4856ZM5.9965 9.0861c0 1.1142-.4 1.1142-1.1999 1.1142-.8 0-1.2 0-1.2-1.1142 0-.8205.5373-1.4856 1.2-1.4856s1.2.6651 1.2 1.4856Z' fill='%231C1C1D'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M7.9946 11.2002c1.6447 0 2.3999 1.0936 2.3999 1.4122 0 .1095-.084.1877-.2248.1877-.3152 0-.752-.4-2.1751-.4s-1.8599.4-2.175.4c-.1409 0-.2249-.0782-.2249-.1877 0-.3186.7552-1.4122 2.3999-1.4122Z' fill='%234B280E'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M10.7861 6.3078a3.3942 3.3942 0 0 1 1.8777 1.0409.4.4 0 0 0 .5892-.5411 4.1944 4.1944 0 0 0-2.3202-1.2862.4.4 0 1 0-.1467.7864ZM5.206 6.3078a3.3946 3.3946 0 0 0-1.8777 1.0409.4.4 0 1 1-.5891-.5411 4.1946 4.1946 0 0 1 2.3202-1.2862.4.4 0 0 1 .1467.7864Z' fill='%23E0761A'/%3E%3Cg filter='url(%23filter0_i_15251_63610)'%3E%3Cpath d='M2.9952 11.2004c-.2647-.003-.435.1598-1.1536 1.3088-.3267.5231-.6468 1.0515-.6468 1.691 0 .994.8 1.7999 1.8 1.7999.9999 0 1.8008-.8 1.8008-1.7999 0-.6395-.32-1.1679-.6468-1.691-.7186-1.149-.8887-1.3118-1.1536-1.3088Z' fill='%2302ADFC' fill-opacity='.9'/%3E%3C/g%3E%3C/g%3E%3Cdefs%3E%3CradialGradient id='paint1_radial_15251_63610' cx='0' cy='0' r='1' gradientUnits='userSpaceOnUse' gradientTransform='matrix(0 7.9992 -7.99863 0 7.9986 7.9992)'%3E%3Cstop offset='.5637' stop-color='%23FF5758' stop-opacity='0'/%3E%3Cstop offset='1' stop-color='%23FF5758' stop-opacity='.1'/%3E%3C/radialGradient%3E%3CradialGradient id='paint2_radial_15251_63610' cx='0' cy='0' r='1' gradientUnits='userSpaceOnUse' gradientTransform='rotate(45 -4.5287 10.9195) scale(10.1818)'%3E%3Cstop stop-color='%23FFF287'/%3E%3Cstop offset='1' stop-color='%23FFF287' stop-opacity='0'/%3E%3C/radialGradient%3E%3ClinearGradient id='paint0_linear_15251_63610' x1='2.395' y1='2.4007' x2='13.5944' y2='13.6001' gradientUnits='userSpaceOnUse'%3E%3Cstop stop-color='%23FFF287'/%3E%3Cstop offset='1' stop-color='%23F68628'/%3E%3C/linearGradient%3E%3CclipPath id='clip0_15251_63610'%3E%3Cpath fill='%23fff' d='M-.003.0009h15.9993v15.9984H-.003z'/%3E%3C/clipPath%3E%3Cfilter id='filter0_i_15251_63610' x='1.1948' y='11.2003' width='3.6006' height='4.7998' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeColorMatrix in='SourceAlpha' values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0' result='hardAlpha'/%3E%3CfeOffset/%3E%3CfeGaussianBlur stdDeviation='1.1999'/%3E%3CfeComposite in2='hardAlpha' operator='arithmetic' k2='-1' k3='1'/%3E%3CfeColorMatrix values='0 0 0 0 0.278431 0 0 0 0 0.196078 0 0 0 0 0.952941 0 0 0 0.1 0'/%3E%3CfeBlend in2='shape' result='effect1_innerShadow_15251_63610'/%3E%3C/filter%3E%3C/defs%3E%3C/svg%3E" /></span
                            ><span
                              class="html-span xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x9bbmet x48pi3f xu3j5b3 xol2nv x1a2cdl4 xnhgr82 x1qt0ttw xgk8upj x78zum5 x139jcc6 x1a2a7pz x1n2onr6"
                              ><img
                                class=""
                                height="18"
                                role="presentation"
                                width="18"
                                src="data:image/svg+xml,%3Csvg fill='none' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cg clip-path='url(%23clip0_15251_63610)'%3E%3Cpath d='M15.9953 7.9996c0 4.418-3.5816 7.9996-7.9996 7.9996S-.004 12.4176-.004 7.9996 3.5776 0 7.9957 0c4.418 0 7.9996 3.5815 7.9996 7.9996Z' fill='url(%23paint0_linear_15251_63610)'/%3E%3Cpath d='M15.9973 7.9992c0 4.4178-3.5811 7.9992-7.9987 7.9992C3.5811 15.9984 0 12.417 0 7.9992S3.5811 0 7.9986 0c4.4176 0 7.9987 3.5814 7.9987 7.9992Z' fill='url(%23paint1_radial_15251_63610)'/%3E%3Cpath d='M15.9953 7.9996c0 4.418-3.5816 7.9996-7.9996 7.9996S-.004 12.4176-.004 7.9996 3.5776 0 7.9957 0c4.418 0 7.9996 3.5815 7.9996 7.9996Z' fill='url(%23paint2_radial_15251_63610)' fill-opacity='.8'/%3E%3Cpath d='M12.5278 8.1957c.4057.1104.6772.4854.623.9024-.3379 2.6001-2.5167 4.9012-5.1542 4.9012s-4.8163-2.3011-5.1542-4.9012c-.0542-.417.2173-.792.623-.9024.8708-.237 2.5215-.596 4.5312-.596 2.0098 0 3.6605.359 4.5312.596Z' fill='%234B280E'/%3E%3Cpath d='M11.5809 12.3764c-.9328.9843-2.1948 1.6228-3.5841 1.6228-1.3892 0-2.6512-.6383-3.5839-1.6225a1.5425 1.5425 0 0 0-.016-.0174c.4475-1.0137 2.2-1.3599 3.5999-1.3599 1.4 0 3.1514.3468 3.5998 1.3599l-.0157.0171Z' fill='url(%23paint3_linear_15251_63610)'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M13.3049 5.8793c.1614-1.1485-.6387-2.2103-1.7872-2.3717l-.0979-.0138c-1.1484-.1614-2.2103.6388-2.3717 1.7872l-.0163.1164a.5.5 0 0 0 .9902.1392l.0163-.1164c.0846-.6016.6408-1.0207 1.2424-.9362l.0978.0138c.6016.0845 1.0207.6407.9362 1.2423l-.0164.1164a.5.5 0 0 0 .9903.1392l.0163-.1164ZM2.6902 5.8793c-.1614-1.1485.6387-2.2103 1.7872-2.3717l.0979-.0138c1.1484-.1614 2.2103.6388 2.3717 1.7872l.0164.1164a.5.5 0 1 1-.9903.1392l-.0163-.1164c-.0846-.6016-.6408-1.0207-1.2423-.9362l-.098.0138c-.6015.0845-1.0206.6407-.936 1.2423l.0163.1164a.5.5 0 0 1-.9902.1392l-.0164-.1164Z' fill='%231C1C1D'/%3E%3C/g%3E%3Cdefs%3E%3CradialGradient id='paint1_radial_15251_63610' cx='0' cy='0' r='1' gradientUnits='userSpaceOnUse' gradientTransform='matrix(0 7.9992 -7.99863 0 7.9986 7.9992)'%3E%3Cstop offset='.5637' stop-color='%23FF5758' stop-opacity='0'/%3E%3Cstop offset='1' stop-color='%23FF5758' stop-opacity='.1'/%3E%3C/radialGradient%3E%3CradialGradient id='paint2_radial_15251_63610' cx='0' cy='0' r='1' gradientUnits='userSpaceOnUse' gradientTransform='rotate(45 -4.5272 10.9202) scale(10.1818)'%3E%3Cstop stop-color='%23FFF287'/%3E%3Cstop offset='1' stop-color='%23FFF287' stop-opacity='0'/%3E%3C/radialGradient%3E%3ClinearGradient id='paint0_linear_15251_63610' x1='2.396' y1='2.3999' x2='13.5954' y2='13.5993' gradientUnits='userSpaceOnUse'%3E%3Cstop stop-color='%23FFF287'/%3E%3Cstop offset='1' stop-color='%23F68628'/%3E%3C/linearGradient%3E%3ClinearGradient id='paint3_linear_15251_63610' x1='5.1979' y1='10.7996' x2='5.245' y2='14.2452' gradientUnits='userSpaceOnUse'%3E%3Cstop stop-color='%23FF60A4'/%3E%3Cstop offset='.2417' stop-color='%23FA2E3E'/%3E%3Cstop offset='1' stop-color='%23BC0A26'/%3E%3C/linearGradient%3E%3CclipPath id='clip0_15251_63610'%3E%3Cpath fill='%23fff' d='M-.002 0h16v15.9992h-16z'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E"
                            /></span>
                          </div>
                        </div>
                        <div
                          class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                          role="none"
                          data-visualcompletion="ignore"
                        ></div></div
                    ></span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Hải Yến 19 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100015156151313/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r4d:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r4d:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-13.fna.fbcdn.net/v/t39.30808-1/458229357_1929499630898557_3767714175184576793_n.jpg?stp=cp6_dst-jpg_s32x32&amp;_nc_cat=106&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=MGvkdPUXmgYQ7kNvgFRkffr&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-13.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYA_lBSZGDhWPkiHhjc8ETU6LE0uVPp0VWtS-NFtaau6Vw&amp;oe=673F6850"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100015156151313/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Hải Yến</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            đgnl cũng không khó lắm đâu mà, ôn hết sgk là đượcc
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 385px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873445118273003&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >19h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Anh Duc 6 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100024437766009/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r4h:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r4h:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t39.30808-1/427972008_1599295994228311_6449127325084089843_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=110&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=dhXZ-7rSgt4Q7kNvgHshG1h&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYDS4XbI4W4qoGiCdguJK7RS_xjgUIoGai3ekqGqlUrgRA&amp;oe=673F7D81"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100024437766009/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Anh Duc</span
                            ></span
                          ></a
                        ></span
                      ></span
                    ><span class="x3nfvp2 xsgj6o6 x1kgmq87 xxymvpz"
                      ><span
                        class="html-span x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x3nfvp2 x1kgmq87 xsgj6o6"
                        ><span
                          class="html-span xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x3nfvp2"
                          ><span
                            class="html-span xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs"
                            ><span
                              ><div class="x1rg5ohu">
                                <span
                                  ><span
                                    ><div role="link" tabindex="0">
                                      <div
                                        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x18d9i69 x6s0dn4 x1lcm9me x1yr5g0i xrt01vj x10y3i5r x3nfvp2 x1qx5ct2 x150jy0e x1e558r4 x1av1boa"
                                      >
                                        <span
                                          class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x3x7a5m x1nxh6w3 x1sibtaa xo1l8bm x1fey0fg"
                                          dir="auto"
                                          ><span
                                            class="x1lliihq x6ikm8r x10wlt62 x1n2onr6 xlyipyv xuxw1ft x1j85h84"
                                            >Author</span
                                          ></span
                                        >
                                      </div>
                                    </div></span
                                  ></span
                                >
                              </div></span
                            ></span
                          ></span
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            E xin mấy web cho đề tham khảo miễn phí với ạ tại
                            trên gg tìm toàn bắt mua khoá học
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 584px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873790098238505&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >6h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xv6pb6r x10ick3y xg4rxxw xmjcpbm x10l6tqk xfo62xy"
        ></div>
        <div
          aria-label="Comment by Nguyễn Ngoc Anh 2 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100053430592425/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r4l:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r4l:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-13.fna.fbcdn.net/v/t39.30808-1/448776811_1032528978538112_4179763048797782593_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=104&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=jJcoT5Zs0LkQ7kNvgEac6ao&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-13.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYCgCCSMRB0c2T2SmwqmXfqShUvFgiFrlyWpebg5Arvm1w&amp;oe=673F8E59"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100053430592425/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Nguyễn Ngoc Anh</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Nếu là đgnl hcm thì cứ ôn cho kĩ 3 môn toán văn anh
                            còn 6 môn còn lại thì cứ chịu nghe giảng trên trường
                            là đc(do 6 môn này năm nay có 300đ nên đủ biết là
                            đc), ptsl hay logic thì trên mạng cũng có nên làm
                            cho khỏi bỡ ngỡ( có thể lên tailieuonthi .org b…
                            <div
                              class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xzsf02u x1s688f"
                              role="button"
                              tabindex="0"
                            >
                              See more
                            </div>
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 584px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873898344894347&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >2h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
        >
          <div
            class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 x1n2onr6 x46jau6"
          >
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1q0q8m5 xlxy82 x1o7swki xp7cj6j x1bkzgmd xl02xpf xgk8upj x26u7qi x19p7ews x10l6tqk x10ick3y xvy4d1p xlxyqfn"
            ></div>
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x78zum5 x1iyjqo2 x21xpn4 x1n2onr6"
            >
              <div
                class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xwnonoy x1ey2m1c xg01cxk x10l6tqk x13vifvy x1k90msu x19991ni xz4gly6 xfo62xy xh0n66s"
              ></div>
              <div
                class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x87ps6o x1lku1pv x1a2a7pz x6s0dn4 xi81zsa x1q0g3np x1iyjqo2 xs83m0k xsyo7zv x1mnrxsn"
                role="button"
                tabindex="0"
              >
                <span
                  class="html-span xdj266r xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x78zum5 x1w0mnb xeuugli"
                  ><span
                    class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen x1s688f xi81zsa"
                    dir="auto"
                    >View 1 reply</span
                  ></span
                >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Nguyễn An Nhật 19 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100021064864787/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r4p:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r4p:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-13.fna.fbcdn.net/v/t39.30808-1/447281549_1404416890270460_7038741196933742163_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=106&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=ncTErVfDd_wQ7kNvgHKJjw1&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-13.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYCMQK97gvFkEfgL3UoezzlwJXByoaenxcVZAAZIWBWTjg&amp;oe=673F6B6F"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100021064864787/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Nguyễn An Nhật</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            đăng ký khoá cũng có học đâu bác
                            <span
                              class="html-span xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x3nfvp2 x1j61x8r x1fcty0u xdj266r xat24cr xgzva0m xhhsvwb xxymvpz xlup9mm x1kky2od"
                              ><img
                                height="16"
                                width="16"
                                alt="🐧"
                                class="xz74otr"
                                referrerpolicy="origin-when-cross-origin"
                                src="https://static.xx.fbcdn.net/images/emoji.php/v9/t11/1/16/1f427.png"
                            /></span>
                            sách ngữ văn 9 cũ + nghe kĩ gv giảng + hiểu bài là
                            được, có thể luyện ít đề phân tích số liệu đỡ bỡ ngỡ
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 584px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873435531607295&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >19h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Hiếu Nguyễn 19 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100009873346402/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r4t:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r4t:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t1.30497-1/453178253_471506465671661_2781666950760530985_n.png?stp=cp0_dst-png_s32x32&amp;_nc_cat=1&amp;ccb=1-7&amp;_nc_sid=b224c7&amp;_nc_ohc=cZVTekJX4O4Q7kNvgGVjLkF&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYAU8ycSLp2dLX2-rBx_-kMqVdnbhi71B8LCSrkSyxEOBA&amp;oe=676103FA"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100009873346402/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Hiếu Nguyễn</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Học đều các môn là thi dc, k cần phải đăng ký học
                            thêm. Yếu môn nào thì chăm môn đó lên 1 tí dgnl nó
                            dễ hơn thi dh nhiều
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 584px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873445758272939&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >19h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xv6pb6r x10ick3y xg4rxxw xmjcpbm x10l6tqk xfo62xy"
        ></div>
        <div
          aria-label="Comment by Quang Huy 18 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100040527053323/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r51:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r51:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t39.30808-1/466530353_1302959931064896_4642438212339653298_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=111&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=PDzfPsTTsCoQ7kNvgHonEo_&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYAb3N8P384O4gjOMT3vBXYr-mxoa9OkQLHTAz36VcGO7g&amp;oe=673F7382"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100040527053323/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Quang Huy</span
                            ></span
                          ></a
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            Tự học thôi còn lại tìm đc ở đâu form đề thì làm thừ
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2" style="min-width: 367px">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873485008269014&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >18h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x78zum5 x1iyjqo2 x13a6bvl x1d52u69 xr9ek0c xjpr12u">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      >
        <div
          class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
        >
          <div
            class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 x1n2onr6 x46jau6"
          >
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1q0q8m5 xlxy82 x1o7swki xp7cj6j x1bkzgmd xl02xpf xgk8upj x26u7qi x19p7ews x10l6tqk x10ick3y xvy4d1p xlxyqfn"
            ></div>
            <div
              class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x78zum5 x1iyjqo2 x21xpn4 x1n2onr6"
            >
              <div
                class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd xwnonoy x1ey2m1c xg01cxk x10l6tqk x13vifvy x1k90msu x19991ni xz4gly6 xfo62xy xh0n66s"
              ></div>
              <div
                class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x87ps6o x1lku1pv x1a2a7pz x6s0dn4 xi81zsa x1q0g3np x1iyjqo2 xs83m0k xsyo7zv x1mnrxsn"
                role="button"
                tabindex="0"
              >
                <span
                  class="html-span xdj266r xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x78zum5 x1w0mnb xeuugli"
                  ><span
                    class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen x1s688f xi81zsa"
                    dir="auto"
                    >View all 3 replies</span
                  ></span
                >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div class="x169t7cy x19f6ikt">
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6"
      >
        <div
          aria-label="Comment by Anh Duc 15 hours ago"
          role="article"
          tabindex="-1"
          class="x1n2onr6 x1swvt13 x1iorvi4 x78zum5 x1q0g3np x1a2a7pz"
        >
          <div
            class="xqcrz7y x14yjl9h xudhj91 x18nykt9 xww2gxu x1lliihq x1w0mnb xr9ek0c x1n2onr6"
          >
            <span class=""
              ><span class="xt0psk2"
                ><a
                  aria-hidden="true"
                  attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                  class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1rg5ohu x1a2a7pz"
                  href="/groups/835327288751453/user/100024437766009/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                  role="link"
                  tabindex="-1"
                  ><div class="x1rg5ohu x1n2onr6 x3ajldb x1ja2u2z">
                    <svg
                      aria-hidden="true"
                      class="x3ajldb"
                      data-visualcompletion="ignore-dynamic"
                      role="none"
                      style="height: 32px; width: 32px"
                    >
                      <mask id=":r55:">
                        <circle cx="16" cy="16" fill="white" r="16"></circle>
                      </mask>
                      <g mask="url(#:r55:)">
                        <image
                          x="0"
                          y="0"
                          height="100%"
                          preserveAspectRatio="xMidYMid slice"
                          width="100%"
                          xlink:href="https://scontent.fsgn5-6.fna.fbcdn.net/v/t39.30808-1/427972008_1599295994228311_6449127325084089843_n.jpg?stp=cp0_dst-jpg_s32x32&amp;_nc_cat=110&amp;ccb=1-7&amp;_nc_sid=0ecb9b&amp;_nc_ohc=dhXZ-7rSgt4Q7kNvgHshG1h&amp;_nc_zt=24&amp;_nc_ht=scontent.fsgn5-6.fna&amp;_nc_gid=Aa9IFO7M1Qyqgy7YHlbtz4M&amp;oh=00_AYDS4XbI4W4qoGiCdguJK7RS_xjgUIoGai3ekqGqlUrgRA&amp;oe=673F7D81"
                          style="height: 32px; width: 32px"
                        ></image>
                        <circle
                          class="xbh8q5q x1pwv2dq xvlca1e"
                          cx="16"
                          cy="16"
                          r="16"
                        ></circle>
                      </g>
                    </svg>
                  </div>
                  <div
                    class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                    role="none"
                    data-visualcompletion="ignore"
                  ></div></a></span
            ></span>
          </div>
          <div class="x1r8uery x1iyjqo2 x6ikm8r x10wlt62 x1pi30zi">
            <div>
              <div class="xv55zj0 x1vvkbs x1rg5ohu xxymvpz">
                <div
                  class="xmjcpbm x1tlxs6b x1g8br2z x1gn5b1j x230xth x9f619 xzsf02u x1rg5ohu xdj266r x11i5rnm xat24cr x1mh8g0r x193iq5w x1mzt3pk x1n2onr6 xeaf4i8 x13faqbe"
                >
                  <div class="xwib8y2 xn6708d x1ye3gou x1y1aw1k">
                    <span class=""
                      ><span class="xt0psk2"
                        ><a
                          aria-hidden="false"
                          attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                          class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1heor9g x1sur9pj xkrqix3 x1s688f"
                          href="/groups/835327288751453/user/100024437766009/?__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                          role="link"
                          tabindex="0"
                          ><span class="x3nfvp2"
                            ><span
                              class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x676frb x1nxh6w3 x1sibtaa x1s688f xzsf02u"
                              dir="auto"
                              >Anh Duc</span
                            ></span
                          ></a
                        ></span
                      ></span
                    ><span class="x3nfvp2 xsgj6o6 x1kgmq87 xxymvpz"
                      ><span
                        class="html-span x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x3nfvp2 x1kgmq87 xsgj6o6"
                        ><span
                          class="html-span xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs x3nfvp2"
                          ><span
                            class="html-span xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1hl2dhg x16tdsg8 x1vvkbs"
                            ><span
                              ><div class="x1rg5ohu">
                                <span
                                  ><span
                                    ><div role="link" tabindex="0">
                                      <div
                                        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x18d9i69 x6s0dn4 x1lcm9me x1yr5g0i xrt01vj x10y3i5r x3nfvp2 x1qx5ct2 x150jy0e x1e558r4 x1av1boa"
                                      >
                                        <span
                                          class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x x4zkp8e x3x7a5m x1nxh6w3 x1sibtaa xo1l8bm x1fey0fg"
                                          dir="auto"
                                          ><span
                                            class="x1lliihq x6ikm8r x10wlt62 x1n2onr6 xlyipyv xuxw1ft x1j85h84"
                                            >Author</span
                                          ></span
                                        >
                                      </div>
                                    </div></span
                                  ></span
                                >
                              </div></span
                            ></span
                          ></span
                        ></span
                      ></span
                    >
                    <div class="x1lliihq xjkvuk6 x1iorvi4">
                      <span
                        class="x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u"
                        dir="auto"
                        lang="vi-VN"
                        ><div class="xdj266r x11i5rnm xat24cr x1mh8g0r x1vvkbs">
                          <div dir="auto" style="text-align: start">
                            E mới làm đề dgnl xong hơi khê các bác ạ.em cũng lứa
                            chuột bạch nên giờ k bt trang nào luyện ôn ok để cứu
                            e nữa
                          </div>
                        </div></span
                      >
                    </div>
                  </div>
                </div>
              </div>
              <div class="x1rg5ohu xxymvpz x17z2i9w">
                <div
                  aria-hidden="false"
                  class="html-div xdj266r x11i5rnm xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1hy63sm xg01cxk xhva3ql"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      aria-expanded="false"
                      aria-haspopup="menu"
                      aria-label="Hide or report this"
                      class="x1i10hfl x1qjc9v5 xjqpnuy xa49m3k xqeqjp1 x2hbi6w x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx x2lwn1j xeuugli x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz xjyslct xjbqb8w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x3nfvp2 xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x3ajldb x194ut8o x1vzenxt xd7ygy7 xt298gk x1xhcax0 x1s928wv x10pfhc2 x1j6awrg x1v53gu8 x1tfg27r xitxdhh"
                      role="button"
                      tabindex="0"
                    >
                      <svg
                        viewBox="0 0 16 16"
                        width="16"
                        height="16"
                        fill="currentColor"
                        class="xfx01vb x1lliihq x1tzjh5l x1k90msu x2h7rmj x1qfuztq"
                        style="--color: var(--secondary-icon)"
                      >
                        <path
                          d="M2 8a1.25 1.25 0 1 1 2.5 0A1.25 1.25 0 0 1 2 8zm6-1.25a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5zm4.75 0a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5z"
                        ></path>
                      </svg>
                      <div
                        class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h xzolkzo x12go9s9 x1rnf11y xprq8jg"
                        role="none"
                        data-visualcompletion="ignore"
                      ></div></div
                  ></span>
                </div>
              </div>
            </div>
            <div class="x78zum5 xv55zj0 x1vvkbs">
              <div aria-label="User's video - 7 seconds long">
                <div
                  class="x1tlxs6b x1g8br2z x1gn5b1j x230xth x1rg5ohu x12nagc x6ikm8r x10wlt62 x1n2onr6 xxymvpz"
                >
                  <div
                    class="x1ey2m1c x9f619 xds687c x17qophe x10l6tqk x13vifvy"
                  >
                    <div class="x1lliihq x5yr21d x1n2onr6 xh8yej3 x1ja2u2z">
                      <div class="x5yr21d x1n2onr6 xh8yej3">
                        <div class="x5yr21d x1n2onr6 xh8yej3">
                          <div class="x5yr21d x1uhb9sk xh8yej3">
                            <video
                              class="x1lliihq x5yr21d xh8yej3"
                              playsinline=""
                              src="blob:https://www.facebook.com/4ae7a830-4995-4ef1-8dd9-796c7b260d13"
                              style="display: block"
                            ></video>
                            <div data-instancekey="id-vpuid-f79d0748352aa6a27">
                              <div
                                class="x5yr21d x10l6tqk x13vifvy xh8yej3"
                                data-visualcompletion="ignore"
                              >
                                <div
                                  class="xc9qbxq xtzzx4i x10l6tqk xwa60dl x11lhmoz x14qfxbe xg01cxk x2p8vrm x13dflua x1jl3cmp xl405pv xlshs6z"
                                >
                                  <svg
                                    class="x10l6tqk x1150agl x1e0gzzx"
                                    height="38"
                                    width="38"
                                  >
                                    <g
                                      class="xeaay5l xa4qsjk xnjvcao x1esw782 x1bndym7 xorstpt"
                                    >
                                      <circle
                                        class="x1bndym7 xeo85xg xeaay5l xa4qsjk xq0anyh x1esw782 xvlca1e xorstpt"
                                        cx="19"
                                        cy="19"
                                        fill="none"
                                        r="17"
                                        stroke="#1877F2"
                                        stroke-width="2"
                                      ></circle>
                                    </g>
                                  </svg>
                                </div>
                                <i
                                  class="xy75621 xafmxuu x11i5rnm xat24cr x4mskuk xni59qk x14yjl9h xudhj91 x18nykt9 xww2gxu x1ypdohk xtzzx4i x1hc1fzr x10l6tqk xwa60dl"
                                  ><div
                                    aria-label="Play video"
                                    class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1n2onr6 x87ps6o x1lku1pv x1a2a7pz"
                                    role="button"
                                    tabindex="0"
                                  >
                                    <i
                                      data-visualcompletion="css-img"
                                      class=""
                                      style="
                                        background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/y-/r/dM0kAU1P96A.png');
                                        background-position: 0px 0px;
                                        background-size: auto;
                                        width: 72px;
                                        height: 72px;
                                        background-repeat: no-repeat;
                                        display: inline-block;
                                      "
                                    ></i></div
                                ></i>
                                <div
                                  class="x1ey2m1c x10l6tqk x1d8287x x6o7n8i xl405pv xh8yej3 x11uqc5h x6s0dn4 xzt5al7 x78zum5 x1q0g3np"
                                >
                                  <div
                                    class="x11v4dcs x1ey2m1c x10l6tqk x1d8287x x6o7n8i xl405pv xh8yej3 x8knxv4 xg01cxk x47corl xlshs6z"
                                    style="height: 44px"
                                  ></div>
                                  <div
                                    class="x6s0dn4 x78zum5 x1q0g3np x2lah0s xozqiw3 xexx8yu x1mpkggp x18d9i69 x1t2a60a x1fmh03i x47corl"
                                  >
                                    <span
                                      class="xuk3077 x78zum5 x14atkfc"
                                      style="margin-top: 0px"
                                      ><span
                                        class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                        ><span
                                          class="xuk3077 x78zum5 x14atkfc"
                                          style="padding-top: 0px"
                                          ><div
                                            aria-label="Play"
                                            class="x1i10hfl x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 xe8uvvx x16tdsg8 x1hl2dhg xggy1nq x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1n2onr6 x87ps6o x1lku1pv xjbqb8w x76ihet xwmqs3e x112ta8 xxxdfa6 x1ypdohk x1rg5ohu x1qx5ct2 x1k70j0n x1w0mnb xzueoph x1mnrxsn x1iy03kw xexx8yu x4uap5 x18d9i69 xkhd6sd x1o7uuvo x1a2a7pz x1qo4wvw"
                                            role="button"
                                            tabindex="0"
                                          >
                                            <i
                                              data-visualcompletion="css-img"
                                              class="x1b0d499 xaj1gnb"
                                              style="
                                                background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/y-/r/dM0kAU1P96A.png');
                                                background-position: -42px -268px;
                                                background-size: auto;
                                                width: 20px;
                                                height: 20px;
                                                background-repeat: no-repeat;
                                                display: inline-block;
                                              "
                                            ></i></div></span></span
                                    ></span>
                                    <div
                                      class="x14ctfv x1rg5ohu x1pg5gke xss6m8b x7h9g57 x1t4t16n x8j4wrb x9hgts1 x2b8uid x27saw0 x3ajldb"
                                    >
                                      <span class="x1s688f x15hfatp">0:00</span
                                      ><span> / </span><span>0:07</span>
                                    </div>
                                  </div>
                                  <div
                                    class="x6s0dn4 x78zum5 x1q0g3np x2lah0s xozqiw3 x1iyjqo2 x1fmh03i x47corl"
                                  >
                                    <div
                                      class="x4k7w5x x1h91t0o x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1n2onr6 x1qrby5j x1jfb8zj"
                                    >
                                      <div
                                        aria-label="Change Position"
                                        aria-orientation="horizontal"
                                        aria-valuemax="6.990611"
                                        aria-valuemin="0"
                                        aria-valuenow="0"
                                        class="x1ypdohk x1y1aw1k x4uap5 xwib8y2 xkhd6sd x1n2onr6 x87ps6o xh8yej3"
                                        role="slider"
                                        tabindex="0"
                                      >
                                        <div
                                          class="x1rwy58d xm3z3ea x1x8b98j x131883w x16mih1h xpdb0fs xuoj239 xd9u3wd x87ps6o"
                                        >
                                          <div
                                            class="xuoj239 x10l6tqk x17j41np"
                                            data-visualcompletion="ignore"
                                            style="width: 100%"
                                          ></div>
                                          <div
                                            class="x1evw4sf xm3z3ea x1x8b98j x131883w x16mih1h xuoj239 x10l6tqk x87ps6o"
                                            data-visualcompletion="ignore"
                                            style="width: 0%"
                                          >
                                            <div
                                              class="x14hiurz x1g7gg9k xenha5r x1eoefnw x124h113 x14yjl9h xudhj91 x18nykt9 xww2gxu x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi xamhcws xol2nv xlxy82 x19p7ews x1nqv1ya x1s85apg xdk7pt x1x862rh x1rdy4ex x10l6tqk x3m8u43 x1xc55vz x1vjfegm"
                                            ></div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    class="x6s0dn4 x78zum5 x1q0g3np x2lah0s xozqiw3 xexx8yu x18d9i69 x4uap5 xkhd6sd x1fmh03i x47corl"
                                  >
                                    <div
                                      class="x1rg5ohu x1k70j0n x1w0mnb xzueoph x1mnrxsn"
                                    >
                                      <span
                                        class="xuk3077 x78zum5 x14atkfc"
                                        style="margin-top: 0px"
                                        ><span
                                          class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                          ><span
                                            class="xuk3077 x78zum5 x14atkfc"
                                            style="padding-top: 0px"
                                            ><div
                                              aria-label="Settings"
                                              class="x1i10hfl x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 xe8uvvx x16tdsg8 x1hl2dhg xggy1nq x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1n2onr6 x87ps6o x1lku1pv xjbqb8w x76ihet xwmqs3e x112ta8 xxxdfa6 x1ypdohk x1rg5ohu x1qx5ct2 x1k70j0n x1w0mnb xzueoph x1mnrxsn x1iy03kw xexx8yu x4uap5 x18d9i69 xkhd6sd x1o7uuvo x1a2a7pz x1qo4wvw"
                                              role="button"
                                              tabindex="0"
                                            >
                                              <i
                                                data-visualcompletion="css-img"
                                                class="x1b0d499 xaj1gnb"
                                                style="
                                                  background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                                                  background-position: 0px -490px;
                                                  background-size: auto;
                                                  width: 20px;
                                                  height: 20px;
                                                  background-repeat: no-repeat;
                                                  display: inline-block;
                                                "
                                              ></i></div></span></span
                                      ></span>
                                    </div>
                                  </div>
                                  <div
                                    class="x6s0dn4 x78zum5 x1q0g3np x2lah0s xozqiw3 xexx8yu x18d9i69 x1t2a60a x4uap5 x1fmh03i x47corl"
                                  >
                                    <span
                                      class="xuk3077 x78zum5 x14atkfc"
                                      style="margin-top: 0px"
                                      ><span
                                        class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                        ><span
                                          class="xuk3077 x78zum5 x14atkfc"
                                          style="padding-top: 0px"
                                          ><div
                                            aria-label="Enter fullscreen"
                                            class="x1i10hfl x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 xe8uvvx x16tdsg8 x1hl2dhg xggy1nq x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1n2onr6 x87ps6o x1lku1pv xjbqb8w x76ihet xwmqs3e x112ta8 xxxdfa6 x1ypdohk x1rg5ohu x1qx5ct2 x1k70j0n x1w0mnb xzueoph x1mnrxsn x1iy03kw xexx8yu x4uap5 x18d9i69 xkhd6sd x1o7uuvo x1a2a7pz x1qo4wvw"
                                            role="button"
                                            tabindex="0"
                                          >
                                            <i
                                              data-visualcompletion="css-img"
                                              class="x1b0d499 xaj1gnb"
                                              style="
                                                background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/y-/r/dM0kAU1P96A.png');
                                                background-position: -42px -289px;
                                                background-size: auto;
                                                width: 20px;
                                                height: 20px;
                                                background-repeat: no-repeat;
                                                display: inline-block;
                                              "
                                            ></i></div></span></span
                                    ></span>
                                  </div>
                                  <div
                                    class="x6s0dn4 x78zum5 x1q0g3np x2lah0s xozqiw3 xexx8yu x1mpkggp x18d9i69 xkhd6sd x1fmh03i x47corl"
                                  >
                                    <div
                                      class="x1ypdohk x1rg5ohu xhsvlbd xyamay9 xsyo7zv x10b6aqq x16hj40l x1n2onr6"
                                    >
                                      <div
                                        class="xk7dvq3 x9f619 x17qophe x1yrsyyn xsyo7zv x10b6aqq x16hj40l x10l6tqk xh8yej3"
                                      >
                                        <div
                                          class="x4k7w5x x1h91t0o x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1n2onr6 x1qrby5j x1jfb8zj"
                                        >
                                          <div
                                            aria-label="Change volume"
                                            aria-orientation="vertical"
                                            aria-valuemax="1"
                                            aria-valuemin="0"
                                            aria-valuenow="1"
                                            class="x1ypdohk xng8ra xg01cxk x47corl x1n2onr6 x1d8287x x19991ni xl405pv x1td3qas x1ja2u2z"
                                            role="slider"
                                            tabindex="0"
                                          >
                                            <div
                                              class="x18fn2jl x1lcm9me x1yr5g0i xrt01vj x10y3i5r x1ey2m1c xng8ra xoyjkpr x10l6tqk x1xc55vz"
                                            >
                                              <div
                                                class="x1spa7qu x1lcm9me x1yr5g0i xrt01vj x10y3i5r x1ey2m1c x10l6tqk xh8yej3"
                                                style="height: 0%"
                                              >
                                                <div
                                                  class="x1c7jfne x1f4buv5 x1n2onr6"
                                                >
                                                  <div
                                                    class="x14hiurz x1g7gg9k xenha5r x1eoefnw x124h113 x14yjl9h xudhj91 x18nykt9 xww2gxu x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi xamhcws xol2nv xlxy82 x19p7ews x1nqv1ya x1s85apg xdk7pt x1x862rh x1rdy4ex x10l6tqk x3m8u43 x1xc55vz x1vjfegm"
                                                  ></div>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                      <span
                                        class="xuk3077 x78zum5 x14atkfc"
                                        style="margin-top: 0px"
                                        ><span
                                          class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                                          ><span
                                            class="xuk3077 x78zum5 x14atkfc"
                                            style="padding-top: 0px"
                                            ><div
                                              aria-label="Unmute"
                                              class="x1i10hfl x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 xe8uvvx x16tdsg8 x1hl2dhg xggy1nq x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1n2onr6 x87ps6o x1lku1pv xjbqb8w x76ihet xwmqs3e x112ta8 xxxdfa6 x1ypdohk x1rg5ohu x1qx5ct2 x1k70j0n x1w0mnb xzueoph x1mnrxsn x1iy03kw xexx8yu x4uap5 x18d9i69 xkhd6sd x1o7uuvo x1a2a7pz x1qo4wvw"
                                              role="button"
                                              tabindex="0"
                                            >
                                              <i
                                                data-visualcompletion="css-img"
                                                class="x1b0d499 xaj1gnb"
                                                style="
                                                  background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/y-/r/dM0kAU1P96A.png');
                                                  background-position: 0px -205px;
                                                  background-size: auto;
                                                  width: 20px;
                                                  height: 20px;
                                                  background-repeat: no-repeat;
                                                  display: inline-block;
                                                "
                                              ></i></div></span></span
                                      ></span>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    class="x193iq5w"
                    style="padding-bottom: 165.6%; width: 250px"
                  ></div>
                  <div
                    class="x1exxf4d x1y71gwh x1nb4dca xu1343h x1tlxs6b x1g8br2z x1gn5b1j x230xth x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x178xt8z xm81vs4 xso031l xy80clv x47corl x1ey2m1c x9f619 xds687c x17qophe x10l6tqk x13vifvy"
                  ></div>
                </div>
              </div>
            </div>
            <div class="x6s0dn4 x3nfvp2">
              <ul
                aria-hidden="false"
                class="html-ul xe8uvvx xdj266r x4uap5 x18d9i69 xkhd6sd x1n0m28w x78zum5 x1wfe3co xat24cr xsgj6o6 x1o1nzlu xyqdw3p"
              >
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span
                    class="x4k7w5x x1h91t0o x1h9r5lt x1jfb8zj xv2umb2 x1beo9mf xaigb6o x12ejxvf x3igimt xarpa2k xedcshv x1lytzrv x1t2pt76 x7ja8zs x1qrby5j"
                    ><div
                      class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                    >
                      <a
                        attributionsrc="/privacy_sandbox/comet/register/source/?xt=AZUQn2SLXOP7pl54Tjj4DTSeBc5APNvUXDobPorI2H5Il598QGjVIA2X1vrkcN_Ng3hhyh9pf9bXYmZEVEwAOHsZFQ8sijsmU_e5hEIuToMbhcTmLt80ELG0hMeFsvW2gY7CzgvKebcg3HxvR38xwB2SniNZLIOVR8IOastXeRSxAJJvaAREOVryT7jb8xCx6XmHYQNKeAdzUE4TBP_XZDShPbalrd1Ov1kuPtMQroOC10skNkMDoJpsfWDw-svOwY7prpOKZZFkCaERCYfK-NZpIQDnPIKgLH8sO6IYkOj1HmvjNyRqRU84NHXUXCJFTdh3QvBaXA96TjbLI8QRYr6aKEaUZ17sQLBcykY8wsUP5iP5d1r-fzZHI87d68syg8zU4bNWN-S3eJul5x6NJZ9Re2K-vFFa5PCmvH_BDkM4hXtxbLTLHN3w2_afCJr0NRYlrd79HSuH1BF9zcfVwdhl2nDIurMKVShAjTrzDgKyiOzqBNjKkEHCyK4ieAb6VAih67HFSwXnuTsyMy3KWH93wty8RKBLC2wc_NL92Q8n06vAI8vtWBDf2ieuBD2MQm8QjepzwfTxsALHFdvPIKZBAR2sBVd7L70W-IM07N2g8bmq0uxqe9bvWufvsGsigXsN7zb5xuF4hHkNp_QhYVW3p9kYxRJqufwHxXx83-56NNaAi1-3whw60gFFm7XV4ZzWTjIce_nS_ms9iOBWC_coojIKB8S8WCMEe5FKKo-vPIcjsBWo2vKjV6nasaOFYJD8-qie6NVRy7B0gOa_s0BJoT3-2cqGixG1-24V_Rpksl8lSM24PsEwS7xC25iNEuHj04anFCLxhQTAmgPsxohqf-qosJRL8zN7JAKjw7X8QpLabOrTFZSqGR6oWOT1-0E"
                        class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                        href="https://www.facebook.com/groups/shittown4/posts/873420304942151/?comment_id=873555954928586&amp;__cft__[0]=AZU3pdZSDyT9MDgb0PPB9ncYUEB6WAsq1upNUg7O0Gi6MTO2Mx1Y9YC4IryzzTsfUe8LTbnqMQ9etGzQ6Z6QbBhbVPEHkOCDiRLn2e7Ixe-UAJz48upbCychXuzxhHjzwiqDi_kgbjSRsxdI0KYeu39z8UEkJTcbyS-PQv5-7pauBQ&amp;__tn__=R]-R"
                        role="link"
                        tabindex="0"
                        >15h</a
                      >
                    </div></span
                  >
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <span class="x1rg5ohu"
                    ><div class="x1n2onr6 x1rg5ohu">
                      <span class=""
                        ><div class="__fb-dark-mode x1afcbsf x1uhb9sk x1swf91x">
                          <div
                            aria-label="Like"
                            class="x1i10hfl xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x1n2onr6 x16tdsg8 x1hl2dhg x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x1q0g3np x87ps6o x1lku1pv x1a2a7pz x6s0dn4 x78zum5 x1iyjqo2 x2lah0s xl56j7k x5ve5x3"
                            role="button"
                            tabindex="0"
                          >
                            <div
                              class="xi81zsa x1ypdohk x1rg5ohu x117nqv4 x1n2onr6 xt0b8zv"
                            >
                              <span class="x1rg5ohu xxymvpz x1fiuzfb"></span
                              >Like
                            </div>
                          </div>
                        </div>
                        <div
                          aria-label="React"
                          class="x1i10hfl x1qjc9v5 xjbqb8w xjqpnuy xa49m3k xqeqjp1 x2hbi6w x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xdl72j9 x2lah0s xe8uvvx xdj266r x11i5rnm xat24cr x2lwn1j xeuugli xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1ja2u2z x1t137rt x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m x3nfvp2 x1q0g3np x87ps6o x1lku1pv x1a2a7pz xsgj6o6 xzpqnlu x179tack x10l6tqk"
                          role="button"
                          tabindex="0"
                        >
                          <i
                            data-visualcompletion="css-img"
                            class="x1b0d499 x1d69dk1"
                            style="
                              background-image: url('https://static.xx.fbcdn.net/rsrc.php/v3/yV/r/vqToTKm7Lq2.png');
                              background-position: 0px -801px;
                              background-size: auto;
                              width: 12px;
                              height: 12px;
                              background-repeat: no-repeat;
                              display: inline-block;
                            "
                          ></i>
                          <div
                            class="x1ey2m1c xds687c x17qophe xg01cxk x47corl x10l6tqk x13vifvy x1ebt8du x19991ni x1dhq9h x1o1ewxj x3x9cwd x1e5q0jg x13rtm0m"
                            role="none"
                            data-visualcompletion="ignore"
                          ></div></div
                      ></span></div
                  ></span>
                </li>
                <li
                  class="html-li xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1rg5ohu x1emribx x1i64zmx"
                >
                  <div
                    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                  >
                    <div
                      class="x1i10hfl xjbqb8w x1ejq31n xd10rxx x1sy0etr x17r0tee x972fbf xcfux6l x1qhh985 xm0m39n x9f619 x1ypdohk xt0psk2 xe8uvvx xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x16tdsg8 x1hl2dhg xggy1nq x1a2a7pz x1sur9pj xkrqix3 xi81zsa x1s688f"
                      role="button"
                      tabindex="0"
                    >
                      Reply
                    </div>
                  </div>
                </li>
              </ul>
              <div class="x1swvt13">
                <div
                  class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd"
      ></div>
    </div>
  </div>
  <div
    class="html-div xdj266r x11i5rnm xat24cr x1mh8g0r xexx8yu x4uap5 x18d9i69 xkhd6sd x78zum5 x13a6bvl"
  >
    <div class="x1iyjqo2">
      <div
        aria-label="Loading..."
        role="status"
        data-visualcompletion="loading-state"
        class="x1a2a7pz x78zum5 x1q0g3np x1y1aw1k xwib8y2"
        tabindex="-1"
      >
        <div
          class="x1iq0kzc x1i9sevy xa4qsjk x1ag7td9 x11fwcs0 xorstpt xwyycs4 x113zjs7 xzvp1bk x43zylw x14yjl9h xudhj91 x18nykt9 xww2gxu x10w6t97 x1w0mnb x1td3qas"
          style="animation-delay: calc(0 * var(--glimmer-stagger-time, 200ms))"
        ></div>
        <div
          class="html-div xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1iyjqo2 x1f5funs x9wsmhn x1ghbroi"
          style="
            --height: 110px;
            --marginInlineEnd: 25%;
            --marginInlineStart: 0%;
          "
        >
          <div
            class="x1iq0kzc x1i9sevy xa4qsjk x1ag7td9 x11fwcs0 xorstpt xwyycs4 x113zjs7 xzvp1bk x43zylw x1tlxs6b x1g8br2z x1gn5b1j x230xth x5yr21d"
            style="
              animation-delay: calc(0 * var(--glimmer-stagger-time, 200ms));
            "
          ></div>
        </div>
      </div>
      <div
        aria-label="Loading..."
        role="status"
        data-visualcompletion="loading-state"
        class="x1a2a7pz x78zum5 x1q0g3np x1y1aw1k xwib8y2"
        tabindex="-1"
      >
        <div
          class="x1iq0kzc x1i9sevy xa4qsjk x1ag7td9 x11fwcs0 xorstpt xwyycs4 x113zjs7 xzvp1bk x43zylw x14yjl9h xudhj91 x18nykt9 xww2gxu x10w6t97 x1w0mnb x1td3qas"
          style="animation-delay: calc(0 * var(--glimmer-stagger-time, 200ms))"
        ></div>
        <div
          class="html-div xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1iyjqo2 x1f5funs x9wsmhn x1ghbroi"
          style="
            --height: 60px;
            --marginInlineEnd: 40%;
            --marginInlineStart: 0%;
          "
        >
          <div
            class="x1iq0kzc x1i9sevy xa4qsjk x1ag7td9 x11fwcs0 xorstpt xwyycs4 x113zjs7 xzvp1bk x43zylw x1tlxs6b x1g8br2z x1gn5b1j x230xth x5yr21d"
            style="
              animation-delay: calc(0 * var(--glimmer-stagger-time, 200ms));
            "
          ></div>
        </div>
      </div>
      <div
        aria-label="Loading..."
        role="status"
        data-visualcompletion="loading-state"
        class="x1a2a7pz x78zum5 x1q0g3np x1y1aw1k xwib8y2"
        tabindex="-1"
      >
        <div
          class="x1iq0kzc x1i9sevy xa4qsjk x1ag7td9 x11fwcs0 xorstpt xwyycs4 x113zjs7 xzvp1bk x43zylw x14yjl9h xudhj91 x18nykt9 xww2gxu x10w6t97 x1w0mnb x1td3qas"
          style="animation-delay: calc(0 * var(--glimmer-stagger-time, 200ms))"
        ></div>
        <div
          class="html-div xdj266r xat24cr xexx8yu x4uap5 x18d9i69 xkhd6sd x1iyjqo2 x1f5funs x9wsmhn x1ghbroi"
          style="
            --height: 32px;
            --marginInlineEnd: 40%;
            --marginInlineStart: 0%;
          "
        >
          <div
            class="x1iq0kzc x1i9sevy xa4qsjk x1ag7td9 x11fwcs0 xorstpt xwyycs4 x113zjs7 xzvp1bk x43zylw x1tlxs6b x1g8br2z x1gn5b1j x230xth x5yr21d"
            style="
              animation-delay: calc(0 * var(--glimmer-stagger-time, 200ms));
            "
          ></div>
        </div>
      </div>
    </div>
  </div>
</div>

================
File: extension/background.js
================
// Initialize service worker globals
let backgroundService = null;
let pollInterval = null;

// Service worker setup
async function initializeServiceWorker() {
    try {
        if (!backgroundService) {
            backgroundService = new BackgroundService();
            await backgroundService.initialize();
        }
    } catch (error) {
        console.error('Service worker initialization failed:', error);
    }
}

// Service worker activation events
chrome.runtime.onInstalled.addListener(initializeServiceWorker);
chrome.runtime.onStartup.addListener(initializeServiceWorker);

// Cleanup on service worker update/unload
self.addEventListener('unload', () => {
    if (pollInterval) {
        clearInterval(pollInterval);
    }
});

class BackgroundService {
    constructor() {
        this.API_URL = 'http://workspace.tamais.me:7270';
        this.stats = {
            analyzed: 0,
            successful: 0
        };
        this.lastApiCheck = null;
        this.retryTimeout = 5000;
        this.maxRetries = 3;
        this.lastStatus = null;
        this.retryDelays = [1000, 2000, 4000];
        this.healthCheckInterval = 30000;
        this.initApiUrl();
        this.popupPorts = new Set();
        this.isInitialized = false;
        this.connectionAttempts = 0;
        this.maxConnectionAttempts = 5;
        this.messageQueue = [];
        this.portConnectionRetries = 0;
        this.maxPortRetries = 3;
        this.pendingRequests = new Map();
        this.failedAttempts = 0;
        this.maxFailedAttempts = 3;
        this.apiTimeout = 3000; // 3 seconds timeout
        this.dataCache = {
            lastUpdate: null,
            stats: null,
            status: null
        };
        this.dataRefreshInterval = 3000; // 3 seconds
    }

    async initialize() {
        if (this.isInitialized) return;
        await this.initApiUrl();
        this.setupMessageHandlers();
        await this.startApiMonitoring();
        this.startDataRefreshCycle();
        this.isInitialized = true;
    }

    startDataRefreshCycle() {
        setInterval(async () => {
            await this.refreshData();
        }, this.dataRefreshInterval);
    }

    async refreshData() {
        try {
            const status = await this.checkApiStatus();
            this.dataCache = {
                lastUpdate: new Date(),
                stats: this.stats,
                status: status,
                models: status.models || { vi: false, en: false },
                errors: status.error ? [status.error] : []
            };
            await this.broadcastUpdate();
            this.pruneDataCache(); // Remove old data
        } catch (error) {
            console.error('Data refresh failed:', error);
            this.dataCache.errors.push(error.message);
        }
    }

    pruneDataCache() {
        // Remove data older than 5 minutes
        const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);
        this.dataCache.errors = this.dataCache.errors.filter(err =>
            err.timestamp > fiveMinutesAgo
        );
    }

    async broadcastUpdate() {
        // Notify all content scripts
        chrome.tabs.query({}, (tabs) => {
            tabs.forEach(tab => {
                chrome.tabs.sendMessage(tab.id, {
                    type: 'DATA_UPDATE',
                    data: this.dataCache
                }).catch(() => { });
            });
        });

        // Notify popup
        await this.updateAll();
    }

    async initApiUrl() {
        const { apiUrl } = await chrome.storage.local.get('apiUrl');
        this.API_URL = apiUrl || 'http://workspace.tamais.me:7270';
    }

    setupMessageHandlers() {
        chrome.runtime.onConnect.addListener((port) => {
            if (port.name === 'popup') {
                const portId = Date.now().toString();
                this.popupPorts.add(port);

                const pingInterval = setInterval(() => {
                    if (this.isValidPort(port)) {
                        try {
                            port.postMessage({ type: 'PING' });
                        } catch (e) {
                            clearInterval(pingInterval);
                        }
                    } else {
                        clearInterval(pingInterval);
                    }
                }, 5000);

                port.onDisconnect.addListener(() => {
                    clearInterval(pingInterval);
                    this.popupPorts.delete(port);
                    console.log('Port disconnected, cleaning up...');
                });

                port.onMessage.addListener((msg, port) => {
                    const handleMessage = async () => {
                        try {
                            if (msg.type === 'GET_INITIAL_STATE') {
                                await this.sendPopupUpdate(port);
                            }
                        } catch (error) {
                            console.error('Message handler error:', error);
                        }
                    };
                    handleMessage();
                });

                // Initial update with retry mechanism
                const attemptInitialUpdate = async (retryCount = 0) => {
                    try {
                        if (!this.isValidPort(port)) return;
                        await this.checkApiStatus(true); // Force fresh check
                        await this.sendPopupUpdate(port);
                    } catch (error) {
                        if (retryCount < this.maxPortRetries) {
                            setTimeout(() => attemptInitialUpdate(retryCount + 1), 1000);
                        }
                    }
                };
                attemptInitialUpdate();
            }
        });

        // Existing message handlers
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            if (request.type === 'UPDATE_STATS') {
                this.stats = request.stats;
                this.updateBadge();
            }
            if (request.type === 'GET_API_STATUS') {
                // Convert Promise to callback for Chrome messaging
                this.checkApiStatus()
                    .then(status => sendResponse(status))
                    .catch(error => sendResponse({ error: error.message }));
                return true; // Keep channel open for async response
            }
            if (request.type === 'API_URL_CHANGED') {
                this.API_URL = request.apiUrl;
                this.checkApiStatus()
                    .then(() => this.startApiMonitoring())
                    .catch(console.error);
            }
        });
    }

    async sendPopupUpdate(port) {
        if (!this.isValidPort(port)) return;

        try {
            const status = await this.checkApiStatus();
            const message = {
                type: 'STATUS_UPDATE',
                data: {
                    api: status,
                    stats: this.stats,
                    timestamp: new Date().toISOString()
                }
            };

            try {
                port.postMessage(message);
            } catch (e) {
                this.popupPorts.delete(port);
                throw e;
            }
        } catch (error) {
            console.error('Error preparing popup update:', error);
            // Don't throw here to prevent cascade failures
        }
    }

    isValidPort(port) {
        if (!port) return false;
        try {
            port.postMessage({ type: 'PING' });
            return true;
        } catch {
            this.popupPorts.delete(port);
            return false;
        }
    }

    async updateAll() {
        const validPorts = Array.from(this.popupPorts).filter(port => this.isValidPort(port));
        this.popupPorts = new Set(validPorts);

        for (const port of validPorts) {
            try {
                await this.sendPopupUpdate(port);
            } catch (error) {
                console.error('Error updating port:', error);
            }
        }
    }

    async updateBadge() {
        try {
            const successRate = this.stats.analyzed > 0
                ? Math.round((this.stats.successful / this.stats.analyzed) * 100)
                : 0;
            await chrome.action.setBadgeText({ text: `${successRate}%` });
            await chrome.action.setBadgeBackgroundColor({
                color: this.getBadgeColor(successRate)
            });
        } catch (error) {
            console.error('Badge update error:', error);
        }
    }

    getBadgeColor(rate) {
        if (rate >= 90) return '#34a853'; // Green
        if (rate >= 70) return '#fbbc05'; // Yellow
        return '#ea4335'; // Red
    }

    async checkApiStatus(forceCheck = false) {
        if (!navigator.onLine) {
            return this.getOfflineStatus();
        }

        try {
            // Log the API URL being checked
            console.log('Checking API status at:', `${this.API_URL}/health`);

            const response = await fetch(`${this.API_URL}/health`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache',
                },
                mode: 'cors',
                cache: 'no-cache'
            });

            console.log('API Raw Response:', response);

            const data = await response.json();
            console.log('API Response Data:', data);

            // Explicitly check the response status and data
            const isAvailable = response.ok && data.status === "healthy";
            const apiStatus = this.updateApiStatus(isAvailable, {
                ...data,
                models: data.models || { vi: false, en: false }
            });

            // Broadcast the status update immediately
            await this.broadcastStatusUpdate(apiStatus);
            return apiStatus;

        } catch (error) {
            console.error('API check error:', error);
            return this.updateApiStatus(false, {
                error: error.message,
                lastError: Date.now()
            });
        }
    }

    async broadcastStatusUpdate(status) {
        // Update all content scripts
        chrome.tabs.query({}, (tabs) => {
            tabs.forEach(tab => {
                chrome.tabs.sendMessage(tab.id, {
                    type: 'API_STATUS_UPDATE',
                    status: status,
                    timestamp: new Date().toISOString()
                }).catch(() => { });
            });
        });

        // Update all popups
        this.popupPorts.forEach(port => {
            if (this.isValidPort(port)) {
                port.postMessage({
                    type: 'STATUS_UPDATE',
                    data: {
                        api: status,
                        stats: this.stats,
                        timestamp: new Date().toISOString()
                    }
                });
            }
        });
    }

    async updateStatusBadge(isAvailable, modelCount = 0) {
        try {
            const statusText = isAvailable ?
                (modelCount > 0 ? `${modelCount}` : 'ON') :
                'OFF';

            const color = isAvailable ?
                (modelCount > 0 ? '#34a853' : '#fbbc05') :
                '#ea4335';

            await Promise.all([
                chrome.action.setBadgeText({ text: statusText }),
                chrome.action.setBadgeBackgroundColor({ color })
            ]);

        } catch (error) {
            console.error('Badge update error:', error);
        }
    }

    async startApiMonitoring() {
        if (pollInterval) {
            clearInterval(pollInterval);
        }

        // Initial check
        await this.checkApiStatus();

        // Set up polling with error handling
        pollInterval = setInterval(async () => {
            try {
                const status = await this.checkApiStatus();
                if (!status.isAvailable && this.lastStatus?.isAvailable) {
                    // Status changed from available to unavailable
                    console.warn('API became unavailable');
                }
                chrome.runtime.sendMessage({
                    type: 'API_STATUS_UPDATE',
                    status: status
                }).catch(() => { });
            } catch (error) {
                console.error('API monitoring error:', error);
            }
        }, this.healthCheckInterval);
    }

    updateApiStatus(isAvailable, data = null) {
        this.lastApiCheck = Date.now();

        // Reset stats when API status changes to offline
        if (!isAvailable && this.lastStatus?.isAvailable) {
            this.stats = { analyzed: 0, successful: 0 };
        }

        const modelStatus = data?.models || { vi: false, en: false };
        const activeModels = Object.entries(modelStatus)
            .filter(([_, status]) => status)
            .map(([lang]) => lang.toUpperCase());

        this.lastStatus = {
            isAvailable,
            status: isAvailable ? 'healthy' : 'offline',
            timestamp: data?.timestamp || new Date().toISOString(),
            models: modelStatus,
            activeModels: activeModels,
            modelCount: activeModels.length,
            lastCheck: this.lastApiCheck,
            error: isAvailable ? null : (data?.error || 'Service unavailable')
        };

        // Update badge and notify
        this.updateStatusBadge(isAvailable, activeModels.length).catch(console.error);
        this.notifyStatusChange(this.lastStatus);
        this.cleanupOnStatusChange(isAvailable);

        return this.lastStatus;
    }

    async cleanupOnStatusChange(isAvailable) {
        if (!isAvailable) {
            // Reset connection attempts and clear any pending requests
            this.connectionAttempts = 0;
            this.pendingRequests.clear();

            // Clear stats and notify UI
            this.stats = { analyzed: 0, successful: 0 };
            await this.updateBadge();

            // Notify all ports of reset
            this.notifyStatusChange({
                ...this.lastStatus,
                stats: this.stats
            });
        }
    }

    async notifyStatusChange(status) {
        const validPorts = Array.from(this.popupPorts).filter(this.isValidPort);
        this.popupPorts = new Set(validPorts);

        const message = {
            type: 'STATUS_UPDATE',
            data: {
                api: status,
                stats: this.stats,
                timestamp: new Date().toISOString()
            }
        };

        validPorts.forEach(port => {
            try {
                port.postMessage(message);
            } catch (error) {
                console.warn('Failed to notify port:', error);
                this.popupPorts.delete(port);
            }
        });
    }

    getOfflineStatus() {
        return {
            isAvailable: false,
            status: 'offline',
            timestamp: new Date().toISOString(),
            models: { vi: false, en: false },
            error: 'Network offline',
            lastCheck: Date.now()
        };
    }
}

function extractComments(element) {
    const comments = [];

    if (!element) return comments;

    try {
        // Tìm tất cả role="article" elements
        const commentElements = element.querySelectorAll('[role="article"]');

        commentElements.forEach(container => {
            try {
                // Skip nếu là main post
                if (container === element) return;

                // Get author name - thử nhiều selectors
                const authorElement = (
                    container.querySelector('a[role="link"] span.x193iq5w span') ||
                    container.querySelector('a[href*="/user/"] span') ||
                    container.querySelector('a[role="link"] span')
                );
                const author = authorElement?.textContent?.trim();

                // Get comment text
                const textElement = container.querySelector('div[dir="auto"][style*="text-align"]');
                const text = textElement?.textContent?.trim();

                // Get timestamp
                const timeElement = container.querySelector('a[href*="comment_id"]');
                const time = timeElement?.textContent?.trim();

                // Lấy unique ID
                const commentId = container.getAttribute('data-commentid') ||
                    timeElement?.href?.match(/comment_id=(\d+)/)?.[1] ||
                    Date.now().toString();

                // Only add if valid
                if (author && text) {
                    comments.push({
                        id: commentId,
                        author,
                        text,
                        time,
                        isReply: isReplyComment(container)
                    });
                }
            } catch (err) {
                console.warn('Error extracting comment:', err);
            }
        });

    } catch (error) {
        console.error('Error in extractComments:', error);
    }

    return comments;
}

function isReplyComment(element) {
    return !!(
        element.closest('div[aria-label*="Reply"]') ||
        element.closest('div[aria-label*="Trả lời"]') ||
        element.closest('div[aria-label*="Phản hồi"]') ||
        element.querySelector('a[role="link"][href*="reply_comment_id"]') ||
        element.closest('div[style*="margin-left"]') ||
        element.closest('div[style*="padding-left"]')
    );
}

// Function to check if an element is a comment section
function isCommentSection(element) {
    // Check for common comment section identifiers
    return element.querySelector('[role="article"]') !== null;
}

// Function to process mutations for comments
function processMutations(mutations) {
    mutations.forEach(mutation => {
        mutation.addedNodes.forEach(node => {
            if (node.nodeType === Node.ELEMENT_NODE) {
                if (isCommentSection(node)) {
                    const comments = extractComments(node);
                    if (comments.length > 0) {
                        // Send comments to content script
                        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                            chrome.tabs.sendMessage(tabs[0].id, {
                                type: "NEW_COMMENTS",
                                comments: comments
                            });
                        });
                    }
                }
            }
        });
    });
}

================
File: extension/content.js
================
// Prevent multiple initializations
if (!window.sentimentAnalyzer) {
    // Create style element first
    const createStyleSheet = () => {
        const styleSheet = document.createElement("style");
        styleSheet.id = 'sentiment-analyzer-styles';
        document.head.appendChild(styleSheet);
        return styleSheet;
    };

    class FacebookAnalyzer {
        constructor() {
            // Create styleSheet first
            this.styleSheet = document.getElementById('sentiment-analyzer-styles') || createStyleSheet();

            this.API_URL = 'http://localhost:7270';
            this.processedPosts = new Set();
            this.stats = {
                analyzed: 0,
                successful: 0
            };
            this.API_STATUS = false;
            this.MAX_RETRIES = 3;
            this.retryDelays = [1000, 2000, 4000]; // Exponential backoff
            this.init();
            this.registerMessageHandlers();
            this.initApiUrl();
            this.pendingUpdates = new Set();
            this.updateQueue = [];
            this.isProcessing = false;
            this.lastApiCheck = null;
            this.apiCheckInterval = 5000; // 5 seconds
            this.startApiStatusCheck();
            this.isConnectionReady = false;
            this.pendingMessages = [];
            this.initConnection();
            this.initStyles();
            this.readyState = false;
            this.initializeConnection();
            this.port = null;
            this.setupPort();

            // Add comment patterns for both languages
            this.COMMENT_PATTERNS = {
                en: [
                    /Comment by (.*?)$/i,
                    /Reply by (.*?)$/i,
                    /Comment from (.*?)$/i,
                    /Reply from (.*?)$/i,
                    /^(.*?)'s comment$/i,
                    /^(.*?)'s reply$/i
                ],
                vi: [
                    /Bình luận bởi (.*?)$/i,
                    /Trả lời bởi (.*?)$/i,
                    /Phản hồi từ (.*?)$/i,
                    /Bình luận của (.*?)$/i,
                    /Trả lời của (.*?)$/i,
                    /^(.*?) đã bình luận$/i,
                    /^(.*?) đã trả lời$/i
                ]
            };

            // Add cache control for API status
            this.lastHealthCheck = null;
            this.healthCheckCacheTime = 30000; // Cache health check for 30 seconds
            this.healthCheckPromise = null; // Store pending health check promise
            console.log('FacebookAnalyzer initialized');
            this.currentTheme = this.detectTheme();
            this.setupThemeObserver();
        }

        setupPort() {
            try {
                console.log('Setting up port connection');
                this.port = chrome.runtime.connect({ name: 'content-script' });

                this.port.onDisconnect.addListener(() => {
                    console.log('Port disconnected, attempting reconnect...');
                    setTimeout(() => this.setupPort(), 1000);
                });
            } catch (error) {
                console.error('Port setup error:', error);
                setTimeout(() => this.setupPort(), 1000);
            }
        }

        async initApiUrl() {
            try {
                console.log('Initializing API URL');
                const { apiUrl } = await chrome.storage.local.get('apiUrl');
                if (apiUrl) {
                    this.API_URL = apiUrl;
                }
                console.log('API URL set to:', this.API_URL);
            } catch (error) {
                console.error('Error loading API URL:', error);
            }
        }

        init() {
            console.log('Initializing FacebookAnalyzer');
            this.observePageChanges();
            this.addInitialButtons();
            this.handleUrlChange(); // Add this line to handle URL changes
        }

        handleUrlChange() {
            console.log('Setting up URL change handler');
            let lastUrl = location.href;
            const observer = new MutationObserver(() => {
                const currentUrl = location.href;
                if (currentUrl !== lastUrl) {
                    lastUrl = currentUrl;
                    console.log('URL changed to:', currentUrl);
                    this.onUrlChanged();
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });
        }

        onUrlChanged() {
            console.log('Handling URL change');
            if (this.isFacebookPostUrl(location.href)) {
                this.processCurrentPost();
            }
        }

        isFacebookPostUrl(url) {
            const patterns = [
                /facebook\.com\/[^/]+\/posts\/\d+/,
                /facebook\.com\/[^/]+\/permalink\/\d+/,
                /facebook\.com\/[^/]+\/photos\/[^/]+\/\d+/,
                /facebook\.com\/photo\.php\?fbid=\d+/,
                /facebook\.com\/[^/]+\/videos\/\d+/,
                /facebook\.com\/video\.php\?v=\d+/,
                /facebook\.com\/[^/]+\?story_fbid=\d+/
            ];
            const isMatch = patterns.some(pattern => pattern.test(url));
            console.log('isFacebookPostUrl:', isMatch);
            return isMatch;
        }

        processCurrentPost() {
            console.log('Processing current post');
            // Check if posts are loaded on the page
            const post = document.querySelector('[role="article"]');
            if (post) {
                console.log('Post found, analyzing');
                // Analyze the post and its comments
                this.analyzePost(post);
            } else {
                console.log('Post not found, setting up observer');
                // Wait for the post to load
                const observer = new MutationObserver((mutations, obs) => {
                    const post = document.querySelector('[role="article"]');
                    if (post) {
                        obs.disconnect();
                        console.log('Post loaded, analyzing');
                        this.analyzePost(post);
                    }
                });
                observer.observe(document.body, { childList: true, subtree: true });
            }
        }

        observePageChanges() {
            console.log('Observing page changes');
            const observer = new MutationObserver(() => {
                this.addInitialButtons();
                this.addCommentSectionButtons();
            });
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }

        addInitialButtons() {
            console.log('Adding initial buttons');
            const posts = document.querySelectorAll('div[data-pagelet^="FeedUnit_"]');
            posts.forEach(post => {
                if (!this.processedPosts.has(post)) {
                    this.addAnalyzeButton(post);
                    this.processedPosts.add(post);
                }
            });
        }

        addAnalyzeButton(post) {
            console.log('Adding analyze button to post');
            const button = document.createElement('button');
            button.className = 'sentiment-analyze-btn';
            button.textContent = 'Phân tích cảm xúc';
            button.onclick = () => this.analyzePost(post);

            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'sentiment-button-container';
            buttonContainer.appendChild(button);

            const actionsBar = post.querySelector('[aria-label="Actions for this post"]');
            if (actionsBar) {
                actionsBar.parentNode.insertBefore(buttonContainer, actionsBar.nextSibling);
            } else {
                // Fallback if actions bar is not found
                post.appendChild(buttonContainer);
            }
        }

        addCommentSectionButtons() {
            console.log('Adding comment section buttons');
            // Find all comment section buttons that don't have our analyze button
            const commentButtons = document.querySelectorAll('div[role="button"]:not(.has-analyze-btn)');

            commentButtons.forEach(button => {
                // Check if it's a comment button by looking for typical text patterns
                const text = button.textContent.toLowerCase();
                if (text.includes('bình luận') || text.includes('comments')) {
                    button.classList.add('has-analyze-btn');

                    // Create analyze button
                    const analyzeBtn = document.createElement('div');
                    analyzeBtn.className = 'sentiment-analyze-btn-inline';
                    analyzeBtn.innerHTML = `
                        <div role="button" class="analyze-comments-btn">
                            <span>Phân tích</span>
                        </div>
                    `;

                    // Add click handler
                    analyzeBtn.onclick = (e) => {
                        e.stopPropagation();
                        // Find the closest article element (post container)
                        const postElement = button.closest('[role="article"]');
                        if (postElement) {
                            this.analyzePost(postElement);
                        }
                    };

                    // Insert after the comment button
                    const container = button.parentElement;
                    if (container) {
                        // Create a wrapper if needed
                        let wrapper = container.querySelector('.comment-buttons-wrapper');
                        if (!wrapper) {
                            wrapper = document.createElement('div');
                            wrapper.className = 'comment-buttons-wrapper';
                            container.appendChild(wrapper);
                        }
                        wrapper.appendChild(analyzeBtn);
                    }
                }
            });
        }

        initConnection() {
            console.log('Initializing connection');
            // Send ready message and wait for acknowledgment
            chrome.runtime.sendMessage({ type: 'CONTENT_SCRIPT_READY' }, (response) => {
                if (response?.success) {
                    this.isConnectionReady = true;
                    // Process any pending messages
                    this.processPendingMessages();
                }
            });

            // Handle connection status check
            chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
                if (message.type === 'PING') {
                    sendResponse({ success: true, ready: this.isConnectionReady });
                    return true;
                }
            });
        }

        setupConnectionListener() {
            console.log('Setting up connection listener');
            // Notify that content script is ready
            chrome.runtime.sendMessage({ type: 'CONTENT_SCRIPT_READY' }, (response) => {
                if (chrome.runtime.lastError) {
                    console.warn('Connection setup error:', chrome.runtime.lastError);
                    return;
                }
                this.isConnectionReady = true;
            });
        }

        registerMessageHandlers() {
            console.log('Registering message handlers');
            chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
                // Immediately send acknowledgment
                sendResponse({ received: true });

                // Handle the message asynchronously
                this.handleAsyncMessage(request).then(response => {
                    // Send response through port if available
                    if (this.port) {
                        this.port.postMessage({
                            type: 'RESPONSE',
                            requestId: request.requestId,
                            response: response
                        });
                    }
                }).catch(error => {
                    console.error('Message handling error:', error);
                    if (this.port) {
                        this.port.postMessage({
                            type: 'ERROR',
                            requestId: request.requestId,
                            error: error.message
                        });
                    }
                });

                // Return true to indicate we'll send response asynchronously
                return true;
            });
        }

        async handleAsyncMessage(request) {
            console.log('Handling async message:', request);
            return new Promise(async (resolve, reject) => {
                try {
                    if (!request || !request.type) {
                        throw new Error('Invalid message format');
                    }

                    let response;
                    switch (request.type) {
                        case 'ANALYZE_POST':
                            if (!request.postId) {
                                throw new Error('Missing postId parameter');
                            }
                            // Find the post element first
                            const postElement = await this.findPostElement(request.postId);
                            if (!postElement) {
                                throw new Error('Post element not found');
                            }
                            response = await this.analyzeFacebookPost(postElement);
                            break;

                        case 'ANALYZE_CURRENT':
                            const post = document.querySelector('[role="article"]');
                            if (!post) {
                                throw new Error('No post found on current page');
                            }
                            response = await this.analyzePost(post);
                            break;

                        case 'PING':
                            response = {
                                success: true,
                                ready: this.readyState,
                                url: window.location.href,
                                status: this.API_STATUS
                            };
                            break;

                        case 'GET_STATS':
                            response = {
                                success: true,
                                stats: this.stats,
                                analyzed: this.stats.analyzed,
                                successful: this.stats.successful
                            };
                            break;

                        case 'RESET_STATS':
                            this.stats = { analyzed: 0, successful: 0 };
                            response = { success: true, stats: this.stats };
                            break;

                        case 'UPDATE_STATE':
                            if (request.stats) {
                                Object.assign(this.stats, request.stats);
                            }
                            if (request.apiStatus !== undefined) {
                                this.API_STATUS = request.apiStatus;
                            }
                            response = {
                                success: true,
                                stats: this.stats,
                                apiStatus: this.API_STATUS
                            };
                            break;

                        case 'API_URL_CHANGED':
                            await this.initApiUrl();
                            await this.checkApiStatus();
                            response = {
                                success: true,
                                apiUrl: this.API_URL,
                                status: this.API_STATUS
                            };
                            break;

                        case 'CHECK_API':
                            const status = await this.checkApiStatus();
                            response = {
                                success: true,
                                status: status,
                                apiUrl: this.API_URL
                            };
                            break;

                        case 'API_STATUS_UPDATE':
                            this.handleApiStatusUpdate(request.status);
                            response = { success: true };
                            break;

                        case 'DATA_UPDATE':
                            this.handleDataUpdate(request.data);
                            response = { success: true };
                            break;

                        default:
                            throw new Error(`Unsupported message type: ${request.type}`);
                    }

                    resolve({
                        success: true,
                        requestId: request.requestId,
                        ...response
                    });

                } catch (error) {
                    console.error('Message handling error:', error);
                    reject({
                        success: false,
                        requestId: request?.requestId,
                        error: error.message || 'Unknown error occurred',
                        details: error.stack
                    });
                }
            });
        }

        handleApiStatusUpdate(status) {
            console.log('API status updated:', status);
            this.API_STATUS = status.isAvailable;

            if (status.isAvailable) {
                this.processPendingUpdates();
            }
        }

        async findPostElement(postId) {
            console.log('Finding post element for postId:', postId);
            const selectors = [
                `[data-post-id="${postId}"]`,
                `[data-ft*="${postId}"]`,
                `[id*="post_content_${postId}"]`,
                `[id*="${postId}"]`,
                '[role="article"]'
            ];

            const element = document.querySelector(selectors.join(','));
            if (!element) {
                throw new Error('Post element not found');
            }
            return element;
        }

        async processPendingMessages() {
            console.log('Processing pending messages');
            while (this.pendingMessages.length > 0) {
                const { request, sender, sendResponse } = this.pendingMessages.shift();
                await this.handleMessage(request, sender, sendResponse);
            }
        }

        handleDataUpdate(data) {
            console.log('Handling data update:', data);
            if (data.status) {
                this.API_STATUS = data.status.isAvailable;
            }
            // Process any pending updates if API is available
            if (this.API_STATUS) {
                this.processPendingUpdates();
            }
        }

        async analyzePost(post) {
            console.log('Analyzing post:', post);

            // Ensure 'post' is a DOM Element
            if (!(post instanceof Element)) {
                console.warn('Invalid post element');
                return;
            }

            const postId = post.getAttribute('data-post-id') || Date.now().toString();

            if (this.pendingUpdates.has(postId)) {
                console.log('Post is already being analyzed');
                return;
            }

            this.pendingUpdates.add(postId);

            try {
                // Disable the analyze button to prevent multiple clicks
                const button = post.querySelector('.sentiment-analyze-btn');
                if (button) {
                    button.disabled = true;
                    button.textContent = 'Đang phân tích...';
                }

                // Analyze post content
                await this.analyzeFacebookPost(post);

                // Load all comments
                await this.loadMoreComments(post);

                // Find all comments in the post
                const comments = this.findComments(post);

                // Analyze each comment
                for (const comment of comments) {
                    await this.analyzeComment(comment);
                }

                // Update stats
                this.stats.analyzed += comments.length;
                this.stats.successful += comments.length; // Assuming all analyses are successful

                // Notify background script to update stats
                chrome.runtime.sendMessage({ type: 'UPDATE_STATS', stats: this.stats });

                // Re-enable the analyze button
                if (button) {
                    button.disabled = false;
                    button.textContent = 'Phân tích lại';
                }

            } catch (error) {
                console.error('Error analyzing post and comments:', error);
                this.showError('Có lỗi xảy ra khi phân tích bài viết này.');

                // Re-enable the analyze button
                const button = post.querySelector('.sentiment-analyze-btn');
                if (button) {
                    button.disabled = false;
                    button.textContent = 'Phân tích lại';
                }
            } finally {
                this.pendingUpdates.delete(postId);
            }
        }

        async checkApiStatus() {
            console.log('Checking API status');
            // Return cached status if within cache time
            if (this.lastHealthCheck &&
                Date.now() - this.lastHealthCheck.timestamp < this.healthCheckCacheTime) {
                return this.lastHealthCheck.status;
            }

            // Return existing promise if health check is in progress
            if (this.healthCheckPromise) {
                return this.healthCheckPromise;
            }

            // Perform new health check
            this.healthCheckPromise = (async () => {
                try {
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 3000);

                    const response = await fetch(`${this.API_URL}/health`, {
                        signal: controller.signal,
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'Cache-Control': 'no-cache'
                        },
                        mode: 'cors',
                        cache: 'no-cache'
                    });

                    clearTimeout(timeoutId);

                    if (response.ok) {
                        const data = await response.json();
                        const models = data.models || { vi: false, en: false };
                        const activeModels = Object.values(models).filter(status => status).length;

                        this.API_STATUS = data.status === "healthy" && activeModels > 0;

                        // Cache the result
                        this.lastHealthCheck = {
                            timestamp: Date.now(),
                            status: this.API_STATUS
                        };

                        return this.API_STATUS;
                    }

                    this.API_STATUS = false;
                    return false;

                } catch (error) {
                    console.error('API check error:', error);
                    this.API_STATUS = false;
                    return false;
                } finally {
                    this.healthCheckPromise = null;
                }
            })();

            return this.healthCheckPromise;
        }

        async analyzeSentiment(text, retryCount = 0) {
            console.log('Analyzing sentiment for text:', text);
            if (!this.API_STATUS && !(await this.checkApiStatus())) {
                this.showError('API không khả dụng. Vui lòng thử lại sau.');
                return null;
            }

            try {
                console.log('Sending request to:', `${this.API_URL}/predict`);

                const response = await fetch(`${this.API_URL}/predict`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                    mode: 'cors',
                    cache: 'no-cache',
                    body: JSON.stringify({
                        text: text,
                        language: 'vi'
                    })
                });

                console.log('API Response:', response.status, response.statusText);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API Result:', result);
                return result;
            } catch (error) {
                if (retryCount < this.MAX_RETRIES) {
                    await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
                    return this.analyzeSentiment(text, retryCount + 1);
                }
                this.API_STATUS = false;
                console.error('API error:', error);
                return null;
            }
        }

        async processPendingUpdates() {
            console.log('Processing pending updates');
            if (this.isProcessing || this.updateQueue.length === 0) return;

            this.isProcessing = true;
            while (this.updateQueue.length > 0) {
                const update = this.updateQueue.shift();
                try {
                    await this.processUpdate(update);
                } catch (error) {
                    console.error('Update processing error:', error);
                }
            }
            this.isProcessing = false;
        }

        async processUpdate(update) {
            console.log('Processing update:', update);
            try {
                switch (update.type) {
                    case 'POST_ANALYSIS':
                        await this.analyzePost(update.post);
                        break;
                    case 'COMMENT_ANALYSIS':
                        await this.analyzeComment(update.comment);
                        break;
                    case 'BATCH_ANALYSIS':
                        await this.analyzeBatch(update.items);
                        break;
                    case 'UPDATE_UI':
                        await this.updateUI(update.data);
                        break;
                    case 'REFRESH_BUTTONS':
                        this.addInitialButtons();
                        this.addCommentSectionButtons();
                        break;
                    case 'UPDATE_STYLES':
                        this.updateStyles(update.styles);
                        break;
                    default:
                        console.warn('Unknown update type:', update.type);
                }
            } catch (error) {
                console.error('Error processing update:', error);
                this.updateQueue.push(update); // Re-queue failed updates
            }
        }

        async analyzeComment(comment) {
            console.log('Analyzing comment:', comment);
            const loadingIndicator = this.addLoadingIndicator(comment);
            try {
                const text = comment.textContent.trim();
                const result = await this.analyzeSentiment(text);
                if (result) {
                    this.displayResult(comment, result, 'Bình luận');
                    this.stats.successful++;
                }
                this.stats.analyzed++;
            } finally {
                loadingIndicator.remove();
            }
        }

        async analyzeBatch(items) {
            console.log('Analyzing batch of items:', items);
            for (const item of items) {
                try {
                    if (item.type === 'post') {
                        await this.analyzePost(item.element);
                    } else if (item.type === 'comment') {
                        await this.analyzeComment(item.element);
                    }
                } catch (error) {
                    console.error('Batch analysis error:', error);
                }
            }
        }

        async extractPostContent(postElement) {
            console.log('Extracting post content from element:', postElement);
            try {
                const content = {
                    text: '',
                    comments: [],
                    reactions: {
                        total: 0,
                        types: {}
                    }
                };

                // Extract post content
                const postText = postElement.querySelector('[data-ad-preview="message"]');
                if (postText) {
                    content.text = postText.textContent.trim();
                }

                // Extract comments
                const commentElements = postElement.querySelectorAll('[role="article"]');
                for (const comment of commentElements) {
                    try {
                        const commentData = {
                            id: comment.getAttribute('data-commentid') || Date.now().toString(),
                            text: '',
                            user: {
                                name: '',
                                profile: ''
                            },
                            timestamp: '',
                            reactions: []
                        };

                        // Get comment text
                        const commentText = comment.querySelector('[data-ad-preview="message"]');
                        if (commentText) {
                            commentData.text = commentText.textContent.trim();
                        }

                        // Get user info
                        const userLink = comment.querySelector('a[role="link"][tabindex="0"]');
                        if (userLink) {
                            commentData.user.name = userLink.textContent.trim();
                            commentData.user.profile = userLink.href;
                        }

                        // Get timestamp if available
                        const timestamp = comment.querySelector('a[role="link"][href*="comment_id"]');
                        if (timestamp) {
                            commentData.timestamp = timestamp.textContent.trim();
                        }

                        content.comments.push(commentData);
                    } catch (err) {
                        console.error('Error extracting comment:', err);
                    }
                }

                // Extract reaction counts
                const reactionBar = postElement.querySelector('[aria-label*="reaction"]');
                if (reactionBar) {
                    const reactionText = reactionBar.getAttribute('aria-label');
                    // Parse reaction counts from aria-label text
                    const counts = this.parseReactionCounts(reactionText);
                    content.reactions = counts;
                }

                return content;
            } catch (error) {
                console.error('Error extracting post content:', error);
                throw error;
            }
        }

        parseReactionCounts(text) {
            const counts = {
                total: 0,
                types: {}
            };

            try {
                // Common reaction types in Vietnamese
                const reactionTypes = {
                    'Thích': 'like',
                    'Yêu thích': 'love',
                    'Haha': 'haha',
                    'Wow': 'wow',
                    'Buồn': 'sad',
                    'Phẫn nộ': 'angry'
                };

                // Extract numbers and reaction types from text
                for (const [vn, en] of Object.entries(reactionTypes)) {
                    const regex = new RegExp(`(\\d+)\\s*${vn}`);
                    const match = text.match(regex);
                    if (match) {
                        const count = parseInt(match[1]);
                        counts.types[en] = count;
                        counts.total += count;
                    }
                }
            } catch (err) {
                console.error('Error parsing reactions:', err);
            }

            return counts;
        }

        async analyzeFacebookPost(postElement) {
            console.log('Analyzing Facebook post:', postElement);
            try {
                // Validate post element
                if (!postElement || !(postElement instanceof Element)) {
                    throw new Error('Invalid post element provided');
                }

                let totalAnalyzed = 0;
                let successfulAnalyses = 0;

                // Use custom element query helper
                const postContent = this.findPostContent(postElement);
                if (postContent) {
                    const text = postContent.textContent.trim();
                    if (text) {
                        const postResult = await this.analyzeSentiment(text);
                        if (postResult) {
                            this.displayResult(postContent, postResult);
                            successfulAnalyses++;
                        }
                        totalAnalyzed++;
                    }
                }

                // Find and analyze comments
                const comments = this.findComments(postElement);
                for (const comment of comments) {
                    if (!comment.text) continue;

                    const loadingIndicator = this.addLoadingIndicator(comment.element);
                    try {
                        const result = await this.analyzeSentiment(comment.text);
                        if (result) {
                            this.displayResult(
                                comment.element,
                                result,
                                `Bình luận của ${comment.userName}`
                            );
                            successfulAnalyses++;
                        }
                        totalAnalyzed++;
                    } finally {
                        loadingIndicator.remove();
                    }
                }

                // Update stats
                this.stats.analyzed += totalAnalyzed;
                this.stats.successful += successfulAnalyses;

                return {
                    success: true,
                    analyzed: totalAnalyzed,
                    successful: successfulAnalyses
                };

            } catch (error) {
                console.error('Analysis error:', error);
                this.showError(error.message || 'Có lỗi xảy ra khi phân tích');
                throw error;
            }
        }

        displayResult(element, result) {
            if (!result) return;

            const resultDiv = document.createElement('div');
            resultDiv.className = `sentiment-result sentiment-${this.getSentimentClass(result.sentiment)}`;

            resultDiv.innerHTML = `
                <div style="margin: 4px 0;">
                    <span class="emoji">${result.emotion_emoji}</span>
                    <strong>${this.getSentimentLabel(result.sentiment)}</strong>
                    - ${result.emotion_vi}
                </div>
                <span class="sentiment-confidence">
                    Độ tin cậy: ${(result.sentiment_confidence * 100).toFixed(1)}%
                </span>
            `;

            // Insert after target element with smooth animation
            resultDiv.style.opacity = '0';
            resultDiv.style.transform = 'translateY(-4px)';
            element.parentNode.insertBefore(resultDiv, element.nextSibling);

            // Trigger animation
            requestAnimationFrame(() => {
                resultDiv.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                resultDiv.style.opacity = '1';
                resultDiv.style.transform = 'translateY(0)';
            });
        }

        getSentimentLabel(sentiment) {
            return {
                2: 'Tích cực',
                1: 'Trung tính',
                0: 'Tiêu cực'
            }[sentiment] || 'Trung tính';
        }

        getSentimentClass(sentiment) {
            return {
                2: 'positive',
                1: 'neutral',
                0: 'negative'
            }[sentiment] || 'neutral';
        }

        addLoadingIndicator(element) {
            const indicator = document.createElement('div');
            indicator.className = 'sentiment-loading';
            indicator.innerHTML = '<div class="spinner"></div>';
            element.parentNode.insertBefore(indicator, element.nextSibling);
            return indicator;
        }

        showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'sentiment-error';
            errorDiv.textContent = message;
            document.body.appendChild(errorDiv);
            setTimeout(() => errorDiv.remove(), 3000);
        }

        startApiStatusCheck() {
            console.log('Starting API status check');
            // Check API status every 60 seconds instead of 5 seconds
            setInterval(async () => {
                if (!this.lastHealthCheck ||
                    Date.now() - this.lastHealthCheck.timestamp >= 60000) {
                    await this.checkApiStatus();
                }
            }, 60000); // 1 minute interval
        }

        detectTheme() {
            // Check for dark mode by looking at Facebook's background color
            const bodyBg = window.getComputedStyle(document.body).backgroundColor;
            return this.isHexColorDark(bodyBg) ? 'dark' : 'light';
        }

        isHexColorDark(color) {
            // Convert RGB/RGBA to brightness value
            const rgb = color.match(/\d+/g);
            if (!rgb || rgb.length < 3) return false;

            // Calculate relative luminance
            const brightness = (parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 + parseInt(rgb[2]) * 114) / 1000;
            return brightness < 128;
        }

        setupThemeObserver() {
            // Watch for Facebook theme changes
            const observer = new MutationObserver(() => {
                const newTheme = this.detectTheme();
                if (newTheme !== this.currentTheme) {
                    this.currentTheme = newTheme;
                    this.updateThemeStyles();
                }
            });

            observer.observe(document.body, {
                attributes: true,
                attributeFilter: ['class']
            });
        }

        updateThemeStyles() {
            const themeStyles = this.getThemeStyles();
            let styleSheet = document.getElementById('sentiment-analyzer-styles');
            if (styleSheet) {
                styleSheet.textContent = themeStyles;
            }
        }

        getThemeStyles() {
            const baseStyles = `
                .sentiment-analyze-btn {
                    background: #1877f2;
                    color: white;
                    padding: 8px 16px;
                    border-radius: 6px;
                    border: none;
                    font-weight: 500;
                    cursor: pointer;
                    transition: background 0.2s;
                }

                .sentiment-analyze-btn:hover {
                    background: #166fe5;
                }

                .sentiment-analyze-btn:disabled {
                    background: #8ab4f8;
                    cursor: not-allowed;
                }

                .sentiment-result {
                    margin: 8px 0;
                    padding: 12px 16px;
                    border-radius: 8px;
                    font-size: 13px;
                    line-height: 1.5;
                    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif;
                    transition: all 0.2s ease;
                }

                .sentiment-result .emoji {
                    font-size: 16px;
                    margin-right: 6px;
                    vertical-align: -2px;
                }
            `;

            const lightModeStyles = `
                .sentiment-result {
                    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
                }

                .sentiment-result strong {
                    color: #050505;
                }

                .sentiment-positive {
                    background-color: #e7f3e8;
                    border: 1px solid rgba(35, 134, 54, 0.15);
                    color: #1d4121;
                }

                .sentiment-negative {
                    background-color: #ffebe9;
                    border: 1px solid rgba(255, 129, 130, 0.15);
                    color: #67060c;
                }

                .sentiment-neutral {
                    background-color: #f0f2f5;
                    border: 1px solid rgba(0, 0, 0, 0.08);
                    color: #050505;
                }

                .sentiment-confidence {
                    background: rgba(0, 0, 0, 0.05);
                    color: #050505;
                }
            `;

            const darkModeStyles = `
                .sentiment-result {
                    box-shadow: 0 1px 2px rgba(255, 255, 255, 0.05);
                }

                .sentiment-result strong {
                    color: #e4e6eb;
                }

                .sentiment-positive {
                    background-color: rgba(45, 136, 64, 0.2);
                    border: 1px solid rgba(45, 136, 64, 0.3);
                    color: #88cf8f;
                }

                .sentiment-negative {
                    background-color: rgba(255, 69, 68, 0.2);
                    border: 1px solid rgba(255, 69, 68, 0.3);
                    color: #ff6b6b;
                }

                .sentiment-neutral {
                    background-color: rgba(255, 255, 255, 0.05);
                    border: 1px solid rgba(255, 255, 255, 0.1);
                    color: #e4e6eb;
                }

                .sentiment-confidence {
                    background: rgba(255, 255, 255, 0.1);
                    color: #e4e6eb;
                }
            `;

            return `
                ${baseStyles}
                ${this.currentTheme === 'dark' ? darkModeStyles : lightModeStyles}
                
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            }
            `;
        }

        initStyles() {
            // Replace existing initStyles with new theme-aware version
            const styleSheet = document.getElementById('sentiment-analyzer-styles') || createStyleSheet();
            styleSheet.textContent = this.getThemeStyles();
        }

        async initializeConnection(retryCount = 0) {
            console.log('Initializing connection');
            try {
                // Signal that content script is ready
                chrome.runtime.sendMessage({
                    type: 'CONTENT_SCRIPT_READY',
                    url: window.location.href
                }, (response) => {
                    if (chrome.runtime.lastError) {
                        console.warn('Initial connection failed:', chrome.runtime.lastError);
                        // Retry after delay
                        if (retryCount < this.MAX_RETRIES) {
                            setTimeout(() => this.initializeConnection(retryCount + 1), 1000);
                        }
                        return;
                    }
                    this.readyState = true;
                    this.processPendingMessages();
                });

                // Handle connection requests
                chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
                    if (message.type === 'PING') {
                        sendResponse({
                            success: true,
                            ready: this.readyState,
                            url: window.location.href
                        });
                        return true;
                    }
                    return false;
                });

            } catch (error) {
                console.error('Connection initialization error:', error);
                // Retry after delay
                if (retryCount < this.MAX_RETRIES) {
                    setTimeout(() => this.initializeConnection(retryCount + 1), 1000);
                }
            }
        }

        /**
         * Extract comment text from a Facebook comment element
         * @param {Element} commentElement - The root comment element
         * @returns {string|null}
         */
        extractCommentText(commentElement) {
            // Tìm div có attribute dir="auto" chứa nội dung comment
            const textContainers = commentElement.querySelectorAll('div[dir="auto"]');

            for (const container of textContainers) {
                // Kiểm tra xem div này có phải là container chứa nội dung comment không
                // bằng cách verify nó không chứa các elements khác như link, button
                if (!container.querySelector('a, button') && container.textContent.trim()) {
                    return container.textContent.trim();
                }
            }

            return null;
        }

        /**
         * Extract username from a Facebook comment element
         * @param {Element} commentElement - The root comment element
         * @returns {string|null}
         */
        extractUsername(commentElement) {
            // Tìm link profile của user
            const userLinks = commentElement.querySelectorAll('a[role="link"]');

            for (const link of userLinks) {
                // Kiểm tra xem link có phải là profile link không
                const href = link.getAttribute('href');
                if (href && href.includes('/user/')) {
                    // Tìm span chứa tên người dùng
                    const spans = link.querySelectorAll('span');
                    for (const span of spans) {
                        const text = span.textContent.trim();
                        // Loại bỏ các text không phải tên người dùng như timestamp
                        if (text && !text.includes('h') && !text.match(/^\d+$/)) {
                            return text;
                        }
                    }
                }
            }

            return null;
        }

        /**
         * Extract timestamp from a Facebook comment element
         * @param {Element} commentElement - The root comment element
         * @returns {string|null}
         */
        extractTimestamp(commentElement) {
            // Tìm link chứa timestamp
            const links = commentElement.querySelectorAll('a');

            for (const link of links) {
                const text = link.textContent.trim();
                // Timestamp thường có format như "1h", "2m", "3d" etc.
                if (text.match(/^\d+[hdmsy]$/i)) {
                    return text;
                }
            }

            return null;
        }

        /**
         * Check if user is a top contributor
         * @param {Element} commentElement - The root comment element
         * @returns {boolean}
         */
        isTopContributor(commentElement) {
            const elements = commentElement.querySelectorAll('div[role="link"]');
            for (const element of elements) {
                if (element.textContent.includes('Top contributor')) {
                    return true;
                }
            }
            return false;
        }

        /**
         * Parse a single Facebook comment
         * @param {Element} commentElement - The root comment element with role="article"
         * @returns {Object} Parsed comment data
         */
        parseComment(commentElement) {
            return {
                username: this.extractUsername(commentElement),
                text: this.extractCommentText(commentElement),
                timestamp: this.extractTimestamp(commentElement),
                isTopContributor: this.isTopContributor(commentElement)
            };
        }

        /**
         * Parse all comments in a container
         * @param {Element} container - The container element
         * @returns {Array<Object>} Array of parsed comments
         */
        parseComments(container) {
            const commentElements = container.querySelectorAll('[role="article"]');
            const comments = [];

            for (const element of commentElements) {
                try {
                    const comment = this.parseComment(element);
                    if (comment.text && comment.username) { // Only add valid comments
                        comments.push(comment);
                    }
                } catch (error) {
                    console.warn('Failed to parse comment:', error);
                }
            }

            return comments;
        }

        /**
         * Utility function to observe DOM changes and parse new comments
         * @param {Element} container - The container to observe
         * @param {Function} callback - Callback function to handle new comments
         * @returns {MutationObserver}
         */
        observeNewComments(container, callback) {
            const observer = new MutationObserver((mutations) => {
                for (const mutation of mutations) {
                    const newComments = Array.from(mutation.addedNodes)
                        .filter(node => node.nodeType === 1 && node.getAttribute('role') === 'article')
                        .map(element => this.parseComment(element))
                        .filter(comment => comment.text && comment.username);

                    if (newComments.length > 0) {
                        callback(newComments);
                    }
                }
            });

            observer.observe(container, {
                childList: true,
                subtree: true
            });

            return observer;
        }

        async loadMoreComments(postElement) {
            console.log('Loading all comments...');
            try {
                let continueLoading = true;
                let lastCommentCount = 0;
                let attempts = 0;
                const maxAttempts = 30; // Increase the number of attempts to load comments

                while (continueLoading && attempts < maxAttempts) {
                    const currentComments = postElement.querySelectorAll('[role="article"]').length;
                    console.log(`Current comment count: ${currentComments}`);

                    // Check if new comments are loaded
                    if (currentComments === lastCommentCount) {
                        attempts++;
                    } else {
                        attempts = 0; // Reset attempts if new comments are found
                        lastCommentCount = currentComments;
                    }

                    // Click all "view more comments" and "view previous comments" buttons
                    const moreCommentButtons = Array.from(postElement.querySelectorAll('div[role="button"]')).filter(button => {
                        const text = button.textContent.toLowerCase();
                        return (text.includes('xem thêm bình luận') ||
                            text.includes('xem các bình luận trước') ||
                            text.includes('view more comments') ||
                            text.includes('view previous comments') ||
                            text.match(/\d+\s*(bình luận|comments?)/i));
                    });

                    // Click all "view replies" buttons
                    const replyButtons = Array.from(postElement.querySelectorAll('div[role="button"]')).filter(button => {
                        const text = button.textContent.toLowerCase();
                        return (text.includes('phản hồi') ||
                            text.includes('trả lời') ||
                            text.includes('replies') ||
                            text.match(/\d+\s*(reply|repl)/i));
                    });

                    let clickedAny = false;

                    // Click "view more comments" buttons
                    for (const button of moreCommentButtons) {
                        try {
                            // Scroll to button
                            await this.smoothScrollTo(button);
                            await new Promise(r => setTimeout(r, 1000));

                            button.click();
                            clickedAny = true;
                            console.log('Clicked more comments button');
                            await new Promise(r => setTimeout(r, 2000));
                        } catch (error) {
                            console.warn('Error clicking more comments button:', error);
                        }
                    }

                    // Click "view replies" buttons
                    for (const button of replyButtons) {
                        try {
                            await this.smoothScrollTo(button);
                            await new Promise(r => setTimeout(r, 1000));

                            button.click();
                            clickedAny = true;
                            console.log('Clicked reply button');
                            await new Promise(r => setTimeout(r, 1500));
                        } catch (error) {
                            console.warn('Error clicking reply button:', error);
                        }
                    }

                    // Stop if no buttons were clicked
                    if (!clickedAny) {
                        attempts++;
                    }

                    // Scroll to the bottom to trigger lazy loading
                    await this.smoothScrollTo(postElement.lastElementChild);
                    await new Promise(r => setTimeout(r, 2000));

                    continueLoading = clickedAny || attempts < 3;
                }

                // Final count
                const finalCommentCount = postElement.querySelectorAll('[role="article"]').length - 1; // Subtract 1 for the main post
                console.log(`Finished loading comments. Total found: ${finalCommentCount}`);

            } catch (error) {
                console.error('Error loading comments:', error);
            }
        }

        // Thêm helper method để scroll mượt
        async smoothScrollTo(element) {
            if (!element) return;

            element.scrollIntoView({
                behavior: 'smooth',
                block: 'center'
            });

            // Đợi scroll hoàn tất
            await new Promise(resolve => {
                let lastPos = window.scrollY;
                const checkScrollEnd = setInterval(() => {
                    if (window.scrollY === lastPos) {
                        clearInterval(checkScrollEnd);
                        resolve();
                    }
                    lastPos = window.scrollY;
                }, 50);

                // Timeout sau 3 giây nếu scroll không kết thúc
                setTimeout(() => {
                    clearInterval(checkScrollEnd);
                    resolve();
                }, 3000);
            });
        }

        findComments(postElement) {
            const comments = new Set(); // Sử dụng Set để tránh trùng lặp
            try {
                // Tìm tất cả role="article" elements
                const commentElements = postElement.querySelectorAll('[role="article"]');
                
                commentElements.forEach(element => {
                    // Skip nếu element này là main post
                    if (element === postElement) return;

                    try {
                        // Lấy text content
                        const textElement = element.querySelector('div[dir="auto"][style*="text-align"]');
                        const text = textElement?.textContent?.trim();

                        // Lấy author name - thử các selector khác nhau
                        const authorElement = (
                            element.querySelector('a[role="link"] span.x193iq5w span') || 
                            element.querySelector('a[href*="/user/"] span') ||
                            element.querySelector('a[role="link"] span')
                        );
                        const author = authorElement?.textContent?.trim();

                        // Lấy timestamp
                        const timeElement = element.querySelector('a[href*="comment_id"]');
                        const timestamp = timeElement?.textContent?.trim();

                        // Kiểm tra xem comment có phải là reply không
                        const isReply = this.isReplyComment(element);

                        // Chỉ thêm vào nếu có đủ text và author
                        if (text && author) {
                            comments.add({
                                element,
                                text,
                                userName: author,
                                timestamp,
                                isReply,
                                // Thêm id để track
                                id: element.getAttribute('data-commentid') || 
                                    timeElement?.href?.match(/comment_id=(\d+)/)?.[1] ||
                                    Date.now().toString()
                            });
                        }
                    } catch (err) {
                        console.warn('Error parsing comment:', err);
                    }
                });

                const commentArray = Array.from(comments);
                console.log(`Found ${commentArray.length} unique comments`);
                return commentArray;

            } catch (error) {
                console.error('Error finding comments:', error);
                return Array.from(comments);
            }
        }

        isReplyComment(element) {
            // Kiểm tra các pattern chỉ ra đây là reply
            return !!(
                element.closest('div[aria-label*="Reply"]') ||
                element.closest('div[aria-label*="Trả lời"]') ||
                element.closest('div[aria-label*="Phản hồi"]') ||
                element.querySelector('a[role="link"][href*="reply_comment_id"]') ||
                element.closest('div[style*="margin-left"]') || // Replies thường được indent
                element.closest('div[style*="padding-left"]')
            );
        }

        findPostContent(element) {
            if (!element) return null;

            // Try different selectors in order of preference
            const selectors = [
                'div[dir="auto"][style*="text-align"]',
                'div[data-ad-preview="message"]',
                'div[data-ad-comet-preview="message"]',
                // Fallback selectors
                '[role="article"] div[dir="auto"]',
                '[data-ad-preview="message"]'
            ];

            for (const selector of selectors) {
                const content = element.querySelector(selector);
                if (content?.textContent.trim()) {
                    return content;
                }
            }

            return null;
        }
    }

    // Create single instance
    window.sentimentAnalyzer = new FacebookAnalyzer();

    // Initialize styles only once
    if (!document.getElementById('sentiment-analyzer-styles')) {
        const styleSheet = document.createElement("style");
        styleSheet.id = 'sentiment-analyzer-styles';
        styleSheet.textContent = `
            .sentiment-analyze-btn {
                background: #1877f2;
                color: white;
                padding: 8px 16px;
                border-radius: 6px;
                border: none;
                font-weight: 500;
                cursor: pointer;
                transition: background 0.2s;
            }

            .sentiment-analyze-btn:hover {
                background: #166fe5;
            }

            .sentiment-analyze-btn:disabled {
                background: #8ab4f8;
                cursor: not-allowed;
            }

            .sentiment-result {
                margin: 8px 0;
                padding: 12px 16px;
                border-radius: 8px;
                font-size: 13px;
                line-height: 1.5;
                font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif;
                box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
                transition: all 0.2s ease;
            }

            .sentiment-result strong {
                font-weight: 600;
                color: #050505;
            }

            .sentiment-result .emoji {
                font-size: 16px;
                margin-right: 6px;
                vertical-align: -2px;
            }

            .sentiment-positive {
                background-color: #e7f3e8;
                border: 1px solid rgba(35, 134, 54, 0.15);
                color: #1d4121;
            }

            .sentiment-negative {
                background-color: #ffebe9;
                border: 1px solid rgba(255, 129, 130, 0.15);
                color: #67060c;
            }

            .sentiment-neutral {
                background-color: #f0f2f5;
                border: 1px solid rgba(0, 0, 0, 0.08);
                color: #050505;
            }

            .sentiment-result:hover {
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                transform: translateY(-1px);
            }

            .sentiment-confidence {
                display: inline-block;
                margin-top: 4px;
                padding: 2px 6px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: 500;
                background: rgba(0, 0, 0, 0.05);
                color: inherit;
            }

            .sentiment-loading {
                display: flex;
                justify-content: center;
                margin: 8px 0;
            }

            .spinner {
                width: 20px;
                height: 20px;
                border: 3px solid #f3f3f3;
                border-top: 3px solid #1877f2;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

            .sentiment-error {
                position: fixed;
                bottom: 20px;
                right: 20px;
                background: #fce8e6;
                color: #ea4335;
                padding: 12px 20px;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.15);
                z-index: 9999;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(styleSheet);
    }

    // Create a set to track processed comments
    const processedComments = new Set();

    // Listen for new comments from background script
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
        if (message.type === "NEW_COMMENTS") {
            message.comments.forEach(comment => {
                // Create unique ID for comment to avoid duplicates
                const commentId = `${comment.author}-${comment.text}-${comment.time}`;

                if (!processedComments.has(commentId)) {
                    processedComments.add(commentId);

                    // Send to API for sentiment analysis
                    analyzeSentiment(comment.text)
                        .then(sentiment => {
                            // Add sentiment result to comment
                            displaySentimentResult(sentiment, comment);
                        })
                        .catch(err => console.error('Error analyzing comment:', err));
                }
            });
        }
    });

    function displaySentimentResult(sentiment, comment) {
        // Find the comment element again using author and text
        const commentElements = document.querySelectorAll('[role="article"][tabindex="-1"]');

        for (const element of commentElements) {
            const textElement = element.querySelector('div[dir="auto"][style="text-align: start"]');
            if (textElement && textElement.textContent.includes(comment.text)) {
                // Create sentiment display element
                const sentimentDiv = document.createElement('div');
                sentimentDiv.className = `sentiment-result sentiment-${sentiment.label.toLowerCase()}`;
                sentimentDiv.innerHTML = `
                    <div style="margin: 4px 0">
                        <span class="emoji">${getSentimentEmoji(sentiment.label)}</span>
                        <strong>${sentiment.label}</strong>
                        - ${sentiment.explanation}
                    </div>
                    <span class="sentiment-confidence">
                        Độ tin cậy: ${(sentiment.score * 100).toFixed(1)}%
                    </span>
                `;

                // Insert after comment text
                textElement.appendChild(sentimentDiv);
                break;
            }
        }
    }
}

================
File: extension/manifest.json
================
{
  "manifest_version": 3,
  "name": "Facebook Sentiment Analyzer",
  "version": "1.0",
  "description": "Analyzes sentiment in Facebook posts and comments using sentiment analysis API",
  "permissions": ["storage", "activeTab", "scripting", "tabs"],
  "host_permissions": [
    "http://localhost:7270/*",
    "http://127.0.0.1:7270/*",
    "http://workspace.tamais.me:7270/*",
    "https://workspace.tamais.me:7270/*",
    "http://*/*",
    "https://*/*"
  ],
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "content_security_policy": {
    "extension_pages": "script-src 'self'; object-src 'self'"
  },
  "content_scripts": [
    {
      "matches": ["https://*.facebook.com/*"],
      "css": ["style.css"],
      "js": ["content.js"],
      "run_at": "document_idle",
      "all_frames": false
    }
  ],
  "web_accessible_resources": [
    {
      "resources": ["popup.css"],
      "matches": ["https://*.facebook.com/*"]
    }
  ],
  "background": {
    "service_worker": "background.js",
    "type": "module"
  }
}

================
File: extension/package.json
================
{
  "scripts": {
    "build": "tailwindcss -i ./src/input.css -o ./popup.css --watch"
  },
  "devDependencies": {
    "tailwindcss": "^3.3.0"
  }
}

================
File: extension/popup.css
================
*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

/*
! tailwindcss v3.4.15 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  letter-spacing: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

.container {
  width: 100%;
}

@media (min-width: 640px) {
  .container {
    max-width: 640px;
  }
}

@media (min-width: 768px) {
  .container {
    max-width: 768px;
  }
}

@media (min-width: 1024px) {
  .container {
    max-width: 1024px;
  }
}

@media (min-width: 1280px) {
  .container {
    max-width: 1280px;
  }
}

@media (min-width: 1536px) {
  .container {
    max-width: 1536px;
  }
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.not-sr-only {
  position: static;
  width: auto;
  height: auto;
  padding: 0;
  margin: 0;
  overflow: visible;
  clip: auto;
  white-space: normal;
}

.pointer-events-none {
  pointer-events: none;
}

.pointer-events-auto {
  pointer-events: auto;
}

.\!visible {
  visibility: visible !important;
}

.visible {
  visibility: visible;
}

.invisible {
  visibility: hidden;
}

.collapse {
  visibility: collapse;
}

.static {
  position: static;
}

.fixed {
  position: fixed;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.sticky {
  position: sticky;
}

.-inset-1 {
  inset: -0.25rem;
}

.end-1 {
  inset-inline-end: 0.25rem;
}

.isolate {
  isolation: isolate;
}

.isolation-auto {
  isolation: auto;
}

.float-start {
  float: inline-start;
}

.float-end {
  float: inline-end;
}

.float-right {
  float: right;
}

.float-left {
  float: left;
}

.float-none {
  float: none;
}

.clear-start {
  clear: inline-start;
}

.clear-end {
  clear: inline-end;
}

.clear-left {
  clear: left;
}

.clear-right {
  clear: right;
}

.clear-both {
  clear: both;
}

.clear-none {
  clear: none;
}

.-mx-5 {
  margin-left: -1.25rem;
  margin-right: -1.25rem;
}

.-mt-5 {
  margin-top: -1.25rem;
}

.mb-1 {
  margin-bottom: 0.25rem;
}

.mb-2 {
  margin-bottom: 0.5rem;
}

.mb-6 {
  margin-bottom: 1.5rem;
}

.mt-1 {
  margin-top: 0.25rem;
}

.mt-2 {
  margin-top: 0.5rem;
}

.box-border {
  box-sizing: border-box;
}

.box-content {
  box-sizing: content-box;
}

.line-clamp-none {
  overflow: visible;
  display: block;
  -webkit-box-orient: horizontal;
  -webkit-line-clamp: none;
}

.block {
  display: block;
}

.inline-block {
  display: inline-block;
}

.inline {
  display: inline;
}

.flex {
  display: flex;
}

.inline-flex {
  display: inline-flex;
}

.table {
  display: table;
}

.inline-table {
  display: inline-table;
}

.table-caption {
  display: table-caption;
}

.table-cell {
  display: table-cell;
}

.table-column {
  display: table-column;
}

.table-column-group {
  display: table-column-group;
}

.table-footer-group {
  display: table-footer-group;
}

.table-header-group {
  display: table-header-group;
}

.table-row-group {
  display: table-row-group;
}

.table-row {
  display: table-row;
}

.flow-root {
  display: flow-root;
}

.grid {
  display: grid;
}

.inline-grid {
  display: inline-grid;
}

.contents {
  display: contents;
}

.list-item {
  display: list-item;
}

.hidden {
  display: none;
}

.h-10 {
  height: 2.5rem;
}

.h-3 {
  height: 0.75rem;
}

.h-4 {
  height: 1rem;
}

.h-5 {
  height: 1.25rem;
}

.w-10 {
  width: 2.5rem;
}

.w-3 {
  width: 0.75rem;
}

.w-4 {
  width: 1rem;
}

.w-5 {
  width: 1.25rem;
}

.w-\[380px\] {
  width: 380px;
}

.w-\[this-is\\\\\] {
  width: this-is\\;
}

.w-\[this-is\] {
  width: this-is;
}

.w-\[weird-and-invalid\] {
  width: weird-and-invalid;
}

.flex-shrink {
  flex-shrink: 1;
}

.shrink {
  flex-shrink: 1;
}

.flex-grow {
  flex-grow: 1;
}

.grow {
  flex-grow: 1;
}

.table-auto {
  table-layout: auto;
}

.table-fixed {
  table-layout: fixed;
}

.caption-top {
  caption-side: top;
}

.caption-bottom {
  caption-side: bottom;
}

.border-collapse {
  border-collapse: collapse;
}

.border-separate {
  border-collapse: separate;
}

.\!transform {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)) !important;
}

.transform {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.transform-cpu {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.transform-gpu {
  transform: translate3d(var(--tw-translate-x), var(--tw-translate-y), 0) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.transform-none {
  transform: none;
}

.touch-auto {
  touch-action: auto;
}

.touch-none {
  touch-action: none;
}

.touch-pan-x {
  --tw-pan-x: pan-x;
  touch-action: var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom);
}

.touch-pan-left {
  --tw-pan-x: pan-left;
  touch-action: var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom);
}

.touch-pan-right {
  --tw-pan-x: pan-right;
  touch-action: var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom);
}

.touch-pan-y {
  --tw-pan-y: pan-y;
  touch-action: var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom);
}

.touch-pan-up {
  --tw-pan-y: pan-up;
  touch-action: var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom);
}

.touch-pan-down {
  --tw-pan-y: pan-down;
  touch-action: var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom);
}

.touch-pinch-zoom {
  --tw-pinch-zoom: pinch-zoom;
  touch-action: var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom);
}

.touch-manipulation {
  touch-action: manipulation;
}

.select-none {
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}

.select-text {
  -webkit-user-select: text;
     -moz-user-select: text;
          user-select: text;
}

.select-all {
  -webkit-user-select: all;
     -moz-user-select: all;
          user-select: all;
}

.select-auto {
  -webkit-user-select: auto;
     -moz-user-select: auto;
          user-select: auto;
}

.resize-none {
  resize: none;
}

.resize-y {
  resize: vertical;
}

.resize-x {
  resize: horizontal;
}

.resize {
  resize: both;
}

.snap-none {
  scroll-snap-type: none;
}

.snap-x {
  scroll-snap-type: x var(--tw-scroll-snap-strictness);
}

.snap-y {
  scroll-snap-type: y var(--tw-scroll-snap-strictness);
}

.snap-both {
  scroll-snap-type: both var(--tw-scroll-snap-strictness);
}

.snap-mandatory {
  --tw-scroll-snap-strictness: mandatory;
}

.snap-proximity {
  --tw-scroll-snap-strictness: proximity;
}

.snap-start {
  scroll-snap-align: start;
}

.snap-end {
  scroll-snap-align: end;
}

.snap-center {
  scroll-snap-align: center;
}

.snap-align-none {
  scroll-snap-align: none;
}

.snap-normal {
  scroll-snap-stop: normal;
}

.snap-always {
  scroll-snap-stop: always;
}

.list-inside {
  list-style-position: inside;
}

.list-outside {
  list-style-position: outside;
}

.appearance-none {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.appearance-auto {
  -webkit-appearance: auto;
     -moz-appearance: auto;
          appearance: auto;
}

.break-before-auto {
  -moz-column-break-before: auto;
       break-before: auto;
}

.break-before-avoid {
  -moz-column-break-before: avoid;
       break-before: avoid;
}

.break-before-all {
  -moz-column-break-before: all;
       break-before: all;
}

.break-before-avoid-page {
  -moz-column-break-before: avoid;
       break-before: avoid-page;
}

.break-before-page {
  -moz-column-break-before: page;
       break-before: page;
}

.break-before-left {
  -moz-column-break-before: left;
       break-before: left;
}

.break-before-right {
  -moz-column-break-before: right;
       break-before: right;
}

.break-before-column {
  -moz-column-break-before: column;
       break-before: column;
}

.break-inside-auto {
  -moz-column-break-inside: auto;
       break-inside: auto;
}

.break-inside-avoid {
  -moz-column-break-inside: avoid;
       break-inside: avoid;
}

.break-inside-avoid-page {
  break-inside: avoid-page;
}

.break-inside-avoid-column {
  -moz-column-break-inside: avoid;
       break-inside: avoid-column;
}

.break-after-auto {
  -moz-column-break-after: auto;
       break-after: auto;
}

.break-after-avoid {
  -moz-column-break-after: avoid;
       break-after: avoid;
}

.break-after-all {
  -moz-column-break-after: all;
       break-after: all;
}

.break-after-avoid-page {
  -moz-column-break-after: avoid;
       break-after: avoid-page;
}

.break-after-page {
  -moz-column-break-after: page;
       break-after: page;
}

.break-after-left {
  -moz-column-break-after: left;
       break-after: left;
}

.break-after-right {
  -moz-column-break-after: right;
       break-after: right;
}

.break-after-column {
  -moz-column-break-after: column;
       break-after: column;
}

.grid-flow-row {
  grid-auto-flow: row;
}

.grid-flow-col {
  grid-auto-flow: column;
}

.grid-flow-dense {
  grid-auto-flow: dense;
}

.grid-flow-row-dense {
  grid-auto-flow: row dense;
}

.grid-flow-col-dense {
  grid-auto-flow: column dense;
}

.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr));
}

.flex-row {
  flex-direction: row;
}

.flex-row-reverse {
  flex-direction: row-reverse;
}

.flex-col {
  flex-direction: column;
}

.flex-col-reverse {
  flex-direction: column-reverse;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse;
}

.flex-nowrap {
  flex-wrap: nowrap;
}

.place-content-center {
  place-content: center;
}

.place-content-start {
  place-content: start;
}

.place-content-end {
  place-content: end;
}

.place-content-between {
  place-content: space-between;
}

.place-content-around {
  place-content: space-around;
}

.place-content-evenly {
  place-content: space-evenly;
}

.place-content-baseline {
  place-content: baseline;
}

.place-content-stretch {
  place-content: stretch;
}

.place-items-start {
  place-items: start;
}

.place-items-end {
  place-items: end;
}

.place-items-center {
  place-items: center;
}

.place-items-baseline {
  place-items: baseline;
}

.place-items-stretch {
  place-items: stretch;
}

.content-normal {
  align-content: normal;
}

.content-center {
  align-content: center;
}

.content-start {
  align-content: flex-start;
}

.content-end {
  align-content: flex-end;
}

.content-between {
  align-content: space-between;
}

.content-around {
  align-content: space-around;
}

.content-evenly {
  align-content: space-evenly;
}

.content-baseline {
  align-content: baseline;
}

.content-stretch {
  align-content: stretch;
}

.items-start {
  align-items: flex-start;
}

.items-end {
  align-items: flex-end;
}

.items-center {
  align-items: center;
}

.items-baseline {
  align-items: baseline;
}

.items-stretch {
  align-items: stretch;
}

.justify-normal {
  justify-content: normal;
}

.justify-start {
  justify-content: flex-start;
}

.justify-end {
  justify-content: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-around {
  justify-content: space-around;
}

.justify-evenly {
  justify-content: space-evenly;
}

.justify-stretch {
  justify-content: stretch;
}

.justify-items-start {
  justify-items: start;
}

.justify-items-end {
  justify-items: end;
}

.justify-items-center {
  justify-items: center;
}

.justify-items-stretch {
  justify-items: stretch;
}

.gap-4 {
  gap: 1rem;
}

.space-x-2 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.5rem * var(--tw-space-x-reverse));
  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-y-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}

.space-y-reverse > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 1;
}

.space-x-reverse > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 1;
}

.divide-x > :not([hidden]) ~ :not([hidden]) {
  --tw-divide-x-reverse: 0;
  border-right-width: calc(1px * var(--tw-divide-x-reverse));
  border-left-width: calc(1px * calc(1 - var(--tw-divide-x-reverse)));
}

.divide-y > :not([hidden]) ~ :not([hidden]) {
  --tw-divide-y-reverse: 0;
  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));
}

.divide-y-reverse > :not([hidden]) ~ :not([hidden]) {
  --tw-divide-y-reverse: 1;
}

.divide-x-reverse > :not([hidden]) ~ :not([hidden]) {
  --tw-divide-x-reverse: 1;
}

.divide-solid > :not([hidden]) ~ :not([hidden]) {
  border-style: solid;
}

.divide-dashed > :not([hidden]) ~ :not([hidden]) {
  border-style: dashed;
}

.divide-dotted > :not([hidden]) ~ :not([hidden]) {
  border-style: dotted;
}

.divide-double > :not([hidden]) ~ :not([hidden]) {
  border-style: double;
}

.divide-none > :not([hidden]) ~ :not([hidden]) {
  border-style: none;
}

.place-self-auto {
  place-self: auto;
}

.place-self-start {
  place-self: start;
}

.place-self-end {
  place-self: end;
}

.place-self-center {
  place-self: center;
}

.place-self-stretch {
  place-self: stretch;
}

.self-auto {
  align-self: auto;
}

.self-start {
  align-self: flex-start;
}

.self-end {
  align-self: flex-end;
}

.self-center {
  align-self: center;
}

.self-stretch {
  align-self: stretch;
}

.self-baseline {
  align-self: baseline;
}

.justify-self-auto {
  justify-self: auto;
}

.justify-self-start {
  justify-self: start;
}

.justify-self-end {
  justify-self: end;
}

.justify-self-center {
  justify-self: center;
}

.justify-self-stretch {
  justify-self: stretch;
}

.overflow-auto {
  overflow: auto;
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-clip {
  overflow: clip;
}

.overflow-visible {
  overflow: visible;
}

.overflow-scroll {
  overflow: scroll;
}

.overflow-x-auto {
  overflow-x: auto;
}

.overflow-y-auto {
  overflow-y: auto;
}

.overflow-x-hidden {
  overflow-x: hidden;
}

.overflow-y-hidden {
  overflow-y: hidden;
}

.overflow-x-clip {
  overflow-x: clip;
}

.overflow-y-clip {
  overflow-y: clip;
}

.overflow-x-visible {
  overflow-x: visible;
}

.overflow-y-visible {
  overflow-y: visible;
}

.overflow-x-scroll {
  overflow-x: scroll;
}

.overflow-y-scroll {
  overflow-y: scroll;
}

.overscroll-auto {
  overscroll-behavior: auto;
}

.overscroll-contain {
  overscroll-behavior: contain;
}

.overscroll-none {
  overscroll-behavior: none;
}

.overscroll-y-auto {
  overscroll-behavior-y: auto;
}

.overscroll-y-contain {
  overscroll-behavior-y: contain;
}

.overscroll-y-none {
  overscroll-behavior-y: none;
}

.overscroll-x-auto {
  overscroll-behavior-x: auto;
}

.overscroll-x-contain {
  overscroll-behavior-x: contain;
}

.overscroll-x-none {
  overscroll-behavior-x: none;
}

.scroll-auto {
  scroll-behavior: auto;
}

.scroll-smooth {
  scroll-behavior: smooth;
}

.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.overflow-ellipsis {
  text-overflow: ellipsis;
}

.text-ellipsis {
  text-overflow: ellipsis;
}

.text-clip {
  text-overflow: clip;
}

.hyphens-none {
  -webkit-hyphens: none;
          hyphens: none;
}

.hyphens-manual {
  -webkit-hyphens: manual;
          hyphens: manual;
}

.hyphens-auto {
  -webkit-hyphens: auto;
          hyphens: auto;
}

.whitespace-normal {
  white-space: normal;
}

.whitespace-nowrap {
  white-space: nowrap;
}

.whitespace-pre {
  white-space: pre;
}

.whitespace-pre-line {
  white-space: pre-line;
}

.whitespace-pre-wrap {
  white-space: pre-wrap;
}

.whitespace-break-spaces {
  white-space: break-spaces;
}

.text-wrap {
  text-wrap: wrap;
}

.text-nowrap {
  text-wrap: nowrap;
}

.text-balance {
  text-wrap: balance;
}

.text-pretty {
  text-wrap: pretty;
}

.break-normal {
  overflow-wrap: normal;
  word-break: normal;
}

.break-words {
  overflow-wrap: break-word;
}

.break-all {
  word-break: break-all;
}

.break-keep {
  word-break: keep-all;
}

.rounded {
  border-radius: 0.25rem;
}

.rounded-full {
  border-radius: 9999px;
}

.rounded-xl {
  border-radius: 0.75rem;
}

.rounded-b {
  border-bottom-right-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}

.rounded-e {
  border-start-end-radius: 0.25rem;
  border-end-end-radius: 0.25rem;
}

.rounded-l {
  border-top-left-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}

.rounded-r {
  border-top-right-radius: 0.25rem;
  border-bottom-right-radius: 0.25rem;
}

.rounded-s {
  border-start-start-radius: 0.25rem;
  border-end-start-radius: 0.25rem;
}

.rounded-t {
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
}

.rounded-bl {
  border-bottom-left-radius: 0.25rem;
}

.rounded-br {
  border-bottom-right-radius: 0.25rem;
}

.rounded-ee {
  border-end-end-radius: 0.25rem;
}

.rounded-es {
  border-end-start-radius: 0.25rem;
}

.rounded-se {
  border-start-end-radius: 0.25rem;
}

.rounded-ss {
  border-start-start-radius: 0.25rem;
}

.rounded-tl {
  border-top-left-radius: 0.25rem;
}

.rounded-tr {
  border-top-right-radius: 0.25rem;
}

.border {
  border-width: 1px;
}

.border-x {
  border-left-width: 1px;
  border-right-width: 1px;
}

.border-y {
  border-top-width: 1px;
  border-bottom-width: 1px;
}

.border-b {
  border-bottom-width: 1px;
}

.border-e {
  border-inline-end-width: 1px;
}

.border-l {
  border-left-width: 1px;
}

.border-r {
  border-right-width: 1px;
}

.border-s {
  border-inline-start-width: 1px;
}

.border-t {
  border-top-width: 1px;
}

.border-solid {
  border-style: solid;
}

.border-dashed {
  border-style: dashed;
}

.border-dotted {
  border-style: dotted;
}

.border-double {
  border-style: double;
}

.border-hidden {
  border-style: hidden;
}

.border-none {
  border-style: none;
}

.border-gray-200 {
  --tw-border-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-border-opacity, 1));
}

.bg-\[rgb\(255\2c 0\2c 0\)\] {
  --tw-bg-opacity: 1;
  background-color: rgb(255 0 0 / var(--tw-bg-opacity, 1));
}

.bg-blue-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(239 246 255 / var(--tw-bg-opacity, 1));
}

.bg-gray-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));
}

.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));
}

.bg-white\/10 {
  background-color: rgb(255 255 255 / 0.1);
}

.bg-gradient-to-r {
  background-image: linear-gradient(to right, var(--tw-gradient-stops));
}

.from-blue-600 {
  --tw-gradient-from: #2563eb var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(37 99 235 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

.to-blue-700 {
  --tw-gradient-to: #1d4ed8 var(--tw-gradient-to-position);
}

.decoration-slice {
  -webkit-box-decoration-break: slice;
          box-decoration-break: slice;
}

.decoration-clone {
  -webkit-box-decoration-break: clone;
          box-decoration-break: clone;
}

.box-decoration-slice {
  -webkit-box-decoration-break: slice;
          box-decoration-break: slice;
}

.box-decoration-clone {
  -webkit-box-decoration-break: clone;
          box-decoration-break: clone;
}

.bg-fixed {
  background-attachment: fixed;
}

.bg-local {
  background-attachment: local;
}

.bg-scroll {
  background-attachment: scroll;
}

.bg-clip-border {
  background-clip: border-box;
}

.bg-clip-padding {
  background-clip: padding-box;
}

.bg-clip-content {
  background-clip: content-box;
}

.bg-clip-text {
  -webkit-background-clip: text;
          background-clip: text;
}

.bg-repeat {
  background-repeat: repeat;
}

.bg-no-repeat {
  background-repeat: no-repeat;
}

.bg-repeat-x {
  background-repeat: repeat-x;
}

.bg-repeat-y {
  background-repeat: repeat-y;
}

.bg-repeat-round {
  background-repeat: round;
}

.bg-repeat-space {
  background-repeat: space;
}

.bg-origin-border {
  background-origin: border-box;
}

.bg-origin-padding {
  background-origin: padding-box;
}

.bg-origin-content {
  background-origin: content-box;
}

.object-contain {
  -o-object-fit: contain;
     object-fit: contain;
}

.object-cover {
  -o-object-fit: cover;
     object-fit: cover;
}

.object-fill {
  -o-object-fit: fill;
     object-fit: fill;
}

.object-none {
  -o-object-fit: none;
     object-fit: none;
}

.object-scale-down {
  -o-object-fit: scale-down;
     object-fit: scale-down;
}

.p-4 {
  padding: 1rem;
}

.p-5 {
  padding: 1.25rem;
}

.px-1 {
  padding-left: 0.25rem;
  padding-right: 0.25rem;
}

.px-1\.5 {
  padding-left: 0.375rem;
  padding-right: 0.375rem;
}

.px-2 {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

.px-5 {
  padding-left: 1.25rem;
  padding-right: 1.25rem;
}

.py-1 {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

.pb-5 {
  padding-bottom: 1.25rem;
}

.pt-8 {
  padding-top: 2rem;
}

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-justify {
  text-align: justify;
}

.text-start {
  text-align: start;
}

.text-end {
  text-align: end;
}

.align-baseline {
  vertical-align: baseline;
}

.align-top {
  vertical-align: top;
}

.align-middle {
  vertical-align: middle;
}

.align-bottom {
  vertical-align: bottom;
}

.align-text-top {
  vertical-align: text-top;
}

.align-text-bottom {
  vertical-align: text-bottom;
}

.align-sub {
  vertical-align: sub;
}

.align-super {
  vertical-align: super;
}

.font-\[Inter\] {
  font-family: Inter;
}

.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}

.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.text-xl {
  font-size: 1.25rem;
  line-height: 1.75rem;
}

.text-xs {
  font-size: 0.75rem;
  line-height: 1rem;
}

.font-bold {
  font-weight: 700;
}

.font-medium {
  font-weight: 500;
}

.font-semibold {
  font-weight: 600;
}

.uppercase {
  text-transform: uppercase;
}

.lowercase {
  text-transform: lowercase;
}

.capitalize {
  text-transform: capitalize;
}

.normal-case {
  text-transform: none;
}

.italic {
  font-style: italic;
}

.not-italic {
  font-style: normal;
}

.normal-nums {
  font-variant-numeric: normal;
}

.ordinal {
  --tw-ordinal: ordinal;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.slashed-zero {
  --tw-slashed-zero: slashed-zero;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.lining-nums {
  --tw-numeric-figure: lining-nums;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.oldstyle-nums {
  --tw-numeric-figure: oldstyle-nums;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.proportional-nums {
  --tw-numeric-spacing: proportional-nums;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.tabular-nums {
  --tw-numeric-spacing: tabular-nums;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.diagonal-fractions {
  --tw-numeric-fraction: diagonal-fractions;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.stacked-fractions {
  --tw-numeric-fraction: stacked-fractions;
  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);
}

.text-\[\#336699\]\/\[\.35\] {
  color: rgb(51 102 153 / .35);
}

.text-blue-100 {
  --tw-text-opacity: 1;
  color: rgb(219 234 254 / var(--tw-text-opacity, 1));
}

.text-blue-500 {
  --tw-text-opacity: 1;
  color: rgb(59 130 246 / var(--tw-text-opacity, 1));
}

.text-blue-600 {
  --tw-text-opacity: 1;
  color: rgb(37 99 235 / var(--tw-text-opacity, 1));
}

.text-gray-500 {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity, 1));
}

.text-gray-900 {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity, 1));
}

.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity, 1));
}

.underline {
  text-decoration-line: underline;
}

.overline {
  text-decoration-line: overline;
}

.line-through {
  text-decoration-line: line-through;
}

.no-underline {
  text-decoration-line: none;
}

.decoration-solid {
  text-decoration-style: solid;
}

.decoration-double {
  text-decoration-style: double;
}

.decoration-dotted {
  text-decoration-style: dotted;
}

.decoration-dashed {
  text-decoration-style: dashed;
}

.decoration-wavy {
  text-decoration-style: wavy;
}

.antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.subpixel-antialiased {
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;
}

.bg-blend-normal {
  background-blend-mode: normal;
}

.bg-blend-multiply {
  background-blend-mode: multiply;
}

.bg-blend-screen {
  background-blend-mode: screen;
}

.bg-blend-overlay {
  background-blend-mode: overlay;
}

.bg-blend-darken {
  background-blend-mode: darken;
}

.bg-blend-lighten {
  background-blend-mode: lighten;
}

.bg-blend-color-dodge {
  background-blend-mode: color-dodge;
}

.bg-blend-color-burn {
  background-blend-mode: color-burn;
}

.bg-blend-hard-light {
  background-blend-mode: hard-light;
}

.bg-blend-soft-light {
  background-blend-mode: soft-light;
}

.bg-blend-difference {
  background-blend-mode: difference;
}

.bg-blend-exclusion {
  background-blend-mode: exclusion;
}

.bg-blend-hue {
  background-blend-mode: hue;
}

.bg-blend-saturation {
  background-blend-mode: saturation;
}

.bg-blend-color {
  background-blend-mode: color;
}

.bg-blend-luminosity {
  background-blend-mode: luminosity;
}

.mix-blend-normal {
  mix-blend-mode: normal;
}

.mix-blend-multiply {
  mix-blend-mode: multiply;
}

.mix-blend-screen {
  mix-blend-mode: screen;
}

.mix-blend-overlay {
  mix-blend-mode: overlay;
}

.mix-blend-darken {
  mix-blend-mode: darken;
}

.mix-blend-lighten {
  mix-blend-mode: lighten;
}

.mix-blend-color-dodge {
  mix-blend-mode: color-dodge;
}

.mix-blend-color-burn {
  mix-blend-mode: color-burn;
}

.mix-blend-hard-light {
  mix-blend-mode: hard-light;
}

.mix-blend-soft-light {
  mix-blend-mode: soft-light;
}

.mix-blend-difference {
  mix-blend-mode: difference;
}

.mix-blend-exclusion {
  mix-blend-mode: exclusion;
}

.mix-blend-hue {
  mix-blend-mode: hue;
}

.mix-blend-saturation {
  mix-blend-mode: saturation;
}

.mix-blend-color {
  mix-blend-mode: color;
}

.mix-blend-luminosity {
  mix-blend-mode: luminosity;
}

.mix-blend-plus-darker {
  mix-blend-mode: plus-darker;
}

.mix-blend-plus-lighter {
  mix-blend-mode: plus-lighter;
}

.\!shadow {
  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1) !important;
  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color) !important;
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;
}

.shadow {
  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-sm {
  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.outline-none {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

.outline {
  outline-style: solid;
}

.outline-dashed {
  outline-style: dashed;
}

.outline-dotted {
  outline-style: dotted;
}

.outline-double {
  outline-style: double;
}

.ring {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.ring-inset {
  --tw-ring-inset: inset;
}

.blur {
  --tw-blur: blur(8px);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.drop-shadow {
  --tw-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / 0.1)) drop-shadow(0 1px 1px rgb(0 0 0 / 0.06));
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.grayscale {
  --tw-grayscale: grayscale(100%);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.invert {
  --tw-invert: invert(100%);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.sepia {
  --tw-sepia: sepia(100%);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.\!filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow) !important;
}

.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.filter-none {
  filter: none;
}

.backdrop-blur {
  --tw-backdrop-blur: blur(8px);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

.backdrop-grayscale {
  --tw-backdrop-grayscale: grayscale(100%);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

.backdrop-invert {
  --tw-backdrop-invert: invert(100%);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

.backdrop-sepia {
  --tw-backdrop-sepia: sepia(100%);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

.backdrop-filter {
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

.backdrop-filter-none {
  -webkit-backdrop-filter: none;
  backdrop-filter: none;
}

.transition {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.ease-in {
  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
}

.ease-in-out {
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.ease-out {
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

.contain-none {
  contain: none;
}

.contain-content {
  contain: content;
}

.contain-strict {
  contain: strict;
}

.contain-size {
  --tw-contain-size: size;
  contain: var(--tw-contain-size) var(--tw-contain-layout) var(--tw-contain-paint) var(--tw-contain-style);
}

.contain-inline-size {
  --tw-contain-size: inline-size;
  contain: var(--tw-contain-size) var(--tw-contain-layout) var(--tw-contain-paint) var(--tw-contain-style);
}

.contain-layout {
  --tw-contain-layout: layout;
  contain: var(--tw-contain-size) var(--tw-contain-layout) var(--tw-contain-paint) var(--tw-contain-style);
}

.contain-paint {
  --tw-contain-paint: paint;
  contain: var(--tw-contain-size) var(--tw-contain-layout) var(--tw-contain-paint) var(--tw-contain-style);
}

.contain-style {
  --tw-contain-style: style;
  contain: var(--tw-contain-size) var(--tw-contain-layout) var(--tw-contain-paint) var(--tw-contain-style);
}

.content-\[\'this-is-also-valid\]-weirdly-enough\'\] {
  --tw-content: 'this-is-also-valid]-weirdly-enough';
  content: var(--tw-content);
}

.forced-color-adjust-auto {
  forced-color-adjust: auto;
}

.forced-color-adjust-none {
  forced-color-adjust: none;
}

@media (min-width: 640px) {
  .sm\:container {
    width: 100%;
  }

  @media (min-width: 640px) {
    .sm\:container {
      max-width: 640px;
    }
  }

  @media (min-width: 768px) {
    .sm\:container {
      max-width: 768px;
    }
  }

  @media (min-width: 1024px) {
    .sm\:container {
      max-width: 1024px;
    }
  }

  @media (min-width: 1280px) {
    .sm\:container {
      max-width: 1280px;
    }
  }

  @media (min-width: 1536px) {
    .sm\:container {
      max-width: 1536px;
    }
  }
}

.hover\:font-bold:hover {
  font-weight: 700;
}

.before\:hover\:text-center:hover::before {
  content: var(--tw-content);
  text-align: center;
}

.hover\:before\:text-center:hover::before {
  content: var(--tw-content);
  text-align: center;
}

.focus\:hover\:text-center:hover:focus {
  text-align: center;
}

.hover\:focus\:text-center:focus:hover {
  text-align: center;
}

@media (min-width: 640px) {
  .sm\:underline {
    text-decoration-line: underline;
  }
}

@media (min-width: 1024px) {
  .dark\:lg\:hover\:\[paint-order\:markers\]:hover:is(.dark *) {
    paint-order: markers;
  }
}

.analysis-overview {
    padding: 15px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.analysis-overview h3 {
    margin: 0 0 15px;
    font-size: 16px;
    color: #1a73e8;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
}

.stat-box {
    padding: 12px;
    border-radius: 6px;
    text-align: center;
    background: #f8f9fa;
    transition: transform 0.2s;
}

.stat-box:hover {
    transform: translateY(-2px);
}

.stat-label {
    font-size: 13px;
    color: #5f6368;
    margin-bottom: 5px;
}

.stat-value {
    font-size: 24px;
    font-weight: 500;
    color: #202124;
}

.sentiment-positive {
    background: #e6f4ea;
    border: 1px solid rgba(52, 168, 83, 0.2);
}

.sentiment-negative {
    background: #fce8e6;
    border: 1px solid rgba(217, 48, 37, 0.2);
}

.sentiment-neutral {
    background: #f1f3f4;
    border: 1px solid rgba(95, 99, 104, 0.2);
}

/* Dark theme */
@media (prefers-color-scheme: dark) {
    .analysis-overview {
        background: #292a2d;
    }

    .analysis-overview h3 {
        color: #8ab4f8;
    }

    .stat-box {
        background: #202124;
    }

    .stat-label {
        color: #9aa0a6;
    }

    .stat-value {
        color: #e8eaed;
    }

    .sentiment-positive {
        background: rgba(52, 168, 83, 0.2);
    }

    .sentiment-negative {
        background: rgba(217, 48, 37, 0.2); 
    }

    .sentiment-neutral {
        background: rgba(95, 99, 104, 0.2);
    }
}

/* ...existing code... */

================
File: extension/popup.html
================
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <link href="popup.css" rel="stylesheet" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="w-[380px] p-5 bg-gray-50 font-[Inter]">
    <div class="space-y-4">
      <!-- Header with gradient -->
      <div
        class="relative -mx-5 -mt-5 px-5 pt-8 pb-5 bg-gradient-to-r from-blue-600 to-blue-700 mb-6"
      >
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-xl font-semibold text-white mb-1">
              Sentiment Analyzer
            </h2>
            <p class="text-blue-100 text-sm">Phân tích cảm xúc Facebook</p>
          </div>
          <div class="flex items-center space-x-2">
            <div id="status-indicator" 
                 class="h-3 w-3 rounded-full bg-gray-300"></div>
            <div id="status-badge" 
                 class="flex items-center space-x-1 px-2 py-1 rounded-full bg-white/10">
              <span id="status-text" class="text-xs font-medium text-white">Checking...</span>
              <span id="status-models" class="text-xs text-white/80 hidden"></span>
            </div>
          </div>
        </div>
        <button id="analyzeCurrentPost" 
                class="mt-4 w-full bg-white/10 hover:bg-white/20 text-white py-2 px-4 rounded-md">
          Phân tích bài viết này
        </button>
      </div>

      <!-- Error Container - Move to top for better visibility -->
      <div id="error-container" 
           class="hidden p-3 mb-4 rounded-md bg-red-100 text-red-700 text-sm">
      </div>

      <!-- API Status Card -->
      <div class="bg-white rounded-xl border border-gray-200 p-4 shadow-sm">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="font-medium text-gray-900">API Status</h3>
            <p class="text-sm text-gray-500 mt-1" id="apiStatus">
              Đang kiểm tra kết nối...
            </p>
          </div>
          <div
            class="flex h-10 w-10 items-center justify-center rounded-full bg-blue-50"
          >
            <svg
              class="h-5 w-5 text-blue-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 10V3L4 14h7v7l9-11h-7z"
              />
            </svg>
          </div>
        </div>
      </div>

      <!-- Statistics Cards -->
      <div class="grid grid-cols-2 gap-4">
        <!-- Analyzed Posts Card -->
        <div class="bg-white rounded-xl border border-gray-200 p-4 shadow-sm">
          <div class="flex flex-col">
            <div class="flex items-center space-x-2 text-sm text-gray-500 mb-2">
              <svg
                class="h-4 w-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                />
              </svg>
              <span>Bài phân tích</span>
            </div>
            <span class="text-2xl font-bold text-gray-900" id="analyzed-count"
              >0</span
            >
          </div>
        </div>

        <!-- Success Rate Card -->
        <div class="bg-white rounded-xl border border-gray-200 p-4 shadow-sm">
          <div class="flex flex-col">
            <div class="flex items-center space-x-2 text-sm text-gray-500 mb-2">
              <svg
                class="h-4 w-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"
                />
              </svg>
              <span>Tỷ lệ thành công</span>
            </div>
            <span class="text-2xl font-bold text-gray-900" id="success-rate"
              >0%</span
            >
          </div>
        </div>
      </div>

      <!-- Add analysis overview section -->
      <div class="analysis-overview">
        <h3>Tổng quan phân tích</h3>
        <div class="stats-grid">
            <div class="stat-box">
                <div class="stat-label">Tổng phân tích</div>
                <div class="stat-value" id="totalAnalyzed">0</div>
            </div>
            <div class="stat-box">
                <div class="stat-label">Thành công</div>
                <div class="stat-value" id="totalSuccessful">0</div>
            </div>
            <div class="stat-box sentiment-positive">
                <div class="stat-label">Tích cực</div>
                <div class="stat-value" id="totalPositive">0</div>
            </div>
            <div class="stat-box sentiment-negative"> 
                <div class="stat-label">Tiêu cực</div>
                <div class="stat-value" id="totalNegative">0</div>
            </div>
            <div class="stat-box sentiment-neutral">
                <div class="stat-label">Trung tính</div>  
                <div class="stat-value" id="totalNeutral">0</div>
            </div>
        </div>
      </div>

      <!-- API Configuration Card -->
      <div
        class="bg-white rounded-xl border border-gray-200 p-4 shadow-sm mt-4"
      >
        <div class="flex items-center justify-between mb-3">
          <h3 class="font-medium text-gray-900">API Configuration</h3>
          <div class="space-x-2">
            <button
              id="resetApiConfig"
              class="text-sm bg-gray-500 text-white px-3 py-1 rounded-md hover:bg-gray-600"
            >
              Reset
            </button>
            <button
              id="saveApiConfig"
              class="text-sm bg-blue-600 text-white px-3 py-1 rounded-md hover:bg-blue-700"
            >
              Save
            </button>
          </div>
        </div>
        <div class="space-y-2">
          <input
            type="text"
            id="apiUrl"
            class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
            placeholder="Enter API URL (e.g., http://localhost:7270)"
          />
          <div class="flex items-center space-x-2 text-sm text-gray-500">
            <span id="apiUrlStatus" class="text-xs"></span>
          </div>
        </div>
        <!-- Add last update timestamp -->
        <div class="mt-2 text-center">
          <span id="last-update" class="text-xs text-gray-500"
            >Last updated: --:--:--</span
          >
        </div>
      </div>

      <!-- Error Message Container -->
      <div
        id="error-container"
        class="hidden mt-2 p-2 rounded-md bg-red-100 text-red-700 text-sm"
      ></div>
    </div>
    <script src="popup.js"></script>
  </body>
</html>

================
File: extension/popup.js
================
let port;
let reconnectTimeout = null;
let updateInterval = null;
let lastUpdateTime = null;
const UPDATE_THRESHOLD = 2000; // 2 seconds

function updatePopupUI(data) {
    try {
        // Required elements lookup with fallbacks
        const elements = {
            statusIndicator: document.getElementById('status-indicator') || createElementIfMissing('status-indicator'),
            statusBadge: document.getElementById('status-badge') || createElementIfMissing('status-badge'),
            apiStatus: document.getElementById('apiStatus') || createElementIfMissing('apiStatus'),
            analyzedCount: document.getElementById('analyzed-count') || createElementIfMissing('analyzed-count'),
            successRate: document.getElementById('success-rate') || createElementIfMissing('success-rate'),
            lastUpdate: document.getElementById('last-update') || createElementIfMissing('last-update'),
            errorContainer: document.getElementById('error-container') || createElementIfMissing('error-container')
        };

        // Show error if any elements are missing
        const missingElements = Object.entries(elements)
            .filter(([key, element]) => !element)
            .map(([key]) => key);

        if (missingElements.length > 0) {
            showError(`Missing UI elements: ${missingElements.join(', ')}`);
            return;
        }

        // Hide error container if everything is OK
        elements.errorContainer.classList.add('hidden');

        // Rest of existing updatePopupUI code...
        if (!data || !data.api) return;

        // Update status indicator
        if (data.api.isAvailable) {
            elements.statusIndicator.className = 'h-3 w-3 rounded-full bg-green-500';
            elements.statusBadge.textContent = 'Online';
            elements.statusBadge.className = 'text-xs font-medium bg-green-100 text-green-800 px-2 py-1 rounded-full';

            if (data.api.models) {
                const modelStatus = Object.entries(data.api.models)
                    .map(([lang, status]) => `${lang.toUpperCase()}: ${status ? '✓' : '✗'}`)
                    .join(' | ');
                elements.apiStatus.textContent = `Connected | ${modelStatus}`;
            } else {
                elements.apiStatus.textContent = 'Connected';
            }
        } else {
            elements.statusIndicator.className = 'h-3 w-3 rounded-full bg-red-500';
            elements.statusBadge.textContent = 'Offline';
            elements.statusBadge.className = 'text-xs font-medium bg-red-100 text-red-800 px-2 py-1 rounded-full';
            elements.apiStatus.textContent = data.api.error || 'Connection failed';
        }

        // Update stats
        if (data.stats) {
            elements.analyzedCount.textContent = data.stats.analyzed || '0';
            elements.successRate.textContent =
                `${Math.round((data.stats.successful / data.stats.analyzed) * 100) || 0}%`;
        }

        // Update timestamp
        if (data.timestamp) {
            const lastUpdate = new Date(data.timestamp);
            elements.lastUpdate.textContent = `Last updated: ${lastUpdate.toLocaleTimeString()}`;
        }
    } catch (error) {
        showError(`UI Update Error: ${error.message}`);
    }
}

function createElementIfMissing(id) {
    // Create missing element with default styling
    const element = document.createElement('div');
    element.id = id;
    element.className = 'missing-element';
    document.body.appendChild(element);
    console.warn(`Created missing element: ${id}`);
    return element;
}

function showError(message) {
    const errorContainer = document.getElementById('error-container') ||
        createElementIfMissing('error-container');
    errorContainer.classList.remove('hidden');
    errorContainer.textContent = message;
    console.error(message);
}

function setupConnection() {
    try {
        if (port) {
            try {
                port.disconnect();
            } catch (e) {
                console.warn('Error disconnecting old port:', e);
            }
            port = null;
        }

        const connect = (retryCount = 0) => {
            try {
                port = chrome.runtime.connect({ name: 'popup' });
                setupMessageHandlers(port);
                startUpdateCycle(port);

                // Add auto-reconnect logic
                port.onDisconnect.addListener(() => {
                    if (chrome.runtime.lastError) {
                        console.warn('Connection lost:', chrome.runtime.lastError);
                        retryConnection(retryCount);
                    }
                });
            } catch (error) {
                console.error('Connection error:', error);
                retryConnection(retryCount);
            }
        };

        connect();
    } catch (error) {
        console.error('Setup error:', error);
    }
}

function retryConnection(retryCount) {
    port = null;
    clearInterval(updateInterval);
    if (reconnectTimeout) clearTimeout(reconnectTimeout);

    if (retryCount < 3) {
        reconnectTimeout = setTimeout(
            () => setupConnection(retryCount + 1),
            1000 * Math.pow(2, retryCount)
        );
    }
}

function setupMessageHandlers(port) {
    if (!port) return;

    port.onMessage.addListener((msg) => {
        try {
            switch (msg.type) {
                case 'PING':
                    port.postMessage({ type: 'PONG' });
                    break;

                case 'STATUS_UPDATE':
                    if (msg.data) updatePopupUI(msg.data);
                    break;

                case 'API_ERROR':
                    handleApiError(msg.error);
                    break;

                case 'STATS_UPDATE':
                    updateStats(msg.stats);
                    break;

                default:
                    console.warn('Unknown message type:', msg.type);
            }
        } catch (error) {
            console.error('Message handler error:', error);
            showError(error.message);
        }
    });
}

function handleApiError(error) {
    const errorContainer = document.getElementById('error-container');
    if (errorContainer) {
        errorContainer.classList.remove('hidden');
        errorContainer.textContent = `API Error: ${error}`;
        setTimeout(() => {
            errorContainer.classList.add('hidden');
        }, 5000);
    }
}

function updateStats(stats) {
    const elements = {
        analyzedCount: document.getElementById('analyzed-count'),
        successRate: document.getElementById('success-rate')
    };

    if (elements.analyzedCount) {
        elements.analyzedCount.textContent = stats.analyzed || '0';
    }

    if (elements.successRate) {
        const rate = stats.analyzed > 0
            ? Math.round((stats.successful / stats.analyzed) * 100)
            : 0;
        elements.successRate.textContent = `${rate}%`;
    }
}

function startUpdateCycle(port) {
    if (updateInterval) clearInterval(updateInterval);

    // Initial state request
    requestUpdate(port);

    // Setup periodic updates with throttling
    updateInterval = setInterval(() => {
        const now = Date.now();
        if (!lastUpdateTime || now - lastUpdateTime >= UPDATE_THRESHOLD) {
            requestUpdate(port);
        }
    }, 3000);
}

function requestUpdate(port) {
    if (!port) return;

    try {
        port.postMessage({ type: 'GET_INITIAL_STATE' });
        lastUpdateTime = Date.now();
    } catch (e) {
        console.warn('Update request failed:', e);
        setupConnection();
    }
}

async function getCurrentTab() {
    try {
        const tabs = await chrome.tabs.query({
            active: true,
            currentWindow: true
        });

        if (!tabs || tabs.length === 0) {
            throw new Error('No active tab found');
        }
        return tabs[0];
    } catch (error) {
        console.error('Error getting current tab:', error);
        throw new Error('Could not access current tab');
    }
}

async function extractFacebookAccessToken(tab) {
    if (!tab?.id) {
        throw new Error('Invalid tab');
    }

    try {
        const result = await chrome.scripting.executeScript({
            target: { tabId: tab.id },
            func: () => {
                try {
                    // Try to get EAAB token first
                    const ls = window.localStorage;
                    const tokenKeys = Object.keys(ls).filter(key =>
                        key.includes('token') ||
                        key.includes('EAAB') ||
                        key.includes('accessToken')
                    );

                    for (const key of tokenKeys) {
                        const value = ls.getItem(key);
                        if (value && value.includes('EAAB')) {
                            return value.match(/EAAB[^"]+/)[0];
                        }
                    }

                    // Fallback to user ID from cookie
                    const cookieMatch = document.cookie.match(/c_user=([^;]+)/);
                    const userId = cookieMatch ? cookieMatch[1] : null;

                    if (!userId) {
                        throw new Error('Facebook access token not found');
                    }

                    return userId;
                } catch (e) {
                    console.error('Error extracting token:', e);
                    return null;
                }
            }
        });

        if (!result || !result[0]?.result) {
            throw new Error('Could not extract Facebook access token');
        }

        return result[0].result;
    } catch (error) {
        console.error('Script execution error:', error);
        throw new Error('Failed to access Facebook data. Please make sure you are logged in.');
    }
}

async function analyzeFacebookPost(postId, accessToken) {
    try {
        // Get post details from Facebook API
        const postResponse = await fetch(
            `https://graph.facebook.com/v18.0/${postId}?fields=message,comments{message,id}&access_token=${accessToken}`
        );
        const postData = await postResponse.json();

        // Send all text for analysis
        const texts = [postData.message];
        if (postData.comments) {
            texts.push(...postData.comments.data.map(c => c.message));
        }

        // Send to our sentiment API
        const response = await fetch(`${this.API_URL}/batch`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                texts: texts,
                language: 'vi'
            })
        });

        return await response.json();
    } catch (error) {
        console.error('Analysis error:', error);
        throw error;
    }
}

function extractPostId(url) {
    // Try different Facebook URL patterns
    const patterns = [
        /\/posts\/(\d+)/,                    // Standard post URL
        /\/permalink\/(\d+)/,                // Permalink format
        /\?story_fbid=(\d+)/,               // Story format
        /\/photo\.php\?fbid=(\d+)/,         // Photo URL format
        /\/video\.php\?v=(\d+)/,            // Video URL format
        /\/(\d+)(?:\/)?(?:\?|$)/            // Direct ID format
    ];

    for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match && match[1]) {
            return match[1];
        }
    }
    return null;
}

document.addEventListener('DOMContentLoaded', async () => {
    setupConnection();

    // Setup API configuration
    const { apiUrl } = await chrome.storage.local.get('apiUrl');
    if (apiUrl) {
        document.getElementById('apiUrl').value = apiUrl;
    }

    // API configuration save handler
    document.getElementById('saveApiConfig').addEventListener('click', async () => {
        const apiUrl = document.getElementById('apiUrl').value.trim();
        const status = document.getElementById('apiUrlStatus');

        if (!apiUrl) {
            status.textContent = 'Please enter an API URL';
            status.className = 'text-xs text-red-500';
            return;
        }

        try {
            await chrome.storage.local.set({ apiUrl });
            chrome.runtime.sendMessage({ type: 'API_URL_CHANGED', apiUrl });

            status.textContent = 'API URL saved successfully';
            status.className = 'text-xs text-green-500';
            setTimeout(() => status.textContent = '', 3000);
        } catch (error) {
            status.textContent = 'Error saving API URL';
            status.className = 'text-xs text-red-500';
        }
    });

    // Add reset handler for API configuration
    document.getElementById('resetApiConfig').addEventListener('click', async () => {
        const status = document.getElementById('apiUrlStatus');

        try {
            // Clear API URL from storage
            await chrome.storage.local.remove('apiUrl');

            // Reset input field
            document.getElementById('apiUrl').value = '';

            // Notify background script
            chrome.runtime.sendMessage({
                type: 'API_URL_CHANGED',
                apiUrl: 'http://localhost:7270' // Reset to default
            });

            status.textContent = 'Configuration reset successfully';
            status.className = 'text-xs text-green-500';
            setTimeout(() => status.textContent = '', 3000);
        } catch (error) {
            status.textContent = 'Error resetting configuration';
            status.className = 'text-xs text-red-500';
        }
    });

    // Add analyze current post handler
    document.getElementById('analyzeCurrentPost').addEventListener('click', async () => {
        const button = document.getElementById('analyzeCurrentPost');
        const errorContainer = document.getElementById('error-container');

        button.disabled = true;
        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang phân tích...';
        errorContainer.classList.add('hidden');

        try {
            // Get current tab with validation
            const tab = await getCurrentTab();

            if (!tab?.url?.includes('facebook.com')) {
                throw new Error('Vui lòng mở bài viết Facebook để phân tích');
            }

            // Get access token with validation
            const accessToken = await extractFacebookAccessToken(tab);

            // Extract post ID with validation
            const postId = extractPostId(tab.url);
            if (!postId) {
                throw new Error('Không tìm thấy bài viết Facebook trên trang này');
            }

            // Send message with timeout and error handling
            const response = await new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    reject(new Error('Phân tích quá thời gian, vui lòng thử lại'));
                }, 30000); // 30 second timeout

                chrome.tabs.sendMessage(tab.id, {
                    type: 'ANALYZE_POST',
                    postId: postId,
                    accessToken: accessToken
                }, (response) => {
                    clearTimeout(timeout);
                    if (chrome.runtime.lastError) {
                        reject(new Error(chrome.runtime.lastError.message));
                    } else {
                        resolve(response);
                    }
                });
            });

            if (!response?.success) {
                throw new Error(response?.error || 'Phân tích thất bại');
            }

            // Hide error container on success
            errorContainer.classList.add('hidden');

        } catch (error) {
            console.error('Analysis error:', error);
            errorContainer.textContent = error.message;
            errorContainer.classList.remove('hidden');
        } finally {
            // Always reset button state
            button.disabled = false;
            button.textContent = 'Phân tích bài viết này';
        }
    });
});

// Cleanup
window.addEventListener('unload', () => {
    if (updateInterval) clearInterval(updateInterval);
    if (reconnectTimeout) clearTimeout(reconnectTimeout);
    if (port) port.disconnect();
});

async function ensureContentScriptConnection(tab) {
    return new Promise((resolve, reject) => {
        const maxRetries = 5;
        let retryCount = 0;

        const checkConnection = () => {
            chrome.tabs.sendMessage(tab.id, { type: 'PING' }, response => {
                if (chrome.runtime.lastError || !response?.success) {
                    if (retryCount++ < maxRetries) {
                        // Check if script already exists before injecting
                        chrome.scripting.executeScript({
                            target: { tabId: tab.id },
                            func: () => Boolean(window.sentimentAnalyzer)
                        }).then(result => {
                            const exists = result[0]?.result;
                            if (!exists) {
                                // Only inject if not already present
                                chrome.scripting.executeScript({
                                    target: { tabId: tab.id },
                                    files: ['content.js']
                                }).then(() => {
                                    setTimeout(checkConnection, 500);
                                }).catch(reject);
                            } else {
                                setTimeout(checkConnection, 500);
                            }
                        }).catch(reject);
                        return;
                    }
                    reject(new Error('Could not establish connection'));
                    return;
                }
                resolve(true);
            });
        };

        checkConnection();
    });
}

async function analyzeCurrentPost(tab) {
    const button = document.getElementById('analyzeCurrentPost');
    const errorContainer = document.getElementById('error-container');

    try {
        button.disabled = true;
        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang kết nối...';
        errorContainer.classList.add('hidden');

        // Ensure content script is ready
        await ensureContentScriptConnection(tab);

        // Continue with analysis
        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang phân tích...';

        // ...rest of the analysis code...

    } catch (error) {
        console.error('Analysis error:', error);
        errorContainer.textContent = error.message;
        errorContainer.classList.remove('hidden');
    } finally {
        button.disabled = false;
        button.textContent = 'Phân tích bài viết này';
    }
}

async function ensureContentScriptConnection(tab) {
    return new Promise((resolve, reject) => {
        const maxRetries = 5;
        let retryCount = 0;

        const checkConnection = () => {
            chrome.tabs.sendMessage(tab.id, { type: 'PING' }, response => {
                if (chrome.runtime.lastError || !response?.success) {
                    if (retryCount++ < maxRetries) {
                        // Inject content script if needed
                        chrome.scripting.executeScript({
                            target: { tabId: tab.id },
                            files: ['content.js']
                        }).then(() => {
                            setTimeout(checkConnection, 500);
                        }).catch(reject);
                        return;
                    }
                    reject(new Error('Could not establish connection'));
                    return;
                }

                if (!response.ready) {
                    if (retryCount++ < maxRetries) {
                        setTimeout(checkConnection, 500);
                        return;
                    }
                    reject(new Error('Content script not ready'));
                    return;
                }

                resolve(true);
            });
        };

        checkConnection();
    });
}

async function analyzeCurrentPost(tab) {
    const button = document.getElementById('analyzeCurrentPost');
    const errorContainer = document.getElementById('error-container');

    try {
        button.disabled = true;
        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang kết nối...';

        // Ensure connection is ready
        await ensureContentScriptConnection(tab);

        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang phân tích...';

        const postId = extractPostId(tab.url);
        if (!postId) {
            throw new Error('Không tìm thấy bài viết Facebook trên trang này');
        }

        const response = await sendMessageWithRetry(tab.id, {
            type: 'ANALYZE_POST',
            postId: postId
        });

        if (!response?.success) {
            throw new Error(response?.error || 'Phân tích thất bại');
        }

        errorContainer.classList.add('hidden');

    } catch (error) {
        console.error('Analysis error:', error);
        errorContainer.textContent = error.message;
        errorContainer.classList.remove('hidden');
    } finally {
        button.disabled = false;
        button.textContent = 'Phân tích bài viết này';
    }
}

async function sendMessageWithRetry(tabId, message, maxRetries = 3) {
    const requestId = Date.now().toString();
    message.requestId = requestId;

    return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
            cleanup();
            reject(new Error('Quá thời gian chờ phản hồi'));
        }, 30000);

        const responseHandler = (response) => {
            if (response.requestId === requestId) {
                cleanup();
                if (response.success === false) {
                    reject(new Error(response.error || 'Phân tích thất bại'));
                } else {
                    resolve(response);
                }
            }
        };

        const cleanup = () => {
            clearTimeout(timeout);
            chrome.runtime.onMessage.removeListener(responseHandler);
        };

        // Listen for response
        chrome.runtime.onMessage.addListener(responseHandler);

        // Send message
        chrome.tabs.sendMessage(tabId, message, (ack) => {
            if (chrome.runtime.lastError) {
                cleanup();
                reject(new Error(chrome.runtime.lastError.message));
            }
            // Acknowledgment received, waiting for async response
        });
    });
}

async function ensureContentScriptConnection(tab) {
    let retryCount = 0;
    const maxRetries = 5;

    while (retryCount < maxRetries) {
        try {
            const response = await sendMessageWithRetry(tab.id, { type: 'PING' });
            if (response?.success) {
                return true;
            }
        } catch (error) {
            console.warn(`Connection attempt ${retryCount + 1} failed:`, error);

            // Inject content script if needed
            if (retryCount === 0) {
                try {
                    await chrome.scripting.executeScript({
                        target: { tabId: tab.id },
                        files: ['content.js']
                    });
                } catch (injectionError) {
                    console.error('Script injection failed:', injectionError);
                }
            }
        }

        retryCount++;
        if (retryCount < maxRetries) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }

    throw new Error('Could not establish connection to content script');
}

// Update analyze button handler
document.getElementById('analyzeCurrentPost').addEventListener('click', async () => {
    const button = document.getElementById('analyzeCurrentPost');
    const errorContainer = document.getElementById('error-container');

    try {
        button.disabled = true;
        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang xử lý...';
        errorContainer.classList.add('hidden');

        const tab = await getCurrentTab();
        if (!tab?.url?.includes('facebook.com')) {
            throw new Error('Vui lòng mở bài viết Facebook để phân tích');
        }

        await ensureContentScriptConnection(tab);

        const postId = extractPostId(tab.url);
        if (!postId) {
            throw new Error('Không tìm thấy bài viết trên trang này');
        }

        const response = await sendMessageWithRetry(tab.id, {
            type: 'ANALYZE_POST',
            postId: postId
        });

        if (!response.analyzed) {
            throw new Error('Không có nội dung nào được phân tích');
        }

        // Show success message
        errorContainer.textContent = `Đã phân tích ${response.analyzed} nội dung thành công`;
        errorContainer.className = 'mt-2 p-2 rounded-md bg-green-100 text-green-700 text-sm';
        errorContainer.classList.remove('hidden');

    } catch (error) {
        console.error('Analysis error:', error);
        errorContainer.textContent = error.message || 'Có lỗi xảy ra';
        errorContainer.className = 'mt-2 p-2 rounded-md bg-red-100 text-red-700 text-sm';
        errorContainer.classList.remove('hidden');
    } finally {
        button.disabled = false;
        button.textContent = 'Phân tích bài viết này';
    }
});

class PopupAnalytics {
    constructor() {
        this.stats = {
            total: 0,
            successful: 0,
            positive: 0,
            negative: 0,
            neutral: 0
        };
        this.initializeElements();
        this.setupListeners();
    }

    initializeElements() {
        this.elements = {
            totalAnalyzed: document.getElementById('totalAnalyzed'),
            totalSuccessful: document.getElementById('totalSuccessful'),
            totalPositive: document.getElementById('totalPositive'),
            totalNegative: document.getElementById('totalNegative'),
            totalNeutral: document.getElementById('totalNeutral')
        };
    }

    setupListeners() {
        // Listen for stats updates from content script
        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
            if (message.type === 'STATS_UPDATE') {
                this.updateStats(message.stats);
            }
        });

        // Request initial stats
        chrome.runtime.sendMessage({ type: 'GET_STATS' }, (response) => {
            if (response && response.success) {
                this.updateStats(response.stats);
            }
        });
    }

    updateStats(stats) {
        // Update local stats
        Object.assign(this.stats, stats);

        // Update UI
        this.elements.totalAnalyzed.textContent = this.stats.total;
        this.elements.totalSuccessful.textContent = this.stats.successful;
        this.elements.totalPositive.textContent = this.stats.positive;
        this.elements.totalNegative.textContent = this.stats.negative;
        this.elements.totalNeutral.textContent = this.stats.neutral;

        // Add percentage tooltips
        if (this.stats.total > 0) {
            this.elements.totalPositive.setAttribute('title', 
                `${((this.stats.positive / this.stats.total) * 100).toFixed(1)}%`);
            this.elements.totalNegative.setAttribute('title',
                `${((this.stats.negative / this.stats.total) * 100).toFixed(1)}%`);
            this.elements.totalNeutral.setAttribute('title',
                `${((this.stats.neutral / this.stats.total) * 100).toFixed(1)}%`);
        }
    }
}

// Initialize analytics when popup loads
document.addEventListener('DOMContentLoaded', () => {
    window.popupAnalytics = new PopupAnalytics();
});

================
File: extension/src/input.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: extension/style.css
================
.sentiment-analyze-btn {
  background-color: #1877f2;
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  margin: 5px 0;
  transition: background-color 0.2s;
}

.sentiment-analyze-btn:hover {
  background-color: #166fe5;
}

.sentiment-result {
  margin: 5px 0;
  padding: 10px;
  border-radius: 8px;
  background-color: #f0f2f5;
  font-size: 13px;
}

.sentiment-positive {
  border-left: 4px solid #4caf50;
}

.sentiment-neutral {
  border-left: 4px solid #ff9800;
}

.sentiment-negative {
  border-left: 4px solid #f44336;
}

.sentiment-button-container {
  margin: 8px 0;
}

.comment-buttons-wrapper {
    display: flex;
    align-items: center;
    gap: 8px;
}

.sentiment-analyze-btn-inline {
    display: inline-flex;
    align-items: center;
    cursor: pointer;
    color: #65676B;
    font-size: inherit;
    padding: 4px 8px;
    border-radius: 6px;
    transition: background-color 0.2s;
}

.sentiment-analyze-btn-inline:hover {
    background-color: rgba(0, 0, 0, 0.05);
}

.analyze-comments-btn {
    display: flex;
    align-items: center;
    gap: 4px;
}

================
File: extension/tailwind.config.js
================
module.exports = {
  content: ["./**/*.{html,js}"],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
      }
    }
  }
}

================
File: metrics.json
================
{"requests": [], "response_times": [], "errors": [], "start_time": "2024-11-19T13:44:56.930537", "total_requests": 2, "total_errors": 1, "model_performance": {"vi": {"loading_time": 0.0, "inference_times": [], "accuracy": 0.0, "precision": 0.0, "recall": 0.0}, "en": {"loading_time": 0.0, "inference_times": [], "accuracy": 0.0, "precision": 0.0, "recall": 0.0}}}

================
File: notebooks/0.0-init-environment.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initialize Environment for Sentiment Analysis Project\n",
    "\n",
    "Notebook này sẽ:\n",
    "1. Tạo môi trường ảo (venv)\n",
    "2. Cài đặt các dependencies\n",
    "3. Cài đặt Jupyter kernel cho venv\n",
    "4. Tải dữ liệu NLTK cần thiết"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ipython in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (8.29.0)\n",
      "Requirement already satisfied: typing-extensions>=4.6 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (4.12.2)\n",
      "Requirement already satisfied: pygments>=2.4.0 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (2.18.0)\n",
      "Requirement already satisfied: stack-data in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (0.6.3)\n",
      "Requirement already satisfied: matplotlib-inline in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (0.1.7)\n",
      "Requirement already satisfied: colorama in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (0.4.6)\n",
      "Requirement already satisfied: jedi>=0.16 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (0.19.2)\n",
      "Requirement already satisfied: exceptiongroup in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (1.2.2)\n",
      "Requirement already satisfied: traitlets>=5.13.0 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (5.14.3)\n",
      "Requirement already satisfied: decorator in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (5.1.1)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from ipython) (3.0.48)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.4 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from jedi>=0.16->ipython) (0.8.4)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython) (0.2.13)\n",
      "Requirement already satisfied: executing>=1.2.0 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from stack-data->ipython) (2.1.0)\n",
      "Requirement already satisfied: pure-eval in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from stack-data->ipython) (0.2.3)\n",
      "Requirement already satisfied: asttokens>=2.1.0 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from stack-data->ipython) (2.4.1)\n",
      "Requirement already satisfied: six>=1.12.0 in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from asttokens>=2.1.0->stack-data->ipython) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 21.2.3; however, version 24.3.1 is available.\n",
      "You should consider upgrading via the 'c:\\Users\\tamaisme\\Desktop\\Projects\\PYTHON\\PROJECT\\Vietnamese-English-Sentiment-Analysis-System\\venv\\Scripts\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "%pip install ipython\n",
    "\n",
    "import os\n",
    "import sys\n",
    "from IPython.display import display, Markdown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "ℹ️ Virtual environment already exists"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Tạo virtual environment\n",
    "def create_venv():\n",
    "    venv_path = '../venv'\n",
    "    if not os.path.exists(venv_path):\n",
    "        !python -m venv {venv_path}\n",
    "        display(Markdown(\"✅ Virtual environment created at 'venv'\"))\n",
    "    else:\n",
    "        display(Markdown(\"ℹ️ Virtual environment already exists\"))\n",
    "    return venv_path\n",
    "\n",
    "venv_path = create_venv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "✅ Dependencies installed"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cài đặt dependencies trong venv\n",
    "def install_dependencies():\n",
    "    if sys.platform.startswith('win'):\n",
    "        pip_path = os.path.join(venv_path, 'Scripts', 'pip')\n",
    "    else:\n",
    "        pip_path = os.path.join(venv_path, 'bin', 'pip')\n",
    "    \n",
    "    # Cài đặt jupyter trong venv\n",
    "    os.system(f\"{pip_path} install jupyter ipykernel\")\n",
    "    \n",
    "    # Cài đặt project và dependencies\n",
    "    project_path = os.path.abspath(os.path.join(os.getcwd(), '..'))\n",
    "    os.system(f\"{pip_path} install -e {project_path}\")\n",
    "    \n",
    "    display(Markdown(\"✅ Dependencies installed\"))\n",
    "\n",
    "install_dependencies()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "✅ Jupyter kernel installed"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cài đặt Jupyter kernel cho venv\n",
    "def setup_jupyter_kernel():\n",
    "    if sys.platform.startswith('win'):\n",
    "        python_path = os.path.join(venv_path, 'Scripts', 'python')\n",
    "    else:\n",
    "        python_path = os.path.join(venv_path, 'bin', 'python')\n",
    "        \n",
    "    os.system(f\"{python_path} -m ipykernel install --user --name=sentiment_analysis --display-name='Python (Sentiment Analysis)'\")\n",
    "    display(Markdown(\"✅ Jupyter kernel installed\"))\n",
    "\n",
    "setup_jupyter_kernel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting nltk\n",
      "  Using cached nltk-3.9.1-py3-none-any.whl (1.5 MB)\n",
      "Collecting regex>=2021.8.3\n",
      "  Using cached regex-2024.11.6-cp310-cp310-win_amd64.whl (274 kB)\n",
      "Collecting joblib\n",
      "  Using cached joblib-1.4.2-py3-none-any.whl (301 kB)\n",
      "Collecting click\n",
      "  Using cached click-8.1.7-py3-none-any.whl (97 kB)\n",
      "Collecting tqdm\n",
      "  Using cached tqdm-4.67.1-py3-none-any.whl (78 kB)\n",
      "Requirement already satisfied: colorama in c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\venv\\lib\\site-packages (from click->nltk) (0.4.6)\n",
      "Installing collected packages: tqdm, regex, joblib, click, nltk\n",
      "Successfully installed click-8.1.7 joblib-1.4.2 nltk-3.9.1 regex-2024.11.6 tqdm-4.67.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 21.2.3; however, version 24.3.1 is available.\n",
      "You should consider upgrading via the 'c:\\Users\\tamaisme\\Desktop\\Projects\\PYTHON\\PROJECT\\Vietnamese-English-Sentiment-Analysis-System\\venv\\Scripts\\python.exe -m pip install --upgrade pip' command.\n",
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\tamaisme\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\tamaisme\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "✅ NLTK data downloaded"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Tải dữ liệu NLTK cần thiết\n",
    "%pip install nltk\n",
    "\n",
    "def download_nltk_data():\n",
    "    import nltk\n",
    "    nltk.download('punkt')\n",
    "    nltk.download('stopwords')\n",
    "    display(Markdown(\"✅ NLTK data downloaded\"))\n",
    "\n",
    "download_nltk_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hướng dẫn sử dụng\n",
    "\n",
    "1. Sau khi chạy notebook này, restart Jupyter Server\n",
    "2. Khi tạo notebook mới, chọn kernel \"Python (Sentiment Analysis)\"\n",
    "3. Kiểm tra cài đặt bằng cách chạy code sau trong notebook mới:\n",
    "\n",
    "```python\n",
    "import nltk\n",
    "import underthesea\n",
    "print(\"Environment ready!\")\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

================
File: notebooks/1.0-data_labeling.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Labeling Tool for Sentiment Analysis\n",
    "\n",
    "Tool này giúp gán nhãn sentiment cho các câu input và lưu thành file CSV để training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from IPython.display import display, clear_output\n",
    "import ipywidgets as widgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SentimentLabeler:\n",
    "    def __init__(self, language):\n",
    "        self.language = language\n",
    "        self.data = []\n",
    "        self.setup_widgets()\n",
    "        \n",
    "    def setup_widgets(self):\n",
    "        self.text_input = widgets.Textarea(\n",
    "            placeholder='Nhập văn bản cần gán nhãn ở đây...' if self.language == 'vi' else 'Enter text to label here...',\n",
    "            layout={'width': '100%', 'height': '100px'}\n",
    "        )\n",
    "        \n",
    "        self.label_buttons = [\n",
    "            widgets.Button(description='Tích cực / Positive', button_style='success'),\n",
    "            widgets.Button(description='Tiêu cực / Negative', button_style='danger'),\n",
    "            widgets.Button(description='Trung tính / Neutral', button_style='info')\n",
    "        ]\n",
    "        \n",
    "        for btn in self.label_buttons:\n",
    "            btn.on_click(self.on_button_clicked)\n",
    "        \n",
    "        self.save_button = widgets.Button(\n",
    "            description='Lưu dữ liệu / Save data',\n",
    "            button_style='warning'\n",
    "        )\n",
    "        self.save_button.on_click(self.save_data)\n",
    "        \n",
    "        self.output = widgets.Output()\n",
    "        \n",
    "    def display(self):\n",
    "        display(self.text_input)\n",
    "        display(widgets.HBox(self.label_buttons))\n",
    "        display(self.save_button)\n",
    "        display(self.output)\n",
    "        \n",
    "    def on_button_clicked(self, btn):\n",
    "        text = self.text_input.value.strip()\n",
    "        if not text:\n",
    "            return\n",
    "            \n",
    "        label_map = {\n",
    "            'Tích cực / Positive': 'positive',\n",
    "            'Tiêu cực / Negative': 'negative',\n",
    "            'Trung tính / Neutral': 'neutral'\n",
    "        }\n",
    "        \n",
    "        self.data.append({\n",
    "            'text': text,\n",
    "            'label': label_map[btn.description]\n",
    "        })\n",
    "        \n",
    "        with self.output:\n",
    "            clear_output()\n",
    "            print(f\"Đã gán nhãn {len(self.data)} câu\" if self.language == 'vi' else f\"Labeled {len(self.data)} sentences\")\n",
    "            \n",
    "        self.text_input.value = ''\n",
    "        \n",
    "    def save_data(self, btn):\n",
    "        if not self.data:\n",
    "            return\n",
    "            \n",
    "        df = pd.DataFrame(self.data)\n",
    "        \n",
    "        # Ensure data directory exists\n",
    "        os.makedirs('../data/raw', exist_ok=True)\n",
    "        \n",
    "        # Save to CSV\n",
    "        output_path = f'../data/raw/{self.language}_social_media_manual.csv'\n",
    "        \n",
    "        # If file exists, append to it\n",
    "        if os.path.exists(output_path):\n",
    "            existing_df = pd.read_csv(output_path)\n",
    "            df = pd.concat([existing_df, df], ignore_index=True)\n",
    "        \n",
    "        df.to_csv(output_path, index=False)\n",
    "        \n",
    "        with self.output:\n",
    "            clear_output()\n",
    "            print(f\"Đã lưu {len(df)} câu vào {output_path}\" if self.language == 'vi' \n",
    "                  else f\"Saved {len(df)} sentences to {output_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gán nhãn cho Tiếng Việt / Vietnamese Labeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "efa2d001d8d34bcb92ad9f8c5eee3ed7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Textarea(value='', layout=Layout(height='100px', width='100%'), placeholder='Nhập văn bản cần gán nhãn ở đây..…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b009a31b0304491fb9c612c0246d8ef7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(Button(button_style='success', description='Tích cực / Positive', style=ButtonStyle()), Button(…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5db87944ebe24d24960f81e39a41c3e2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Button(button_style='warning', description='Lưu dữ liệu / Save data', style=ButtonStyle())"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e6111b751db54876859f23bb541a284e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vi_labeler = SentimentLabeler('vi')\n",
    "vi_labeler.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gán nhãn cho Tiếng Anh / English Labeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "719f33b627df48d59de15d2f06201db1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Textarea(value='', layout=Layout(height='100px', width='100%'), placeholder='Enter text to label here...')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1504f750d6f442ad8a21f88d92c3a5bf",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(Button(button_style='success', description='Tích cực / Positive', style=ButtonStyle()), Button(…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "84e43e2b91bc464caf45e2f8f9e64a73",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Button(button_style='warning', description='Lưu dữ liệu / Save data', style=ButtonStyle())"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8a1df89cb17947c28f98a942ec6fc93c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "en_labeler = SentimentLabeler('en')\n",
    "en_labeler.display()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

================
File: notebooks/continue_training.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Continue Training Sentiment Analysis Model\n",
    "\n",
    "Notebook này cho phép:\n",
    "1. Khôi phục model từ checkpoint\n",
    "2. Tiếp tục train với dữ liệu mới\n",
    "3. Đánh giá và lưu kết quả training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "project_root = os.path.dirname(os.path.dirname(os.path.abspath('')))\n",
    "sys.path.append(project_root)\n",
    "\n",
    "from src.config import Config\n",
    "from src.models.model_trainer import EnhancedModelTrainer\n",
    "from src.data.data_loader import DataLoader\n",
    "from src.data.preprocessor import DataPreprocessor\n",
    "from src.features.feature_engineering import FeatureExtractor\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import display, Markdown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded feature extractor with None dimensions\n"
     ]
    }
   ],
   "source": [
    "# Khởi tạo config và components\n",
    "config = Config()\n",
    "language = 'vi'  # hoặc 'en'\n",
    "\n",
    "trainer = EnhancedModelTrainer(language, config)\n",
    "preprocessor = DataPreprocessor(language, config)\n",
    "feature_extractor = FeatureExtractor(language, config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "## Available Checkpoints"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. vi_checkpoint.pkl\n",
      "   Timestamp: Unknown\n",
      "   Epoch: Unknown\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported format string passed to NoneType.__format__",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 9\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m   Timestamp: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcp[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtimestamp\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m   Epoch: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcp[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mepoch\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m----> 9\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m   Score: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcp[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmetrics\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.4f if cp[\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmetrics\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m] else \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mN/A\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported format string passed to NoneType.__format__"
     ]
    }
   ],
   "source": [
    "# Liệt kê các checkpoints có sẵn\n",
    "checkpoints = trainer.list_checkpoints()\n",
    "\n",
    "display(Markdown(\"## Available Checkpoints\"))\n",
    "for i, cp in enumerate(checkpoints):\n",
    "    print(f\"{i+1}. {cp['filename']}\")\n",
    "    print(f\"   Timestamp: {cp['timestamp']}\")\n",
    "    print(f\"   Epoch: {cp['epoch']}\")\n",
    "    print(f\"   Score: {cp['metrics']:.4f if cp['metrics'] else 'N/A'}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[6], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Chọn checkpoint để tiếp tục train\u001b[39;00m\n\u001b[0;32m      2\u001b[0m checkpoint_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter checkpoint number (or press Enter for latest): \u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;241m0\u001b[39m) \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m----> 3\u001b[0m num_epochs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mEnter number of epochs to train: \u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;241m0\u001b[39m \u001b[38;5;241m<\u001b[39m\u001b[38;5;241m=\u001b[39m checkpoint_idx \u001b[38;5;241m<\u001b[39m \u001b[38;5;28mlen\u001b[39m(checkpoints):\n\u001b[0;32m      6\u001b[0m     checkpoint_name \u001b[38;5;241m=\u001b[39m checkpoints[checkpoint_idx][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfilename\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "# Chọn checkpoint để tiếp tục train\n",
    "checkpoint_idx = int(input(\"Enter checkpoint number (or press Enter for latest): \") or 0) - 1\n",
    "num_epochs = int(input(\"Enter number of epochs to train: \"))\n",
    "\n",
    "if 0 <= checkpoint_idx < len(checkpoints):\n",
    "    checkpoint_name = checkpoints[checkpoint_idx]['filename']\n",
    "else:\n",
    "    checkpoint_name = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tải dữ liệu training\n",
    "train_file = input(\"Enter training data file path: \")\n",
    "df = pd.read_csv(train_file)\n",
    "\n",
    "# Tiền xử lý dữ liệu\n",
    "processed_df = preprocessor.preprocess(df)\n",
    "print(f\"\\nProcessed {len(processed_df)} samples\")\n",
    "\n",
    "# Chuẩn bị features và labels\n",
    "X_train = processed_df[\"cleaned_text\"] \n",
    "y_train = processed_df[\"label\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tiếp tục training\n",
    "model, metrics = trainer.continue_training(\n",
    "    X_train=X_train,\n",
    "    y_train=y_train, \n",
    "    checkpoint_name=checkpoint_name,\n",
    "    num_epochs=num_epochs\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hiển thị kết quả training\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "for model_name, model_metrics in metrics['models'].items():\n",
    "    plt.figure(figsize=(10,5))\n",
    "    \n",
    "    train_scores = model_metrics['train_scores']\n",
    "    valid_scores = model_metrics['valid_scores']\n",
    "    epochs = range(1, len(train_scores) + 1)\n",
    "    \n",
    "    plt.plot(epochs, train_scores, 'o-', label='Training')\n",
    "    plt.plot(epochs, valid_scores, 's--', label='Validation')\n",
    "    \n",
    "    plt.title(f'{model_name} Learning Curves')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Score')\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "    \n",
    "    print(f\"\\n{model_name} Final Metrics:\")\n",
    "    print(f\"Best Score: {model_metrics['best_score']:.4f}\")\n",
    "    print(f\"Training Time: {model_metrics['training_time']:.2f}s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hướng dẫn sử dụng\n",
    "\n",
    "1. Chọn ngôn ngữ ('vi' hoặc 'en') trong cell thứ 2\n",
    "2. Chọn checkpoint muốn tiếp tục train từ danh sách\n",
    "3. Nhập số epoch muốn train thêm \n",
    "4. Nhập đường dẫn file dữ liệu training (.csv)\n",
    "5. Theo dõi quá trình training và kết quả\n",
    "\n",
    "Model và metrics sẽ được tự động lưu theo checkpoint."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

================
File: notebooks/sentiment_analysis_pipeline.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sentiment Analysis Pipeline\n",
    "Notebook này thực hiện toàn bộ quy trình từ xử lý dữ liệu thô đến training và đánh giá model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "\n",
    "# Add project root to path\n",
    "project_root = os.path.dirname(os.getcwd())\n",
    "sys.path.append(project_root)\n",
    "\n",
    "# Import các module cần thiết\n",
    "from src.config import Config\n",
    "from src.data.data_loader import DataLoader\n",
    "from src.data.preprocessor import DataPreprocessor \n",
    "from src.features.feature_engineering import FeatureExtractor\n",
    "from src.models.model_trainer import EnhancedModelTrainer\n",
    "from src.models.model_predictor import SentimentPredictor\n",
    "from src.utils.evaluation import ModelEvaluator\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import joblib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Cấu hình và Khởi tạo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded feature extractor with None dimensions\n"
     ]
    }
   ],
   "source": [
    "# Khởi tạo config\n",
    "config = Config()\n",
    "\n",
    "# Chọn ngôn ngữ\n",
    "language = 'vi'  # hoặc 'en'\n",
    "\n",
    "# Khởi tạo các component\n",
    "data_loader = DataLoader(config)\n",
    "preprocessor = DataPreprocessor(language, config)\n",
    "feature_extractor = FeatureExtractor(language, config)\n",
    "model_trainer = EnhancedModelTrainer(language, config)\n",
    "evaluator = ModelEvaluator(language)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Load và Xử lý Dữ liệu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Info:\n",
      "Total samples: 10000\n",
      "\n",
      "Class distribution:\n",
      "No label column found in the dataset\n",
      "2024-11-27 14:11:48,315 - src.data.preprocessor - INFO - Preprocessing vi data...\n",
      "2024-11-27 14:11:53,383 - src.data.preprocessor - INFO - Preprocessed 7700 valid samples\n",
      "2024-11-27 14:11:53,406 - src.data.preprocessor - INFO - Saved processed data to c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\data\\processed\\vi_processed.csv\n",
      "2024-11-27 14:11:53,408 - src.data.data_loader - INFO - Class distribution before split: {0: 0.4944155844155844, 2: 0.39025974025974025, 1: 0.11532467532467533}\n",
      "2024-11-27 14:11:53,413 - src.data.data_loader - INFO - Training set size: 5390 samples\n",
      "2024-11-27 14:11:53,413 - src.data.data_loader - INFO - Test set size: 2310 samples\n",
      "2024-11-27 14:11:53,414 - src.data.data_loader - INFO - Training distribution: {0: 0.49443413729128016, 2: 0.3901669758812616, 1: 0.11539888682745826}\n",
      "2024-11-27 14:11:53,415 - src.data.data_loader - INFO - Test distribution: {0: 0.49437229437229435, 2: 0.3904761904761905, 1: 0.11515151515151516}\n",
      "2024-11-27 14:11:53,416 - src.data.data_loader - INFO - Using 5390 valid samples after NaN removal\n",
      "2024-11-27 14:11:53,417 - src.data.data_loader - INFO - Using 2310 valid samples after NaN removal\n"
     ]
    }
   ],
   "source": [
    "# Load raw data\n",
    "file_path = os.path.join(config.DATA_DIR, 'raw', f'{language}_social_media.csv')\n",
    "df = data_loader.load_data(file_path)\n",
    "\n",
    "# Hiển thị thông tin cơ bản\n",
    "print(\"Dataset Info:\")\n",
    "print(f\"Total samples: {len(df)}\")\n",
    "print(\"\\nClass distribution:\")\n",
    "\n",
    "# checking if labels is exists in the dataset\n",
    "if 'label' in df.columns:\n",
    "    print(df['label'].value_counts())\n",
    "else:\n",
    "    print(\"No label column found in the dataset\")\n",
    "\n",
    "# Preprocess data\n",
    "processed_df = preprocessor.preprocess(df)\n",
    "\n",
    "# Save processed data to file\n",
    "processed_data_path = os.path.join(config.DATA_DIR, 'processed', f'{language}_processed.csv')\n",
    "preprocessor.save_processed_data(processed_df, processed_data_path)\n",
    "\n",
    "# Split data\n",
    "train_df, test_df = data_loader.split_data(processed_df)\n",
    "\n",
    "# Get features and labels\n",
    "X_train, y_train = data_loader.get_features_and_labels(train_df)\n",
    "X_test, y_test = data_loader.get_features_and_labels(test_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Phân tích Dữ liệu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Phân tích độ dài văn bản\n",
    "plt.figure(figsize=(10, 5))\n",
    "text_lengths = processed_df['cleaned_text'].str.len()\n",
    "sns.histplot(text_lengths)\n",
    "plt.title('Text Length Distribution')\n",
    "plt.show()\n",
    "\n",
    "# Phân tích phân phối nhãn\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.countplot(data=processed_df, x='label')\n",
    "plt.title('Label Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Word features shape: (5390, 2000)\n",
      "Char features shape: (5390, 500)\n",
      "Tfidf features shape: (5390, 2000)\n",
      "Linguistic features shape: (5390, 6)\n",
      "Emotion features shape: (5390, 15)\n",
      "All features shape after hstack: (5390, 4521)\n",
      "Word features shape: (2310, 2000)\n",
      "Char features shape: (2310, 500)\n",
      "Tfidf features shape: (2310, 2000)\n",
      "Linguistic features shape: (2310, 6)\n",
      "Emotion features shape: (2310, 15)\n",
      "All features shape after hstack: (2310, 4521)\n",
      "Feature shapes:\n",
      "Training features: (5390, 4521)\n",
      "Testing features: (2310, 4521)\n"
     ]
    }
   ],
   "source": [
    "# Extract features\n",
    "X_train_features = feature_extractor.extract_features(X_train)\n",
    "X_test_features = feature_extractor.extract_features(X_test)\n",
    "\n",
    "print(\"Feature shapes:\")\n",
    "print(f\"Training features: {X_train_features.shape}\")\n",
    "print(f\"Testing features: {X_test_features.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Training Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-11-27 14:16:54,868 - src.models.model_trainer - INFO - Starting model training...\n",
      "Word features shape: (5390, 2000)\n",
      "Char features shape: (5390, 500)\n",
      "Tfidf features shape: (5390, 2000)\n",
      "Linguistic features shape: (5390, 6)\n",
      "Emotion features shape: (5390, 15)\n",
      "All features shape after hstack: (5390, 4521)\n",
      "Word features shape: (5390, 2000)\n",
      "Char features shape: (5390, 500)\n",
      "Tfidf features shape: (5390, 2000)\n",
      "Linguistic features shape: (5390, 6)\n",
      "Emotion features shape: (5390, 15)\n",
      "All features shape after hstack: (5390, 4521)\n",
      "2024-11-27 14:16:56,885 - src.models.model_trainer - INFO - \n",
      "Training rf model...\n",
      "2024-11-27 14:17:23,945 - src.models.model_trainer - INFO - Fold 1/10 - Train: 0.6697, Val: 0.6960\n",
      "2024-11-27 14:17:49,916 - src.models.model_trainer - INFO - Fold 2/10 - Train: 0.6745, Val: 0.6497\n",
      "2024-11-27 14:18:16,042 - src.models.model_trainer - INFO - Fold 3/10 - Train: 0.6724, Val: 0.6591\n",
      "2024-11-27 14:18:41,361 - src.models.model_trainer - INFO - Fold 4/10 - Train: 0.6723, Val: 0.6581\n",
      "2024-11-27 14:19:06,757 - src.models.model_trainer - INFO - Fold 5/10 - Train: 0.6736, Val: 0.6619\n",
      "2024-11-27 14:19:33,067 - src.models.model_trainer - INFO - Fold 6/10 - Train: 0.6764, Val: 0.6431\n",
      "2024-11-27 14:19:33,069 - src.models.model_trainer - INFO - Early stopping triggered at fold 6\n",
      "2024-11-27 14:20:02,405 - src.models.model_trainer - INFO - rf Final Scores:\n",
      "Best validation score: 0.6960\n",
      "Final training score: 0.6764\n",
      "2024-11-27 14:20:02,406 - src.models.model_trainer - INFO - \n",
      "Training svm model...\n",
      "2024-11-27 14:20:03,141 - src.models.model_trainer - INFO - Fold 1/10 - Train: 0.9309, Val: 0.7015\n",
      "2024-11-27 14:20:03,891 - src.models.model_trainer - INFO - Fold 2/10 - Train: 0.9307, Val: 0.7024\n",
      "2024-11-27 14:20:04,669 - src.models.model_trainer - INFO - Fold 3/10 - Train: 0.9366, Val: 0.6778\n",
      "2024-11-27 14:20:05,396 - src.models.model_trainer - INFO - Fold 4/10 - Train: 0.9316, Val: 0.6738\n",
      "2024-11-27 14:20:06,102 - src.models.model_trainer - INFO - Fold 5/10 - Train: 0.9338, Val: 0.6671\n",
      "2024-11-27 14:20:06,798 - src.models.model_trainer - INFO - Fold 6/10 - Train: 0.9368, Val: 0.6648\n",
      "2024-11-27 14:20:07,550 - src.models.model_trainer - INFO - Fold 7/10 - Train: 0.9358, Val: 0.6949\n",
      "2024-11-27 14:20:07,551 - src.models.model_trainer - INFO - Early stopping triggered at fold 7\n",
      "2024-11-27 14:20:08,187 - src.models.model_trainer - INFO - svm Final Scores:\n",
      "Best validation score: 0.7024\n",
      "Final training score: 0.9358\n",
      "2024-11-27 14:20:08,188 - src.models.model_trainer - INFO - \n",
      "Training nb model...\n",
      "2024-11-27 14:20:08,632 - src.models.model_trainer - INFO - Fold 1/10 - Train: 0.7643, Val: 0.7335\n",
      "2024-11-27 14:20:09,096 - src.models.model_trainer - INFO - Fold 2/10 - Train: 0.7610, Val: 0.7007\n",
      "2024-11-27 14:20:09,524 - src.models.model_trainer - INFO - Fold 3/10 - Train: 0.7654, Val: 0.6833\n",
      "2024-11-27 14:20:09,954 - src.models.model_trainer - INFO - Fold 4/10 - Train: 0.7677, Val: 0.7181\n",
      "2024-11-27 14:20:10,382 - src.models.model_trainer - INFO - Fold 5/10 - Train: 0.7703, Val: 0.6953\n",
      "2024-11-27 14:20:10,806 - src.models.model_trainer - INFO - Fold 6/10 - Train: 0.7653, Val: 0.6748\n",
      "2024-11-27 14:20:10,806 - src.models.model_trainer - INFO - Early stopping triggered at fold 6\n",
      "2024-11-27 14:20:11,037 - src.models.model_trainer - INFO - nb Final Scores:\n",
      "Best validation score: 0.7335\n",
      "Final training score: 0.7653\n",
      "2024-11-27 14:20:11,496 - src.models.model_trainer - INFO - Saved final model to c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\data\\models\\vi_sentiment_model.pkl\n",
      "Checkpoint saved at c:\\users\\tamaisme\\desktop\\projects\\python\\project\\vietnamese-english-sentiment-analysis-system\\data\\models\\vi_checkpoint.pkl\n",
      "Best model: rf\n",
      "Best score: 0.0000\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Train models\n",
    "models = model_trainer.train_with_grid_search(X_train, y_train)\n",
    "\n",
    "# Check if models is not None\n",
    "if models:\n",
    "    # Save checkpoint\n",
    "    checkpoint_path = os.path.join(config.DATA_DIR, 'checkpoints', f'{language}_checkpoint.pkl')\n",
    "    joblib.dump(models, checkpoint_path)\n",
    "    print(f\"Checkpoint saved at {checkpoint_path}\")\n",
    "\n",
    "    # Get best model performance\n",
    "    best_model_name = max(models.items(), key=lambda x: getattr(x[1], 'best_score_', 0))[0]\n",
    "    best_model = models[best_model_name]\n",
    "\n",
    "    print(f\"Best model: {best_model_name}\")\n",
    "    print(f\"Best score: {getattr(best_model, 'best_score_', 0):.4f}\")\n",
    "else:\n",
    "    print(\"No models were trained.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Đánh giá Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded feature extractor with None dimensions\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.81      0.77      1142\n",
      "           1       0.22      0.22      0.22       266\n",
      "           2       0.80      0.71      0.75       902\n",
      "\n",
      "    accuracy                           0.70      2310\n",
      "   macro avg       0.59      0.58      0.58      2310\n",
      "weighted avg       0.71      0.70      0.70      2310\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize predictor\n",
    "predictor = SentimentPredictor(language, config)\n",
    "\n",
    "# Make predictions\n",
    "predictions = predictor.predict(X_test_features)\n",
    "probabilities = predictor.predict_proba(X_test_features)\n",
    "\n",
    "# Modified evaluation code to handle multiclass\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n",
    "import numpy as np\n",
    "\n",
    "# Basic metrics\n",
    "results = {\n",
    "    'classification_report': classification_report(y_test, predictions),\n",
    "    'confusion_matrix': confusion_matrix(y_test, predictions)\n",
    "}\n",
    "\n",
    "# Display results\n",
    "print(\"Classification Report:\")\n",
    "print(results['classification_report'])\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(results['confusion_matrix'], annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Plot ROC curves for each class\n",
    "n_classes = probabilities.shape[1]\n",
    "plt.figure(figsize=(10, 8))\n",
    "\n",
    "# Compute ROC curve and ROC area for each class\n",
    "for i in range(n_classes):\n",
    "    # Convert to one-vs-rest binary format\n",
    "    y_test_binary = (y_test == i).astype(int)\n",
    "    \n",
    "    # Compute ROC curve\n",
    "    fpr, tpr, _ = roc_curve(y_test_binary, probabilities[:, i])\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    \n",
    "    # Plot ROC curve\n",
    "    plt.plot(fpr, tpr, label=f'Class {i} (AUC = {roc_auc:.2f})')\n",
    "\n",
    "plt.plot([0, 1], [0, 1], 'k--')  # diagonal line\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Multiclass ROC Curves (One-vs-Rest)')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Thử nghiệm Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-11-27 14:15:24,635 - src.data.preprocessor - INFO - Preprocessing vi data...\n",
      "2024-11-27 14:15:24,638 - src.data.preprocessor - INFO - Preprocessed 1 valid samples\n",
      "Word features shape: (1, 2000)\n",
      "Char features shape: (1, 500)\n",
      "Tfidf features shape: (1, 2000)\n",
      "Linguistic features shape: (1, 6)\n",
      "Emotion features shape: (1, 15)\n",
      "All features shape after hstack: (1, 4521)\n",
      "\n",
      "Text: Sản phẩm rất tốt, tôi rất thích\n",
      "Sentiment: 2\n",
      "Confidence: 0.7801\n",
      "Emotion: happy (vui vẻ) 😊\n",
      "2024-11-27 14:15:24,832 - src.data.preprocessor - INFO - Preprocessing vi data...\n",
      "2024-11-27 14:15:24,835 - src.data.preprocessor - INFO - Preprocessed 1 valid samples\n",
      "Word features shape: (1, 2000)\n",
      "Char features shape: (1, 500)\n",
      "Tfidf features shape: (1, 2000)\n",
      "Linguistic features shape: (1, 6)\n",
      "Emotion features shape: (1, 15)\n",
      "All features shape after hstack: (1, 4521)\n",
      "\n",
      "Text: Chất lượng kém, không đáng tiền\n",
      "Sentiment: 0\n",
      "Confidence: 0.4659\n",
      "Emotion: disappointed (thất vọng) 😞\n",
      "2024-11-27 14:15:25,034 - src.data.preprocessor - INFO - Preprocessing vi data...\n",
      "2024-11-27 14:15:25,037 - src.data.preprocessor - INFO - Preprocessed 1 valid samples\n",
      "Word features shape: (1, 2000)\n",
      "Char features shape: (1, 500)\n",
      "Tfidf features shape: (1, 2000)\n",
      "Linguistic features shape: (1, 6)\n",
      "Emotion features shape: (1, 15)\n",
      "All features shape after hstack: (1, 4521)\n",
      "\n",
      "Text: Tạm được, không tốt không xấu\n",
      "Sentiment: 2\n",
      "Confidence: 0.3811\n",
      "Emotion: happy (vui vẻ) 😊\n"
     ]
    }
   ],
   "source": [
    "# Test with sample texts\n",
    "test_texts = [\n",
    "    \"Sản phẩm rất tốt, tôi rất thích\",\n",
    "    \"Chất lượng kém, không đáng tiền\",\n",
    "    \"Tạm được, không tốt không xấu\"\n",
    "]\n",
    "\n",
    "# Process and predict\n",
    "for text in test_texts:\n",
    "    # Preprocess\n",
    "    df = pd.DataFrame({'text': [text]})\n",
    "    processed = preprocessor.preprocess(df)\n",
    "    \n",
    "    # Extract features\n",
    "    features = feature_extractor.extract_features(processed['cleaned_text'])\n",
    "    \n",
    "    # Get prediction with emotion\n",
    "    result = predictor.predict_emotion(features, text)\n",
    "    \n",
    "    # Display results\n",
    "    print(f\"\\nText: {text}\")\n",
    "    print(f\"Sentiment: {result['sentiment']}\")\n",
    "    print(f\"Confidence: {result['sentiment_confidence']:.4f}\")\n",
    "    print(f\"Emotion: {result['emotion']} ({result['emotion_vi']}) {result['emotion_emoji']}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Phân tích Hiệu năng chi tiết"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lấy metrics từ model_info\n",
    "model_path = os.path.join(config.DATA_DIR, \"models\", f\"{language}_sentiment_model.pkl\")\n",
    "model_info = joblib.load(model_path)\n",
    "metrics = model_info['metrics']\n",
    "\n",
    "# Hiển thị training history\n",
    "if 'training_history' in metrics:\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    for model_name, history in metrics['training_history'].items():\n",
    "        plt.plot(history['train_scores'], 'o-', label=f'{model_name}_train')\n",
    "        plt.plot(history['valid_scores'], 's--', label=f'{model_name}_val')\n",
    "    \n",
    "    plt.title('Training History')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Score')\n",
    "    plt.legend()\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    plt.show()\n",
    "\n",
    "# Hiển thị feature importance nếu có\n",
    "if models and 'rf' in models and hasattr(models['rf'], 'feature_importances_'):\n",
    "    importances = models['rf'].feature_importances_\n",
    "    plt.figure(figsize=(10, 4))\n",
    "    plt.bar(range(len(importances)), importances)\n",
    "    plt.title('Feature Importance')\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

================
File: README.md
================
# Vietnamese-English Sentiment Analysis System

A robust machine learning system for sentiment analysis supporting both Vietnamese and English text, built with advanced NLP techniques and ensemble learning.

## Key Features

- **Multilingual Support**: Vietnamese and English language processing
- **Advanced Text Processing**:
  - Intelligent text cleaning
  - Stop word removal
  - Language-specific tokenization
- **Feature Engineering**:
  - TF-IDF vectorization
  - SVD dimensionality reduction
  - Statistical feature extraction
- **Ensemble Learning**:
  - Random Forest
  - Linear SVC
  - Naive Bayes
- **Data Augmentation**:
  - Synonym replacement
  - Random swap
  - Random deletion
  - Random insertion

## Directory Structure
```
sentiment_analysis/
├── data/
│ ├── raw/ # Raw input data
│ ├── processed/ # Processed data
│ └── models/ # Trained model files
├── src/
│ ├── config.py # Configuration settings
│ ├── main.py # Main application entry point
│ ├── data/ # Data handling modules
│ ├── features/ # Feature engineering
│ ├── models/ # Model training and prediction
│ └── utils/ # Utility functions
├── scripts/
│ ├── generate_training_data.py
│ └── train_models.py
└── requirements.txt
```

## Installation

1. Clone the repository:

```bash
git clone https://github.com/yourusername/sentiment_analysis.git
cd sentiment_analysis
```

2. Create a virtual environment (optional but recommended):

```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows
```

3. Install dependencies:

```bash
pip install -r requirements.txt
```

## Usage

1. Data Generation
   Generate training data for both languages:

```bash
python scripts/generate_training_data.py --language vi --output data/processed/vi_processed_data.csv
python scripts/generate_training_data.py --language en --output data/processed/en_processed_data.csv
```

2. Model Training Train models for both languages:

```bash
python scripts/train_models.py --language vi --output models/vi_model.pkl
python scripts/train_models.py --language en --output models/en_model.pkl
```

3. Sentiment Analysis
   The main application supports three modes:

   - **Training Mode**: Train the model with new data.
   - **Prediction Mode**: Predict sentiment for new input text.
   - **Evaluation Mode**: Evaluate the model performance on test data.

4. Input Data Format
   The input CSV files should have the following format:

   ```csv
   text,label
   "This is a positive review",positive
   "This is a negative review",negative
   ```

## Model Performance

Current model performance metrics:

| Language   | Accuracy | F1-Score | Precision | Recall |
| ---------- | -------- | -------- | --------- | ------ |
| English    | 0.85     | 0.84     | 0.83      | 0.85   |
| Vietnamese | 0.82     | 0.81     | 0.80      | 0.82   |

## Requirements

- Python 3.8+
- scikit-learn
- pandas
- numpy
- underthesea (for Vietnamese)
- nltk
- textaugment
- seaborn
- matplotlib

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details

================
File: run_api.py
================
import uvicorn
from src.config import Config

def main():
    config = Config()
    # Only use supported uvicorn.run() parameters
    uvicorn.run(
        "src.api.app:app",
        host=config.API_CONFIG['HOST'],
        port=config.API_CONFIG['PORT'],
        workers=config.API_CONFIG['WORKERS'],
        reload=config.API_CONFIG['RELOAD'],
        log_level="info",
        limit_concurrency=100
    )

if __name__ == "__main__":
    main()

================
File: scripts/data_collection_cli.py
================
from src.config import Config
from src.data.data_collection import DataCollector
import argparse
import pandas as pd

def main():
    parser = argparse.ArgumentParser(description='Thu thập dữ liệu đánh giá')
    parser.add_argument('--source', type=str, required=True,
                      choices=['google_play', 'shopee', 'facebook', 'manual'],
                      help='Nguồn dữ liệu cần thu thập')
    parser.add_argument('--app_id', type=str, help='ID ứng dụng Google Play')
    parser.add_argument('--product_ids', type=str, help='ID sản phẩm Shopee (phân cách bằng dấu phẩy)')
    parser.add_argument('--post_ids', type=str, help='ID bài đăng Facebook (phân cách bằng dấu phẩy)')
    parser.add_argument('--access_token', type=str, help='Facebook API access token')
    parser.add_argument('--input_file', type=str, help='Đường dẫn file Excel/CSV chứa đánh giá')
    parser.add_argument('--count', type=int, default=100, help='Số lượng đánh giá cần thu thập')
    
    args = parser.parse_args()
    config = Config()
    collector = DataCollector(config)
    
    if args.source == 'google_play':
        if not args.app_id:
            print("Vui lòng cung cấp app_id")
            return
        df = collector.collect_google_play_reviews(args.app_id, count=args.count)
        
    elif args.source == 'shopee':
        if not args.product_ids:
            print("Vui lòng cung cấp product_ids")
            return
        product_ids = args.product_ids.split(',')
        df = collector.collect_shopee_reviews(product_ids, max_reviews=args.count)
        
    elif args.source == 'facebook':
        if not args.post_ids or not args.access_token:
            print("Vui lòng cung cấp post_ids và access_token")
            return
        post_ids = args.post_ids.split(',')
        df = collector.collect_facebook_comments(post_ids, args.access_token)
        
    elif args.source == 'manual':
        if not args.input_file:
            print("Vui lòng cung cấp input_file")
            return
        df = collector.collect_manual_reviews(args.input_file)
    
    if not df.empty:
        collector.save_collected_data(df, args.source)

if __name__ == "__main__":
    main()

================
File: scripts/generate_training_data.py
================
import argparse
import random
import pandas as pd
from sklearn.utils import resample
import sys
import os

from src.utils.templates import CommentTemplates

# Add project root to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.config import Config
from src.data.data_loader import DataLoader
from src.data.preprocessor import DataPreprocessor
from src.utils.logger import Logger
from src.utils.augmentation import TextAugmenter


class TrainingDataGenerator:
    def __init__(self, language: str, config: Config, num_samples: int = 1000):
        self.language = language
        self.config = config
        self.num_samples = num_samples
        self.logger = Logger(__name__).logger
        self.data_loader = DataLoader(config)
        self.preprocessor = DataPreprocessor(language, config)
        self.eda = TextAugmenter()

    def generate_natural_variation(self, text: str, label: int):
        """Tạo biến thể tự nhiên cho văn bản"""
        templates = CommentTemplates()
        
        # Thêm opening/closing ngẫu nhiên
        if random.random() < 0.7:  # 70% chance
            text = f"{random.choice(templates.natural_expressions['opening'])}, {text}"
        if random.random() < 0.5:  # 50% chance
            text = f"{text}. {random.choice(templates.natural_expressions['closing'])}"
            
        # Thêm emoji phù hợp
        sentiment = {0: 'negative', 1: 'neutral', 2: 'positive'}[label]
        if random.random() < 0.8:  # 80% chance
            emojis = templates.emojis[sentiment]
            emoji_count = random.randint(1, 3)
            text = f"{text} {''.join(random.sample(emojis, emoji_count))}"
            
        return text

    def generate_synthetic_data(self, text: str, label: int):
        synthetic_samples = []
        text_variations = set()
        
        templates = CommentTemplates()
        sentiment = {0: 'negative', 1: 'neutral', 2: 'positive'}[label]
        
        for _ in range(4):
            try:
                # Thêm xác suất để sinh bình luận tương tác
                if random.random() < 0.2:  # 20% chance for interaction comments
                    if label == 0:  # negative
                        interaction_type = random.choice(['argument', 'trolling'])
                        sub_type = 'aggressive' if interaction_type == 'argument' else None
                    elif label == 2:  # positive
                        interaction_type = 'support'
                        sub_type = random.choice(['agreement', 'praise'])
                    else:  # neutral
                        interaction_type = random.choice(['argument', 'support', 'trolling'])
                        sub_type = 'dismissive' if interaction_type == 'argument' else None
                    
                    augmented_text = templates.generate_interaction_comment(interaction_type, sub_type)
                else:
                    # Xác suất để chọn độ dài khác nhau
                    if random.random() < 0.3:
                        augmented_text = templates.generate_varied_length_comment(sentiment, 'general')
                    else:
                        augmented_text = self.eda.humanize_text(text, self.language, sentiment)
                
                augmented_text = self.generate_natural_variation(augmented_text, label)
                
                if augmented_text not in text_variations and len(augmented_text.split()) >= 3:
                    text_variations.add(augmented_text)
                    synthetic_samples.append({"text": augmented_text, "label": label})
            except Exception as e:
                self.logger.warning(f"Error in augmentation: {str(e)}")
                continue

        return synthetic_samples

    def balance_dataset(self, df: pd.DataFrame, target_col: str = "label"):
        """Balance dataset using upsampling"""
        self.logger.info("Balancing dataset...")

        # Get class distribution
        class_counts = df[target_col].value_counts()
        max_size = class_counts.max()

        # Balance each class
        balanced_dfs = []
        for label in class_counts.index:
            class_df = df[df[target_col] == label]
            if len(class_df) < max_size:
                upsampled = resample(
                    class_df, replace=True, n_samples=max_size, random_state=42
                )
                balanced_dfs.append(upsampled)
            else:
                balanced_dfs.append(class_df)

        return pd.concat(balanced_dfs)

    def generate_training_data(self, output_path: str):
        """Main method to generate and save training data with exactly two columns"""
        self.logger.info(f"Generating {self.num_samples} training samples for {self.language}...")
        
        # Create output directory if not exists
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        # Generate synthetic data with topic-based generation
        synthetic_data = []
        
        # Define topics and sentiment ratios
        topics = {
            'product_review': 0.3,
            'food_review': 0.25,
            'service_review': 0.25,
            'movie_review': 0.2
        }
        
        sentiment_ratios = {
            'negative': 0.25,  # 25% negative
            'neutral': 0.25,   # 25% neutral
            'positive': 0.50   # 50% positive
        }
        
        # Calculate samples per topic and sentiment
        for topic, topic_weight in topics.items():
            topic_samples = int(self.num_samples * topic_weight)
            
            for sentiment, sent_ratio in sentiment_ratios.items():
                sent_samples = int(topic_samples * sent_ratio)
                sentiment_label = {'negative': 0, 'neutral': 1, 'positive': 2}[sentiment]
                
                comments = self.eda.generate_topic_comments(
                    topic, 
                    count=sent_samples,
                    language=self.language,
                    sentiment=sentiment_label
                )
                synthetic_data.extend(comments)
        
        # Convert to DataFrame with only required columns
        df = pd.DataFrame(synthetic_data)[['text', 'label']]
        
        # Validate and clean data
        df['text'] = df['text'].astype(str).str.strip()
        df['label'] = df['label'].astype(int)
        
        # Remove any rows with missing values
        df = df.dropna().reset_index(drop=True)
        
        # Thêm kiểm tra trùng lặp
        df.drop_duplicates(subset=['text'], keep='first', inplace=True)
        
        # Thêm random shuffling để tăng tính ngẫu nhiên
        df = df.sample(frac=1, random_state=42).reset_index(drop=True)
        
        # Save the data
        df.to_csv(output_path, index=False)
        self.logger.info(f"Generated and saved {len(df)} samples to {output_path}")
        
        # Log statistics
        self.logger.info("\n=== Generation Results ===")
        self.logger.info(f"Total samples: {len(df)}")
        self.logger.info("\nClass distribution:")
        self.logger.info(df['label'].value_counts())

def main():
    parser = argparse.ArgumentParser(
        description="Generate training data for sentiment analysis"
    )
    parser.add_argument(
        "--language",
        type=str,
        required=True,
        choices=["en", "vi"],
        help="Language to generate data for (en/vi)",
    )
    parser.add_argument(
        "--output",
        type=str,
        required=True,
        help="Output path for generated training data",
    )
    parser.add_argument(
        "--num_samples",
        type=int,
        default=1000,
        help="Number of synthetic samples to generate",
    )
    args = parser.parse_args()

    config = Config()
    generator = TrainingDataGenerator(args.language, config, args.num_samples)
    generator.generate_training_data(args.output)


if __name__ == "__main__":
    main()

================
File: scripts/train_models.py
================
import argparse
import joblib
import sys
import os

# Add project root to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.config import Config
from src.data.data_loader import DataLoader
from src.features.feature_engineering import FeatureExtractor
from src.models.model_trainer import EnhancedModelTrainer
from src.utils.logger import Logger

def train_model_for_language(language: str, config: Config):
    logger = Logger(__name__).logger
    logger.info(f"Training model for {language}...")
    
    # Initialize components
    data_loader = DataLoader(config)
    feature_extractor = FeatureExtractor(language, config)
    model_trainer = EnhancedModelTrainer(language, config)
    
    # Load processed data
    df = data_loader.load_processed_data(language)
    X, y = data_loader.get_features_and_labels(df)
    
    # Extract features
    X_features = feature_extractor.extract_features(X)
    
    # Train model
    model = model_trainer.train_with_grid_search(X_features, y)
    
    # Save model
    model_path = config.LANGUAGE_CONFIGS[language]['model_path']
    os.makedirs(os.path.dirname(model_path), exist_ok=True)
    joblib.dump(model, model_path)
    logger.info(f"Model saved to {model_path}")

def main():
    parser = argparse.ArgumentParser(description='Train sentiment analysis models')
    parser.add_argument('--languages', nargs='+', choices=['en', 'vi'],
                      default=['en', 'vi'],
                      help='Languages to train models for')
    args = parser.parse_args()
    
    config = Config()
    for language in args.languages:
        train_model_for_language(language, config)

if __name__ == "__main__":
    main()

================
File: setup.py
================
from setuptools import setup, find_packages
import subprocess
import sys
import nltk
import os


def setup_environment():
    """Initialize required data and install dependencies"""

    print("Installing required packages...")
    try:
        subprocess.check_call(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"]
        )
    except subprocess.CalledProcessError as e:
        print(f"Error installing packages: {str(e)}")
        return False

    print("\nDownloading NLTK data...")
    try:
        # Download required NLTK data
        nltk.download("punkt")
        nltk.download("stopwords")
        nltk.download("wordnet")
        nltk.download("averaged_perceptron_tagger")
    except Exception as e:
        print(f"Error downloading NLTK data: {str(e)}")
        return False

    print("\nCreating required directories...")
    dirs = [
        "data",
        "data/raw_data",
        "data/processed_data",
        "data/models",
        "data/checkpoints",
        "data/metrics",
        "data/lexicons",
        "logs",
    ]

    for dir_path in dirs:
        os.makedirs(dir_path, exist_ok=True)
        print(f"Created directory: {dir_path}")

    print("\nSetup completed successfully!")
    return True


if __name__ == "__main__":
    setup_environment()

setup(
    name="sentiment_analysis",
    version="0.1.0",
    packages=find_packages(),
    install_requires=[
        "numpy",
        "pandas",
        "scikit-learn",
        "nltk",
        "underthesea",  # For Vietnamese text processing
        "matplotlib",
        "seaborn",
        "joblib",
        "pytest",
        "anyio",
    ],
    author="CatalizCS",
    description="Sentiment Analysis for Vietnamese and English Social Media Data",
    python_requires=">=3.7",
)

================
File: src/api/__init__.py
================
# Empty file to make the directory a Python package

================
File: src/api/app.py
================
import os
import subprocess
import sys
from functools import lru_cache
from fastapi import FastAPI, HTTPException, Request, WebSocket, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import Request
import asyncio
from datetime import datetime, timedelta
import time


from src.utils.server_utils import force_kill_port, is_port_in_use, ConnectionManager

# Add correct project root to path
project_root = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Update imports to be relative to src
from fastapi import FastAPI, HTTPException, Request, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import List, Dict, Optional, Any
import uvicorn
import pandas as pd
from datetime import datetime
import psutil
import json
import time
from collections import deque
import asyncio
import signal
import socket
from starlette.websockets import WebSocketState, WebSocketDisconnect
from contextlib import asynccontextmanager
import pathlib

from src.config import Config
from src.features.feature_engineering import FeatureExtractor
from src.models.model_predictor import SentimentPredictor
from src.data.preprocessor import DataPreprocessor
from src.utils.logger import Logger
from src.utils.metrics_store import MetricsStore
from sklearn.metrics import accuracy_score, precision_score, recall_score


# Add performance optimizations
class RateLimitMiddleware(BaseHTTPMiddleware):
    def __init__(self, app, calls: int, period: int):
        super().__init__(app)
        self.calls = calls
        self.period = period
        self.requests = {}

    async def dispatch(self, request: Request, call_next):
        client_ip = request.client.host
        now = time.time()

        # Clean old requests
        self.requests = {
            ip: reqs
            for ip, reqs in self.requests.items()
            if reqs[-1] > now - self.period
        }

        if client_ip in self.requests:
            if len(self.requests[client_ip]) >= self.calls:
                raise HTTPException(status_code=429, detail="Rate limit exceeded")
            self.requests[client_ip].append(now)
        else:
            self.requests[client_ip] = [now]

        return await call_next(request)


# Add model caching
@lru_cache(maxsize=2)
def get_cached_model(language: str):
    """Cache model loading to improve performance"""
    return load_model(language)


# Add dependency for language validation
def validate_language(language: str = "vi"):
    if language not in ["vi", "en"]:
        raise HTTPException(status_code=400, detail="Invalid language")
    return language


# Optimize app initialization
app = FastAPI(
    title="Sentiment Analysis API",
    description="API for Vietnamese-English sentiment analysis",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# Initialize config and logger
config = Config()
logger = Logger(__name__).logger

# Add performance middleware
app.add_middleware(GZipMiddleware, minimum_size=1000)
app.add_middleware(TrustedHostMiddleware, allowed_hosts=["*"])
app.add_middleware(
    RateLimitMiddleware,
    calls=config.API_CONFIG["RATE_LIMIT"]["requests"],
    period=config.API_CONFIG["RATE_LIMIT"]["window"],
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Update this in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
)

# Initialize models dict
models = {"vi": None, "en": None}


# Pydantic models for request/response
class TextRequest(BaseModel):
    text: str
    language: str = "vi"


class BatchRequest(BaseModel):
    texts: List[str]
    language: str = "vi"


class SentimentResponse(BaseModel):
    text: str
    sentiment: int
    sentiment_label: str
    confidence: float
    emotion: Optional[Dict] = None
    processing_time: float


class ModelInfo(BaseModel):
    loaded: bool
    info: Dict[str, Any]


class HealthCheck(BaseModel):
    status: str
    timestamp: str
    models: Dict[str, ModelInfo]


def load_model(language: str):
    """Load model for specified language and track loading time"""
    try:
        start_time = time.time()
        if models[language] is None:
            feature_extractor = FeatureExtractor(language, config)
            predictor = SentimentPredictor(language, config)
            preprocessor = DataPreprocessor(language, config)
            models[language] = {
                "predictor": predictor,
                "extractor": feature_extractor,
                "preprocessor": preprocessor,
            }
        loading_time = time.time() - start_time
        metrics_store.update_model_loading_time(language, loading_time)
        return models[language]
    except Exception as e:
        logger.error(f"Error loading model for {language}: {str(e)}")
        raise HTTPException(
            status_code=500, detail=f"Failed to load model for {language}"
        )


def get_sentiment_label(sentiment: int) -> str:
    """Convert sentiment code to label"""
    return {
        0: "Negative / Tiêu cực",
        1: "Neutral / Trung tính",
        2: "Positive / Tích cực",
    }.get(sentiment, "Unknown")


@app.get("/")
async def root():
    """Root endpoint with API info"""
    return {
        "name": "Sentiment Analysis API",
        "version": "1.0.0",
        "languages": ["vi", "en"],
        "endpoints": [
            "/predict - Single text prediction",
            "/batch - Batch text prediction",
            "/health - API health check",
        ],
    }


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    return JSONResponse(
        status_code=400,
        content={
            "status": "error",
            "message": str(exc),
            "timestamp": datetime.now().isoformat(),
        },
    )


@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = datetime.now()
    try:
        response = await call_next(request)
        process_time = (datetime.now() - start_time).total_seconds()
        response.headers["X-Process-Time"] = str(process_time)
        return response
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": str(e),
                "timestamp": datetime.now().isoformat(),
            },
        )


# Optimize prediction endpoint
def evaluate_model(language: str, true_labels: List[int], predictions: List[int]):
    """Evaluate model performance and update metrics"""
    accuracy = accuracy_score(true_labels, predictions)
    precision = precision_score(true_labels, predictions, average="weighted")
    recall = recall_score(true_labels, predictions, average="weighted")
    metrics_store.update_ml_metrics(language, accuracy, precision, recall)


class PredictionRequest(BaseModel):
    text: str
    language: str


@app.post("/predict")
async def predict(request: Request):
    try:
        # Get input data
        data = await request.json()
        if not data or "text" not in data:
            return JSONResponse(status_code=400, content={"error": "No text provided"})

        text = data["text"]
        language = data.get("language", "vi")

        # Initialize components
        config = Config()
        predictor = SentimentPredictor(language, config)
        preprocessor = DataPreprocessor(language, config)
        feature_extractor = FeatureExtractor(language, config)

        # Preprocess
        df = pd.DataFrame({"text": [text]})
        processed = preprocessor.preprocess(df)

        # Extract features
        features = feature_extractor.extract_features(processed["cleaned_text"])

        # Get prediction with emotion
        result = predictor.predict_emotion(features, text)

        return JSONResponse(
            status_code=200,
            content={
                "text": text,
                "sentiment": int(result["sentiment"]),
                "sentiment_confidence": float(result["sentiment_confidence"]),
                "emotion": result["emotion"],
                "emotion_vi": result["emotion_vi"],
                "emotion_emoji": result["emotion_emoji"],
            }
        )

    except Exception as e:
        # Log the error for debugging
        print(f"Error in predict: {str(e)}")
        return JSONResponse(status_code=500, content={"error": str(e)})


@app.post("/batch")
async def batch_predict(request: BatchRequest):
    """Predict sentiment for multiple texts"""
    start_time = datetime.now()

    try:
        # Validate language
        if request.language not in ["vi", "en"]:
            raise HTTPException(status_code=400, detail="Language must be 'vi' or 'en'")

        # Load model components
        model = load_model(request.language)

        # Process texts
        df = pd.DataFrame({"text": request.texts})
        processed_df = model["preprocessor"].preprocess(df)

        if processed_df.empty:
            raise HTTPException(status_code=400, detail="Text preprocessing failed")

        # Extract features
        features = model["extractor"].extract_features(processed_df["cleaned_text"])

        # Get predictions
        results = []
        for i, text in enumerate(request.texts):
            emotion_result = model["predictor"].predict_emotion(
                features[i : i + 1], text
            )

            results.append(
                {
                    "text": text,
                    "sentiment": emotion_result["sentiment"],
                    "sentiment_label": get_sentiment_label(emotion_result["sentiment"]),
                    "confidence": float(emotion_result["sentiment_confidence"]),
                    "emotion": {
                        "label": emotion_result["emotion_vi"],
                        "emoji": emotion_result["emotion_emoji"],
                        "confidence": float(emotion_result["emotion_confidence"]),
                        "scores": emotion_result.get("emotion_scores"),
                    },
                }
            )

        processing_time = (datetime.now() - start_time).total_seconds()

        return {
            "results": results,
            "count": len(results),
            "processing_time": processing_time,
        }

    except Exception as e:
        logger.error(f"Batch prediction error: {str(e)}")
        raise HTTPException(
            status_code=500, detail=f"Batch prediction failed: {str(e)}"
        )


# Add metrics optimization
async def update_metrics(processing_time: float):
    """Update metrics asynchronously"""
    try:
        metrics_store.increment_total_requests()  # Updated method call
        metrics_store.add_request(datetime.now())  # Updated method call
        metrics_store.add_response_time(processing_time)  # Updated method call

        # Cleanup old metrics
        now = datetime.now()
        cutoff = now - timedelta(days=config.METRICS_CONFIG["retention_days"])

        metrics_store.cleanup_old_metrics(cutoff)  # Updated method call

    except Exception as e:
        logger.error(f"Metrics update error: {str(e)}")


@app.get("/health", response_model=HealthCheck)
async def health_check():
    """Optimized health check"""
    try:
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "models": {
                lang: ModelInfo(
                    loaded=bool(models[lang]), info=config.MODEL_INFO.get(lang, {})
                )
                for lang in ["vi", "en"]
            },
            "metrics": {
                "requests": len(metrics_store["requests"]),
                "avg_response_time": (
                    sum(metrics_store["response_times"])
                    / len(metrics_store["response_times"])
                    if metrics_store["response_times"]
                    else 0
                ),
                "memory_usage": psutil.Process().memory_percent(),
            },
        }
    except Exception as e:
        logger.error(f"Health check error: {str(e)}")
        return {"status": "unhealthy", "error": str(e)}


@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on server shutdown"""
    try:
        # Clear model cache
        models["vi"] = None
        models["en"] = None
        # Additional cleanup if needed
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")


@app.post("/shutdown")
async def shutdown():
    """Graceful shutdown endpoint"""
    try:
        # Get the process ID
        pid = os.getpid()

        # Schedule shutdown after response is sent
        async def shutdown_server():
            await asyncio.sleep(1)
            # Kill the current process
            if sys.platform == "win32":
                subprocess.run(["taskkill", "/F", "/PID", str(pid)])
            else:
                os.kill(pid, signal.SIGTERM)

        asyncio.create_task(shutdown_server())

        return {"message": "Server shutting down..."}
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
        raise HTTPException(status_code=500, detail="Shutdown failed")


# Server control functions
server_process = None


def start_new_terminal():
    """Start API server in a new terminal window"""
    try:
        # Get the project root directory and normalize path
        project_root = os.path.abspath(
            os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        )
        api_script = os.path.join(project_root, "src", "api", "app.py")

        # Set environment variables
        env = os.environ.copy()
        env["PYTHONPATH"] = project_root
        env["PYTHONUNBUFFERED"] = "1"

        # Command to run API server
        api_command = [
            sys.executable,
            "-m",
            "uvicorn",
            "src.api.app:app",
            "--host=0.0.0.0",
            "--port=7270",
            "--reload",
            "--reload-dir=src",
        ]

        # Platform-specific commands
        if sys.platform == "win32":
            # Windows: use 'start' command
            full_command = [
                "cmd",
                "/c",
                "start",
                "cmd",
                "/k",
                "set PYTHONPATH=" + project_root + "&&" + " ".join(api_command),
            ]
            subprocess.Popen(full_command, shell=True, env=env, cwd=project_root)

        elif sys.platform == "darwin":
            # macOS: use AppleScript to open Terminal
            apple_script = [
                "osascript",
                "-e",
                f'tell app "Terminal" to do script "cd {project_root} && {" ".join(api_command)}"',
            ]
            subprocess.Popen(apple_script)

        else:
            # Linux: try common terminal emulators
            terminals = [
                ["gnome-terminal", "--"],
                ["xterm", "-e"],
                ["konsole", "-e"],
                ["xfce4-terminal", "--execute"],
            ]

            success = False
            for term_cmd in terminals:
                try:
                    subprocess.Popen(term_cmd + api_command, env=env, cwd=project_root)
                    success = True
                    break
                except FileNotFoundError:
                    continue

            if not success:
                raise RuntimeError("No suitable terminal emulator found")

        logger.info("API server started in new terminal window")
        return True

    except Exception as e:
        logger.error(f"Failed to start API server in new terminal: {e}")
        return False


def start_api_server(host="0.0.0.0", port=7270):
    """Enhanced API server starter"""
    global server_process
    try:
        # Kill any existing process using the port
        if is_port_in_use(port):
            force_kill_port(port)
            time.sleep(1)  # Wait for port to be freed

        # Set environment variables for better stability
        env = os.environ.copy()
        env["PYTHONUNBUFFERED"] = "1"
        env["PYTHONPATH"] = project_root

        # Start server with improved settings
        command = [
            sys.executable,
            "-m",
            "uvicorn",
            "src.api.app:app",
            f"--host={host}",
            f"--port={port}",
            "--reload",
            "--reload-dir",
            "src",
            "--workers",
            "1",  # Single worker for stability
            "--timeout-keep-alive",
            "30",
            "--limit-concurrency",
            "100",
            "--log-level",
            "info",
        ]

        server_process = subprocess.Popen(
            command, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )

        # Verify server started successfully
        time.sleep(2)
        if server_process.poll() is not None:
            stderr = server_process.stderr.read()
            raise RuntimeError(f"Server failed to start: {stderr}")

        logger.info(f"API server started on {host}:{port}")
        return True

    except Exception as e:
        logger.error(f"Failed to start API server: {str(e)}")
        return False


def stop_api_server():
    """Stop the API server subprocess"""
    global server_process
    try:
        if server_process and server_process.poll() is None:
            server_process.terminate()
            server_process.wait(timeout=5)
            logger.info(
                f"API server with PID {server_process.pid} terminated successfully."
            )
        else:
            logger.info("API server process is not running.")
        server_process = None

        # Clear model cache
        models["vi"] = None
        models["en"] = None

        time.sleep(1)  # Ensure the port is freed
        return True
    except Exception as e:
        logger.error(f"Error stopping API server: {e}")
        return False


def is_port_in_use(port: int) -> bool:
    """Check if port is in use"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.bind(("", port))
            return False
        except OSError:
            return True


def get_api_status():
    """Get API server status"""
    try:
        # Check if any Python processes are using our ports
        target_ports = [7270, 8000]
        connections = psutil.net_connections()
        server_running = False

        for conn in connections:
            try:
                if hasattr(conn, "laddr") and (conn.laddr.port in target_ports):
                    # Get process info
                    proc = psutil.Process(conn.pid)
                    if "python" in proc.name().lower():
                        server_running = True
                        break
            except (psutil.NoSuchProcess, psutil.AccessDenied, AttributeError):
                continue

        return {
            "running": server_running,
            "models_loaded": {
                "vi": models["vi"] is not None,
                "en": models["en"] is not None,
            },
            "port": config.API_CONFIG["PORT"],
            "uptime": (
                str(datetime.now() - metrics_store["start_time"])
                if (server_running)
                else "0:00:00"
            ),
            "total_requests": metrics_store["total_requests"],
            "total_errors": metrics_store["total_errors"],
        }
    except Exception as e:
        logger.error(f"Failed to get API status: {str(e)}")
        return {
            "running": False,
            "models_loaded": {"vi": False, "en": False},
            "error": str(e),
        }


# Initialize metrics storage
metrics_store = MetricsStore()

# Mount static files and templates
app.mount("/static", StaticFiles(directory="src/api/static"), name="static")
templates = Jinja2Templates(directory="src/api/templates")


@app.get("/dashboard")
async def dashboard(request: Request):
    """Render dashboard page"""
    return templates.TemplateResponse(
        "dashboard.html",
        {
            "request": request,
            "config": {
                "update_interval": config.DASHBOARD_CONFIG["update_interval"],
                "metrics_history": config.DASHBOARD_CONFIG["metrics_history"],
                "alert_thresholds": config.METRICS_CONFIG["alert_thresholds"],
            },
            "start_time": metrics_store["start_time"],
            "total_requests": metrics_store["total_requests"],
            "total_errors": metrics_store["total_errors"],
        },
    )


# Initialize connection manager
manager = ConnectionManager()


@app.websocket("/ws/metrics")
async def metrics_websocket(websocket: WebSocket):
    await manager.connect(websocket)

    try:
        while True:
            # Receive messages and send metrics concurrently
            receive_task = asyncio.create_task(websocket.receive_text())
            send_task = asyncio.create_task(send_metrics(websocket))

            done, pending = await asyncio.wait(
                [receive_task, send_task], return_when=asyncio.FIRST_COMPLETED
            )

            if receive_task in done:
                message = receive_task.result()
                data = json.loads(message)

                if data.get("type") == "heartbeat":
                    await websocket.send_text(json.dumps({"type": "heartbeat_ack"}))
                    # Cancel send_task to prevent duplication
                    send_task.cancel()
                    continue  # Continue to the next iteration

            if send_task in done:
                # Metrics have been sent
                pass

            # Cancel pending tasks
            for task in pending:
                task.cancel()

    except WebSocketDisconnect:
        logger.info("WebSocket client disconnected.")
        await manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket error: {e}")
        await manager.disconnect(websocket)


async def send_metrics(websocket: WebSocket):
    while True:
        try:
            # Send metrics to the client
            metrics = {
                "type": "metrics",
                "cpu_usage": psutil.cpu_percent(interval=0.5),
                "memory_usage": {
                    "percent": psutil.virtual_memory().percent,
                    "used": psutil.virtual_memory().used,
                    "total": psutil.virtual_memory().total,
                },
                "requests_per_sec": metrics_store.get_requests_per_sec(
                    config.DASHBOARD_CONFIG["update_interval"]
                ),
                "avg_response_time": (
                    metrics_store.get_avg_response_time()
                    if metrics_store.response_times
                    else 0
                ),
                "model_status": {
                    lang: {
                        "loaded": models[lang] is not None,
                        "info": config.MODEL_INFO.get(lang, {}),
                        "performance": metrics_store.get_model_performance().get(
                            lang, {}
                        ),
                    }
                    for lang in ["vi", "en"]
                },
                "total_requests": metrics_store.total_requests,
                "total_errors": metrics_store.total_errors,
            }
            await websocket.send_text(json.dumps(metrics))
            await asyncio.sleep(1)
        except WebSocketDisconnect:
            logger.info("WebSocket client disconnected.")
            break
        except Exception as e:
            logger.error(f"Error sending metrics: {e}")
            break


@app.get("/api/metrics/summary")
async def get_metrics_summary():
    """Get summary of API metrics"""
    return metrics_store.get_metrics()


# Update middleware to collect metrics
@app.middleware("http")
async def metrics_middleware(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time

    # Update metrics with process time and error status
    metrics_store.update_metrics(process_time, is_error=(response.status_code >= 400))

    return response


@app.get("/api/logs")
async def get_server_logs(
    lines: int = 100,
    level: str = "all",
    since: str = None,
    type: str = "all",
    path: str = None,
    status_code: int = None,
):
    """Enhanced log retrieval with more filtering options"""
    try:
        log_file = pathlib.Path(config.LOG_FILE)
        if not log_file.exists():
            return {"logs": [], "message": "No log file found"}

        # Read log file
        with open(log_file, "r", encoding="utf-8") as f:
            logs = f.readlines()

        filtered_logs = []
        for log in logs:
            try:
                # Apply filters
                if type != "all":
                    if (type == "init") and ("API Server" not in log):
                        continue
                    if (type == "request") and ("Request:" not in log):
                        continue

                if path and (path not in log):
                    continue

                if status_code and (f"Status: {status_code}" not in log):
                    continue

                if (level != "all") and (f"[{level.upper()}]" not in log):
                    continue

                if since:
                    try:
                        log_time = datetime.fromisoformat(log.split()[0])
                        since_time = datetime.fromisoformat(since)
                        if log_time < since_time:
                            continue
                    except:
                        pass

                filtered_logs.append(log)
            except:
                continue

        # Get last N lines
        filtered_logs = filtered_logs[-lines:]

        return {
            "logs": filtered_logs,
            "total": len(filtered_logs),
            "filters": {
                "type": type,
                "level": level,
                "path": path,
                "status_code": status_code,
                "since": since,
                "lines": lines,
            },
        }
    except Exception as e:
        logger.error(f"Error reading logs: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to read logs: {str(e)}")


# Add timeout handler
async def timeout_handler():
    """Handle request timeout"""
    await asyncio.sleep(config.API_CONFIG["TIMEOUT"])
    raise HTTPException(status_code=408, detail="Request timeout")


# Add request timeout middleware
@app.middleware("http")
async def timeout_middleware(request: Request, call_next):
    try:
        # Create timeout task
        timeout_task = asyncio.create_task(timeout_handler())
        # Create response task
        response_task = asyncio.create_task(call_next(request))

        done, pending = await asyncio.wait(
            [timeout_task, response_task], return_when=asyncio.FIRST_COMPLETED
        )

        # Cancel pending tasks
        for task in pending:
            task.cancel()

        if response_task in done:
            return await response_task
        else:
            raise HTTPException(status_code=408, detail="Request timeout")

    except Exception as e:
        logger.error(f"Request error: {str(e)}")
        # Cleanup resources
        models["vi"] = None
        models["en"] = None
        return JSONResponse(
            status_code=500, content={"detail": "Internal server error"}
        )


# Add periodic health check
async def periodic_health_check():
    """Run periodic health check"""
    while True:
        try:
            await asyncio.sleep(30)  # Check every 30 seconds
            status = await health_check()
            if status["status"] != "healthy":
                logger.warning("Unhealthy state detected, reloading models...")
                # Reload models
                models["vi"] = None
                models["en"] = None
        except Exception as e:
            logger.error(f"Health check error: {e}")


# Update startup event
@app.on_event("startup")
async def startup_event():
    """Enhanced startup logging and model preloading"""
    try:
        logger.info("=== API Server Starting ===")
        logger.info(f"Environment: {os.getenv('ENV', 'development')}")
        logger.info(f"Debug Mode: {app.debug}")
        logger.info(f"API Config: {json.dumps(config.API_CONFIG, indent=2)}")

        # Preload models on startup
        logger.info("Preloading models...")
        for language in ["vi", "en"]:
            try:
                logger.info(f"Loading {language.upper()} model...")
                _ = get_cached_model(language)
                logger.info(f"{language.upper()} model loaded successfully")
            except Exception as e:
                logger.error(f"Failed to load {language.upper()} model: {str(e)}")

        # Log available endpoints
        routes = []
        for route in app.routes:
            if hasattr(route, "methods"):
                routes.append(f"{route.methods} {route.path}")
        logger.info(f"Registered Routes:\n" + "\n".join(routes))

        # Start background tasks
        asyncio.create_task(periodic_health_check())
        logger.info("Health check task started")

        # Initialize metrics
        metrics_store.clear_all()
        logger.info("Metrics store initialized")

        logger.info("=== API Server Started Successfully ===")
    except Exception as e:
        logger.error(f"Startup failed: {str(e)}")
        raise


# Update shutdown event to be more thorough
@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown"""
    try:
        # Clear model cache
        models["vi"] = None
        models["en"] = None

        # Close all active connections
        for ws in manager.active_connections:
            await ws.close()
        manager.active_connections.clear()

        # Additional cleanup
        metrics_store["requests"].clear()
        metrics_store["response_times"].clear()
        metrics_store["errors"].clear()

    except Exception as e:
        logger.error(f"Error during shutdown: {e}")


# Add request logging middleware
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    method = request.method
    path = request.url.path
    query_params = str(request.query_params)

    # Log request
    logger.info(f"Request: {method} {path} {query_params}")

    try:
        # Get request body for POST/PUT requests
        if method in ["POST", "PUT"]:
            body = await request.json()
            logger.info(f"Request Body: {json.dumps(body, ensure_ascii=False)}")
    except:
        pass

    try:
        response = await call_next(request)

        process_time = time.time() - start_time
        status_code = response.status_code

        # Log response
        logger.info(
            f"Response: {method} {path} - Status: {status_code} - Time: {process_time:.3f}s"
        )

        return response
    except Exception as e:
        logger.error(f"Request failed: {method} {path} - Error: {str(e)}")
        raise


if __name__ == "__main__":
    # Run with uvicorn directly when script is executed
    import uvicorn

    port = 7270
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        reload_dirs=["src"],
        log_level="info",
        # Remove invalid timeout parameter
        workers=1,
        limit_concurrency=100,
        # Add valid websocket configurations
        websocket_ping_interval=20,
        websocket_ping_timeout=30,
        limit_max_requests=None,
    )

# Export necessary functions
__all__ = [
    "app",
    "start_api_server",
    "stop_api_server",
    "is_port_in_use",
    "get_api_status",
    "get_cached_model",
    "validate_language",
    "update_metrics",
]

================
File: src/api/templates/dashboard.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sentiment Analysis API Dashboard</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .metric-card {
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
      }
      .metric-title {
        color: #718096;
        font-size: 0.875rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
      }
      .metric-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2d3748;
      }
      .chart-container {
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
        margin-top: 1rem;
      }
    </style>
  </head>
  <body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <header class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800">API Dashboard</h1>
        <p class="text-gray-600">Real-time monitoring and metrics</p>
      </header>

      <!-- System Status -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div class="metric-card">
          <div class="metric-title">System Status</div>
          <div class="metric-value" id="system-status">
            <span class="text-green-500">●</span> Running
          </div>
        </div>
        <div class="metric-card">
          <div class="metric-title">Uptime</div>
          <div class="metric-value" id="uptime">--:--:--</div>
        </div>
        <div class="metric-card">
          <div class="metric-title">Total Requests</div>
          <div class="metric-value" id="total-requests">0</div>
        </div>
      </div>

      <!-- Resource Metrics -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
        <div class="metric-card">
          <div class="metric-title">CPU Usage</div>
          <div class="metric-value"><span id="cpu-usage">0</span>%</div>
          <div id="cpu-chart" class="h-40"></div>
        </div>
        <div class="metric-card">
          <div class="metric-title">Memory Usage</div>
          <div class="metric-value"><span id="memory-usage">0</span>%</div>
          <div id="memory-chart" class="h-40"></div>
        </div>
      </div>

      <!-- Performance Metrics -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <div class="chart-container">
          <h3 class="text-lg font-semibold mb-4">Request Rate</h3>
          <div id="request-rate-chart" class="h-64"></div>
        </div>
        <div class="chart-container">
          <h3 class="text-lg font-semibold mb-4">Response Time</h3>
          <div id="response-time-chart" class="h-64"></div>
        </div>
      </div>

      <!-- Model Status -->
      <div class="mt-8">
        <h3 class="text-lg font-semibold mb-4">Model Status</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="metric-card" id="vi-model-status">
            <div class="metric-title">Vietnamese Model</div>
            <div class="metric-value">Loading...</div>
            <div class="metric-details">
              <p id="vi-model-name">Name: --</p>
              <p id="vi-model-version">Version: --</p>
              <p id="vi-model-description">Description: --</p>
              <p id="vi-model-loading-time">Loading Time: -- s</p>
              <p id="vi-model-avg-inference-time">Avg Inference Time: -- ms</p>
              <p id="vi-model-accuracy">Accuracy: --%</p>
              <p id="vi-model-precision">Precision: --%</p>
              <p id="vi-model-recall">Recall: --%</p>
            </div>
          </div>
          <div class="metric-card" id="en-model-status">
            <div class="metric-title">English Model</div>
            <div class="metric-value">Loading...</div>
            <div class="metric-details">
              <p id="en-model-name">Name: --</p>
              <p id="en-model-version">Version: --</p>
              <p id="en-model-description">Description: --</p>
              <p id="en-model-loading-time">Loading Time: -- s</p>
              <p id="en-model-avg-inference-time">Avg Inference Time: -- ms</p>
              <p id="en-model-accuracy">Accuracy: --%</p>
              <p id="en-model-precision">Precision: --%</p>
              <p id="en-model-recall">Recall: --%</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      let ws;
      let reconnectAttempts = 0;
      const reconnectDelay = 3000;
      let heartbeatInterval;
      let heartbeatTimeout;

      function handleReconnect(reason) {
        document.getElementById("system-status").innerHTML =
          '<span class="text-yellow-500">●</span> Disconnected';

        reconnectAttempts++;
        console.log(`Reconnecting... Attempt ${reconnectAttempts} (${reason})`);
        setTimeout(connectWebSocket, reconnectDelay);
      }

      function sendHeartbeat() {
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: "heartbeat" }));
          console.log("Heartbeat sent");

          // Set a timeout to wait for heartbeat acknowledgment
          heartbeatTimeout = setTimeout(() => {
            console.warn("Heartbeat acknowledgment not received.");
            ws.close();
          }, 5000); // 5 seconds timeout
        }
      }

      function handleHeartbeatAck() {
        if (heartbeatTimeout) {
          clearTimeout(heartbeatTimeout);
          console.log("Heartbeat acknowledgment received.");
        }
      }

      async function connectWebSocket() {
        try {
          const wsProtocol =
            window.location.protocol === "https:" ? "wss:" : "ws:";
          const host = window.location.host || "localhost:7270";
          const wsUrl = `${wsProtocol}//${host}/ws/metrics`;

          console.log("Connecting to WebSocket:", wsUrl);

          if (ws) {
            ws.close();
            await new Promise((resolve) => setTimeout(resolve, 1000));
          }

          ws = new WebSocket(wsUrl);

          ws.onopen = () => {
            console.log("WebSocket connected");
            document.getElementById("system-status").innerHTML =
              '<span class="text-green-500">●</span> Connected';
            reconnectAttempts = 0;
            // Start sending heartbeat every 30 seconds
            heartbeatInterval = setInterval(sendHeartbeat, 30000);
            // Send the first heartbeat immediately
            sendHeartbeat();
          };

          ws.onclose = (event) => {
            console.log("WebSocket connection closed:", event);
            document.getElementById("system-status").innerHTML =
              '<span class="text-yellow-500">●</span> Disconnected';
            clearInterval(heartbeatInterval); // Stop heartbeat on close
            clearTimeout(heartbeatTimeout);
            handleReconnect("Connection closed");
          };

          ws.onerror = (error) => {
            console.error("WebSocket error:", error);
            ws.close();
          };

          ws.onmessage = (event) => {
            if (ws.readyState === WebSocket.OPEN) {
              try {
                const data = JSON.parse(event.data);

                if (data.type === "heartbeat_ack") {
                  handleHeartbeatAck();
                } else if (data.type === "metrics") {
                  const metrics = data;
                  updateCharts(metrics);
                  updateMetrics(metrics);
                }
              } catch (err) {
                console.error("Error processing metrics:", err);
              }
            }
          };
        } catch (err) {
          console.error("WebSocket connection failed:", err);
          handleReconnect("Connection failed");
        }
      }

      // Function to initialize WebSocket connection
      connectWebSocket();

      // Functions to update charts (implement as needed)
      function updateCharts(metrics) {
        const now = new Date();

        // Update data arrays
        for (const chart of Object.values(charts)) {
          chart.data[0].x.push(now);
          if (chart.data[0].x.length > MAX_POINTS) {
            chart.data[0].x.shift();
            chart.data[0].y.shift();
          }
        }

        // Add new values
        charts.cpu.data[0].y.push(metrics.cpu_usage);
        charts.memory.data[0].y.push(metrics.memory_usage.percent);
        charts.requests.data[0].y.push(metrics.requests_per_sec);
        charts.response.data[0].y.push(metrics.avg_response_time);

        // Update charts
        Plotly.update("cpu-chart", charts.cpu.data, {
          xaxis: { range: [now - 300000, now] }, // Show last 5 minutes
        });
        Plotly.update("memory-chart", charts.memory.data, {
          xaxis: { range: [now - 300000, now] },
        });
        Plotly.update("request-rate-chart", charts.requests.data, {
          xaxis: { range: [now - 300000, now] },
        });
        Plotly.update("response-time-chart", charts.response.data, {
          xaxis: { range: [now - 300000, now] },
        });

        // Update numeric displays
        document.getElementById("cpu-usage").textContent =
          metrics.cpu_usage.toFixed(1);
        document.getElementById("memory-usage").textContent =
          metrics.memory_usage.percent.toFixed(1);
      }

      function updateMetrics(metrics) {
        // Update basic metrics
        document.getElementById("cpu-usage").textContent =
          metrics.cpu_usage.toFixed(1);
        document.getElementById("memory-usage").textContent =
          metrics.memory_usage.percent.toFixed(1);

        // Update model status
        updateModelStatus("vi", metrics.model_status.vi);
        updateModelStatus("en", metrics.model_status.en);
      }

      function updateModelStatus(lang, status) {
        const element = document.getElementById(`${lang}-model-status`);
        const statusDiv = element.querySelector(".metric-value");
        statusDiv.innerHTML = status
          ? '<span class="text-green-500">●</span> Active'
          : '<span class="text-red-500">●</span> Inactive';
      }

      window.addEventListener("load", connectWebSocket);

      document.getElementById("system-status").parentElement.innerHTML += `
        <button onclick="handleManualReconnect()" 
                id="reconnectBtn"
                class="mt-2 px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600">
          Reconnect
        </button>`;

      function handleManualReconnect() {
        const btn = document.getElementById("reconnectBtn");
        btn.disabled = true;
        btn.classList.add("opacity-50");
        reconnectAttempts = 0;
        connectWebSocket();
        setTimeout(() => {
          btn.disabled = false;
          btn.classList.remove("opacity-50");
        }, 3000);
      }

      // Initialize time window for charts (5 minutes of data)
      const MAX_POINTS = 300; // 5 minutes at 1 data point per second
      const charts = {
        cpu: {
          data: [
            {
              x: [],
              y: [],
              type: "line",
              name: "CPU Usage",
              line: { color: "#2563eb" },
            },
          ],
          layout: {
            margin: { t: 0, b: 20, l: 30, r: 10 },
            yaxis: { range: [0, 100], title: "CPU %" },
            showlegend: false,
          },
        },
        memory: {
          data: [
            {
              x: [],
              y: [],
              type: "line",
              name: "Memory Usage",
              line: { color: "#16a34a" },
            },
          ],
          layout: {
            margin: { t: 0, b: 20, l: 30, r: 10 },
            yaxis: { range: [0, 100], title: "Memory %" },
            showlegend: false,
          },
        },
        requests: {
          data: [
            {
              x: [],
              y: [],
              type: "bar",
              name: "Requests/sec",
              marker: { color: "#9333ea" },
            },
          ],
          layout: {
            margin: { t: 0, b: 30, l: 40, r: 10 },
            yaxis: { title: "Requests/sec" },
            showlegend: false,
          },
        },
        response: {
          data: [
            {
              x: [],
              y: [],
              type: "scatter",
              mode: "lines",
              name: "Response Time",
              line: { color: "#dc2626" },
            },
          ],
          layout: {
            margin: { t: 0, b: 30, l: 40, r: 10 },
            yaxis: { title: "Time (s)" },
            showlegend: false,
          },
        },
      };

      // Create charts
      Plotly.newPlot("cpu-chart", charts.cpu.data, charts.cpu.layout);
      Plotly.newPlot("memory-chart", charts.memory.data, charts.memory.layout);
      Plotly.newPlot(
        "request-rate-chart",
        charts.requests.data,
        charts.requests.layout
      );
      Plotly.newPlot(
        "response-time-chart",
        charts.response.data,
        charts.response.layout
      );

      function updateCharts(metrics) {
        const now = new Date();

        // Update data arrays
        for (const chart of Object.values(charts)) {
          chart.data[0].x.push(now);
          if (chart.data[0].x.length > MAX_POINTS) {
            chart.data[0].x.shift();
            chart.data[0].y.shift();
          }
        }

        // Add new values
        charts.cpu.data[0].y.push(metrics.cpu_usage);
        charts.memory.data[0].y.push(metrics.memory_usage.percent);
        charts.requests.data[0].y.push(metrics.requests_per_sec);
        charts.response.data[0].y.push(metrics.avg_response_time);

        // Update charts
        Plotly.update("cpu-chart", charts.cpu.data, {
          xaxis: { range: [now - 300000, now] }, // Show last 5 minutes
        });
        Plotly.update("memory-chart", charts.memory.data, {
          xaxis: { range: [now - 300000, now] },
        });
        Plotly.update("request-rate-chart", charts.requests.data, {
          xaxis: { range: [now - 300000, now] },
        });
        Plotly.update("response-time-chart", charts.response.data, {
          xaxis: { range: [now - 300000, now] },
        });

        // Update numeric displays
        document.getElementById("cpu-usage").textContent =
          metrics.cpu_usage.toFixed(1);
        document.getElementById("memory-usage").textContent =
          metrics.memory_usage.percent.toFixed(1);
      }

      function updateMetrics(metrics) {
        // Update basic metrics
        document.getElementById("cpu-usage").textContent =
          metrics.cpu_usage.toFixed(1);
        document.getElementById("memory-usage").textContent =
          metrics.memory_usage.percent.toFixed(1);

        // Update model status
        updateModelStatus("vi", metrics.model_status.vi);
        updateModelStatus("en", metrics.model_status.en);
      }

      function updateModelStatus(lang, status) {
        const element = document.getElementById(`${lang}-model-status`);
        const statusDiv = element.querySelector(".metric-value");
        statusDiv.innerHTML = status
          ? '<span class="text-green-500">●</span> Active'
          : '<span class="text-red-500">●</span> Inactive';
      }

      // Update uptime
      function updateUptime() {
        const startTime = new Date("{{ start_time }}");
        const now = new Date();
        const diff = Math.floor((now - startTime) / 1000);

        const hours = Math.floor(diff / 3600);
        const minutes = Math.floor((diff % 3600) / 60);
        const seconds = diff % 60;

        document.getElementById("uptime").textContent = `${hours}:${minutes
          .toString()
          .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
      }

      setInterval(updateUptime, 1000);
      updateUptime();

      // Update total requests
      document.getElementById("total-requests").textContent =
        "{{ total_requests }}";

      // Clear heartbeat on page unload
      window.addEventListener("beforeunload", () => {
        if (heartbeatInterval) {
          clearInterval(heartbeatInterval);
        }
        if (heartbeatTimeout) {
          clearTimeout(heartbeatTimeout);
        }
        if (ws) {
          ws.close();
        }
      });
    </script>
  </body>
</html>

================
File: src/config.py
================
import os


class Config:
    # Paths
    ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    DATA_DIR = os.path.join(ROOT_DIR, "data")

    # Model parameters - Giảm độ phức tạp
    MAX_FEATURES = 10000  # tránh noise
    MIN_SAMPLES = 5  # đảm bảo tính ổn định
    MAX_LEN = 300  # giảm noise
    SVD_COMPONENTS = 100  # Add this line to define the number of SVD components
    # Language specific configs
    LANGUAGE_CONFIGS = {
        "vi": {
            "stop_words": ["và", "của", "các", "có", "được", "trong", "đã", "này"],
            "model_path": os.path.join(DATA_DIR, "models", "vi_sentiment_model.pkl"),
        },
        "en": {
            "stop_words": "english",  # Using NLTK's English stop words
            "model_path": os.path.join(DATA_DIR, "models", "en_sentiment_model.pkl"),
        },
    }

    # Expanded emotion labels
    EMOTION_LABELS = {
        "POSITIVE": {
            2: "positive",
            3: "excited",
            4: "happy",
            5: "satisfied",
            6: "impressed",
        },
        "NEGATIVE": {
            0: "negative",
            7: "angry",
            8: "disappointed",
            9: "frustrated",
            10: "worried",
        },
        "NEUTRAL": {1: "neutral", 11: "confused", 12: "uncertain", 13: "mixed"},
    }

    # Emotion mapping for conversion
    EMOTION_TO_SENTIMENT = {
        # Positive emotions -> 2
        "excited": 2,
        "happy": 2,
        "satisfied": 2,
        "impressed": 2,
        "positive": 2,
        # Negative emotions -> 0
        "angry": 0,
        "disappointed": 0,
        "frustrated": 0,
        "worried": 0,
        "negative": 0,
        # Neutral emotions -> 1
        "confused": 1,
        "uncertain": 1,
        "mixed": 1,
        "neutral": 1,
    }

    # Model saving configurations
    MODEL_SAVE_CONFIG = {
        "max_checkpoints": 5,
        "checkpoint_frequency": 1,  # Save checkpoint every N epochs
        "model_format": "pkl",
        "compression": True,
    }

    # Expanded emotion mapping
    EMOTION_MAPPING = {
        # Positive emotions (2)
        "happy": {"id": 2.1, "sentiment": 2, "vi": "vui vẻ", "emoji": "😊"},
        "excited": {"id": 2.2, "sentiment": 2, "vi": "phấn khích", "emoji": "🤗"},
        "satisfied": {"id": 2.3, "sentiment": 2, "vi": "hài lòng", "emoji": "😌"},
        "proud": {"id": 2.4, "sentiment": 2, "vi": "tự hào", "emoji": "😊"},
        # Neutral emotions (1)
        "neutral": {"id": 1.0, "sentiment": 1, "vi": "bình thường", "emoji": "😐"},
        "surprised": {"id": 1.1, "sentiment": 1, "vi": "ngạc nhiên", "emoji": "😮"},
        "confused": {"id": 1.2, "sentiment": 1, "vi": "bối rối", "emoji": "😕"},
        # Negative emotions (0)
        "sad": {"id": 0.1, "sentiment": 0, "vi": "buồn", "emoji": "😢"},
        "angry": {"id": 0.2, "sentiment": 0, "vi": "giận dữ", "emoji": "😠"},
        "disappointed": {"id": 0.3, "sentiment": 0, "vi": "thất vọng", "emoji": "😞"},
        "frustrated": {"id": 0.4, "sentiment": 0, "vi": "bực bội", "emoji": "😤"},
        "worried": {"id": 0.5, "sentiment": 0, "vi": "lo lắng", "emoji": "😟"},
    }

    # Emotion keywords for each category
    EMOTION_KEYWORDS = {
        "vi": {
            "happy": ["vui", "hạnh phúc", "thích", "tuyệt vời", "tốt", "thú vị"],
            "excited": ["phấn khích", "hào hứng", "tuyệt quá", "wow"],
            "satisfied": ["hài lòng", "thoải mái", "ổn", "được"],
            "proud": ["tự hào", "xuất sắc", "giỏi"],
            "neutral": ["bình thường", "tạm", "okay"],
            "surprised": ["ngạc nhiên", "bất ngờ", "không ngờ"],
            "confused": ["bối rối", "không hiểu", "lạ"],
            "sad": ["buồn", "khổ", "chán", "thương"],
            "angry": ["giận", "tức", "khó chịu", "ghét"],
            "disappointed": ["thất vọng", "không được", "kém"],
            "frustrated": ["bực", "khó chịu", "phiền"],
            "worried": ["lo", "sợ", "không an tâm"],
        },
        "en": {
            "happy": ["happy", "joyful", "pleased", "delighted", "good", "great"],
            "excited": ["excited", "thrilled", "eager", "enthusiastic", "wow"],
            "satisfied": ["satisfied", "content", "pleased", "okay", "fine"],
            "proud": ["proud", "accomplished", "successful", "confident"],
            "neutral": ["neutral", "indifferent", "unaffected", "okay"],
            "surprised": ["surprised", "shocked", "amazed", "astonished"],
            "confused": ["confused", "puzzled", "perplexed", "baffled"],
            "sad": ["sad", "unhappy", "down", "depressed", "miserable"],
            "angry": ["angry", "mad", "furious", "irritated", "annoyed"],
            "disappointed": ["disappointed", "dissatisfied", "unhappy", "let down"],
            "frustrated": ["frustrated", "annoyed", "irritated", "exasperated"],
            "worried": ["worried", "concerned", "anxious", "nervous", "apprehensive"],
        },
    }

    # API Configuration
    API_CONFIG = {
        "HOST": "0.0.0.0",
        "PORT": 7270,
        "WORKERS": 4,
        "TIMEOUT": 60,
        "RELOAD": True,
        "CORS_ORIGINS": ["*"],
        "MAX_REQUEST_SIZE": 1024 * 1024,  # 1MB
        "RATE_LIMIT": {"requests": 10000, "window": 60},  # seconds
    }

    # Dashboard Configuration
    DASHBOARD_CONFIG = {
        "update_interval": 5,  # seconds
        "metrics_history": 100,  # number of historical data points to keep
        "charts": {
            "request_rate": {"window": 60},  # 1 minute window
            "response_time": {"window": 300},  # 5 minute window
            "error_rate": {"window": 300},
        },
    }

    # Metrics Configuration
    METRICS_CONFIG = {
        "collect_detailed_metrics": True,
        "metrics_retention_days": 7,
        "metrics_file": "api_metrics.json",
        "alert_thresholds": {
            "error_rate": 0.1,  # 10% error rate
            "response_time": 1.0,  # 1 second
            "memory_usage": 0.8,  # 80% memory usage
        },
    }

    # Metrics configuration
    METRICS_CONFIG = {
        "retention_days": 7,
        "alert_thresholds": {"accuracy": 0.8, "precision": 0.8, "recall": 0.8},
    }

    # Enhanced model training configuration
    MODEL_TRAINING_CONFIG = {
        "cv_folds": 10,  # Increased from 5
        "class_weight_method": "balanced",
        "feature_selection_method": "mutual_info_classif",
        "sampling_strategy": "smote",
        "preprocessing": {
            "min_df": 10,  # Increased from 5
            "max_df": 0.85,  # Reduced from 0.9
            "ngram_range": (1, 2),  # Reduced from (1,3) to prevent overfitting
            "analyzer": ["word", "char_wb"],
            "strip_accents": "unicode",
            "binary": True,
            "sublinear_tf": True,
        },
    }

    # Optimized parameter grid with better regularization
    PARAM_GRID = {
        # Random Forest - Improved parameters
        "rf__n_estimators": [500, 800, 1000],  # Increased values
        "rf__max_depth": [30, 50, 70],  # Adjusted range
        "rf__min_samples_split": [10, 15],  # Increased to reduce overfitting
        "rf__min_samples_leaf": [4, 8],  # Increased for better generalization
        "rf__max_features": ["sqrt", "log2"],  # Added log2 option
        "rf__bootstrap": [True],
        "rf__criterion": ["gini", "entropy"],  # Added entropy
        "rf__oob_score": [True],

        # SVM - Enhanced regularization
        "svm__C": [0.01, 0.1, 0.5],  # Adjusted for stronger regularization
        "svm__tol": [1e-4, 1e-3],
        "svm__max_iter": [2000],  # Increased iterations
        "svm__class_weight": ["balanced"],
        "svm__dual": [False],

        # Naive Bayes - Adjusted smoothing
        "nb__alpha": [0.8, 1.2, 1.5],  # Adjusted range
        "nb__fit_prior": [True, False],  # Test both options

        # Feature Selection - Optimized
        "feature_selection__k": [800, 1200],  # Adjusted feature count
        "feature_selection__score_func": ["mutual_info_classif"],
    }

    VALIDATION_CONFIG = {
        "early_stopping": {
            "patience": 5,  # Increased from 3
            "min_delta": 0.0005,  # Reduced from 0.001 for finer control
            "monitor": "val_score"
        },
        "validation_split": 0.15,  # Reduced from 0.2
        "shuffle": True,
        "random_state": 42,
    }

    # Enhanced regularization configuration
    REGULARIZATION_CONFIG = {
        "rf_reg": {
            "ccp_alpha": 0.005,  # Reduced from 0.01 for finer pruning
            "max_samples": 0.7,  # Reduced from 0.8
        },
        "svm_reg": {
            "kernel": "linear",
            "shrinking": True
        },
    }

    # Add scoring configuration
    SCORING_CONFIG = {
        "precision_zero_division": 1,  # Handle zero division in precision
        "score_weights": {"precision": 0.4, "recall": 0.4, "f1": 0.2},
    }

    # Error messages
    ERROR_MESSAGES = {
        "MODEL_NOT_FOUND": "Model not found for language {}",
        "PREPROCESSING_FAILED": "Text preprocessing failed",
        "FEATURE_EXTRACTION_FAILED": "Feature extraction failed",
        "PREDICTION_FAILED": "Prediction failed",
        "INVALID_LANGUAGE": 'Invalid language. Must be "vi" or "en"',
        "EMPTY_TEXT": "Empty text provided",
        "SERVER_ERROR": "Internal server error",
    }

    # Model information
    MODEL_INFO = {
        "vi": {
            "name": "Vietnamese Sentiment Model",
            "version": "1.0.0",
            "description": "A model for analyzing Vietnamese sentiment.",
        },
        "en": {
            "name": "English Sentiment Model",
            "version": "1.0.0",
            "description": "A model for analyzing English sentiment.",
        },
    }

================
File: src/data/data_augmentation.py
================
import random
import pandas as pd
import numpy as np
from typing import List, Dict
import nltk
from nltk.corpus import wordnet

try:
    nltk.data.find("corpora/wordnet")
except LookupError:
    nltk.download("wordnet")


class DataAugmentor:
    def __init__(self, language: str):
        self.language = language
        # Load language-specific augmentation resources
        self.synonyms = self._load_synonyms()
        self.templates = self._load_templates()

    def _load_synonyms(self) -> Dict[str, List[str]]:
        """Load word synonyms for the specified language"""
        try:
            if self.language == "en":
                # Use WordNet for English
                synonyms = {}
                for synset in wordnet.all_synsets():
                    word = synset.lemmas()[0].name()
                    synonyms[word] = [l.name() for l in synset.lemmas()[1:]]
                return synonyms
            else:
                # Load Vietnamese synonyms from file or resource
                synonyms_file = f"data/resources/{self.language}_synonyms.txt"
                synonyms = {}
                try:
                    with open(synonyms_file, "r", encoding="utf-8") as f:
                        for line in f:
                            words = line.strip().split(",")
                            synonyms[words[0]] = words[1:]
                except FileNotFoundError:
                    return {}  # Return empty dict if file not found
                return synonyms
        except Exception:
            return {}

    def _load_templates(self) -> List[str]:
        """Load text templates for data augmentation"""
        if self.language == "vi":
            return [
                "Tôi thấy {text}",
                "Theo tôi thì {text}",
                "Tôi nghĩ {text}",
                "Tôi cảm thấy {text}",
                "{text} theo ý kiến của tôi",
            ]
        else:
            return [
                "I think {text}",
                "In my opinion {text}",
                "I feel {text}",
                "I believe {text}",
                "{text} in my view",
            ]

    def synonym_replacement(self, text: str, n: int = 1) -> str:
        """Replace n random words with synonyms"""
        words = text.split()
        new_words = words.copy()
        random_word_list = list(set([word for word in words if word in self.synonyms]))

        n = min(n, len(random_word_list))
        for _ in range(n):
            if not random_word_list:
                break
            random_word = random.choice(random_word_list)
            random_synonym = random.choice(
                self.synonyms.get(random_word, [random_word])
            )
            random_idx = random.choice(
                [i for i, word in enumerate(new_words) if word == random_word]
            )
            new_words[random_idx] = random_synonym
            random_word_list.remove(random_word)

        return " ".join(new_words)

    def random_insertion(self, text: str, n: int = 1) -> str:
        """Insert n random synonyms into random positions"""
        words = text.split()
        new_words = words.copy()

        for _ in range(n):
            if not self.synonyms:
                break
            random_word = random.choice(list(self.synonyms.keys()))
            random_synonym = random.choice(self.synonyms[random_word])
            random_idx = random.randint(0, len(new_words))
            new_words.insert(random_idx, random_synonym)

        return " ".join(new_words)

    def random_swap(self, text: str, n: int = 1) -> str:
        """Randomly swap n pairs of words"""
        words = text.split()
        new_words = words.copy()

        for _ in range(n):
            if len(new_words) < 2:
                break
            idx1, idx2 = random.sample(range(len(new_words)), 2)
            new_words[idx1], new_words[idx2] = new_words[idx2], new_words[idx1]

        return " ".join(new_words)

    def random_deletion(self, text: str, p: float = 0.1) -> str:
        """Randomly delete words with probability p"""
        words = text.split()
        if len(words) == 1:
            return text

        new_words = []
        for word in words:
            if random.random() > p:
                new_words.append(word)

        if not new_words:
            rand_int = random.randint(0, len(words) - 1)
            new_words.append(words[rand_int])

        return " ".join(new_words)

    def template_based(self, text: str) -> str:
        """Apply random template to the text"""
        template = random.choice(self.templates)
        return template.format(text=text)

    def augment_text(self, text: str, methods: List[str] = None) -> List[str]:
        """Apply multiple augmentation methods to generate variations"""
        if methods is None:
            methods = ["synonym", "insert", "swap", "delete", "template"]

        augmented = []
        for method in methods:
            try:
                if method == "synonym":
                    augmented.append(self.synonym_replacement(text))
                elif method == "insert":
                    augmented.append(self.random_insertion(text))
                elif method == "swap":
                    augmented.append(self.random_swap(text))
                elif method == "delete":
                    augmented.append(self.random_deletion(text))
                elif method == "template":
                    augmented.append(self.template_based(text))
            except Exception:
                continue

        return augmented

    def augment_data(self, df: pd.DataFrame, n_per_sample: int = 2) -> pd.DataFrame:
        """Augment entire dataset"""
        augmented_data = []

        for _, row in df.iterrows():
            text = row["text"]
            label = row["label"]

            # Original sample
            augmented_data.append({"text": text, "label": label})

            # Generate augmented samples
            augmented_texts = self.augment_text(text)
            for aug_text in augmented_texts[:n_per_sample]:
                augmented_data.append({"text": aug_text, "label": label})

        return pd.DataFrame(augmented_data)

================
File: src/data/data_collection.py
================
from typing import List, Dict
import pandas as pd
import os
import json
import datetime
from tqdm import tqdm
from google_play_scraper import Sort, reviews
from selenium import webdriver
from selenium.webdriver.common.by import By
from bs4 import BeautifulSoup
import requests

class DataCollector:
    def __init__(self, config):
        self.config = config
        self.output_dir = os.path.join(config.DATA_DIR, "raw_data")
        os.makedirs(self.output_dir, exist_ok=True)

    def collect_google_play_reviews(self, app_id: str, language: str = 'vi', sample_counts: Dict[str, int] = None) -> pd.DataFrame:
        """Collect reviews from Google Play with custom sample counts"""
        try:
            # Calculate total samples needed
            total_samples = 1000  # Default
            if sample_counts:
                total_samples = sum(sample_counts.values())

            # Collect extra reviews to ensure we have enough after filtering
            buffer_multiplier = 2
            result, _ = reviews(
                app_id,
                lang=language,
                country='vn',
                sort=Sort.NEWEST,
                count=total_samples * buffer_multiplier
            )
            
            df = pd.DataFrame(result)
            if df.empty:
                return pd.DataFrame()

            # Map scores to sentiment categories
            df['sentiment'] = df['score'].apply(
                lambda x: 2 if x > 3 else 0 if x < 3 else 1
            )
            
            # Balance dataset according to sample_counts if provided
            if sample_counts:
                balanced_dfs = []
                for sentiment, count in sample_counts.items():
                    sentiment_val = 2 if sentiment == 'positive' else 0 if sentiment == 'negative' else 1
                    sentiment_df = df[df['sentiment'] == sentiment_val]
                    if len(sentiment_df) > count:
                        sentiment_df = sentiment_df.sample(n=count)
                    balanced_dfs.append(sentiment_df)
                df = pd.concat(balanced_dfs)

            # Prepare final dataframe
            df = df[['content', 'sentiment']].rename(columns={'content': 'text'})
            return df

        except Exception as e:
            print(f"Error collecting Google Play reviews: {str(e)}")
            return pd.DataFrame()

    def collect_shopee_reviews(self, product_ids: List[str], sample_counts: Dict[str, int] = None) -> pd.DataFrame:
        """Collect reviews from Shopee with sample count control"""
        reviews_data = []
        
        for product_id in product_ids:
            try:
                url = f"https://shopee.vn/api/v2/item/get_ratings?itemid={product_id}&limit={max_reviews}"
                response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
                data = response.json()
                
                for review in data.get('data', {}).get('ratings', []):
                    rating = review.get('rating_star', 0)
                    comment = review.get('comment', '')
                    
                    if comment:
                        reviews_data.append({
                            'text': comment,
                            'label': 2 if rating > 3 else 0 if rating < 3 else 1,
                            'source': 'shopee'
                        })
            except Exception as e:
                print(f"Lỗi khi thu thập dữ liệu Shopee: {str(e)}")
                continue
                
        return pd.DataFrame(reviews_data)

    def collect_facebook_comments(self, post_ids: List[str], access_token: str, sample_counts: Dict[str, int] = None) -> pd.DataFrame:
        """Collect comments from Facebook with sample count control"""
        comments_data = []
        
        for post_id in post_ids:
            try:
                url = f"https://graph.facebook.com/v12.0/{post_id}/comments"
                params = {
                    'access_token': access_token,
                    'limit': 100
                }
                
                response = requests.get(url, params=params)
                data = response.json()
                
                for comment in data.get('data', []):
                    comments_data.append({
                        'text': comment.get('message', ''),
                        'source': 'facebook',
                        'label': None  # Cần gán nhãn thủ công
                    })
            except Exception as e:
                print(f"Lỗi khi thu thập dữ liệu Facebook: {str(e)}")
                continue
                
        return pd.DataFrame(comments_data)

    def collect_manual_reviews(self, input_file: str, sample_counts: Dict[str, int] = None) -> pd.DataFrame:
        """Import reviews from file with sample count control"""
        try:
            if input_file.endswith('.csv'):
                df = pd.read_csv(input_file)
            else:
                df = pd.read_excel(input_file)

            if 'sentiment' not in df.columns and 'label' in df.columns:
                df['sentiment'] = df['label']

            if sample_counts:
                balanced_dfs = []
                for sentiment, count in sample_counts.items():
                    sentiment_val = 2 if sentiment == 'positive' else 0 if sentiment == 'negative' else 1
                    sentiment_df = df[df['sentiment'] == sentiment_val]
                    if len(sentiment_df) > count:
                        sentiment_df = sentiment_df.sample(n=count)
                    balanced_dfs.append(sentiment_df)
                df = pd.concat(balanced_dfs)

            return df[['text', 'sentiment']]

        except Exception as e:
            print(f"Error loading manual reviews: {str(e)}")
            return pd.DataFrame()

    def save_collected_data(self, df: pd.DataFrame, source: str):
        """Lưu dữ liệu đã thu thập"""
        if not df.empty:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = os.path.join(
                self.output_dir,
                f"{source}_reviews_{timestamp}.csv"
            )
            df.to_csv(output_file, index=False, encoding='utf-8')
            print(f"Đã lưu {len(df)} đánh giá vào {output_file}")

================
File: src/data/data_loader.py
================
import os
import pandas as pd
from typing import Tuple
from src.utils.logger import Logger  # Updated import

class DataLoader:
    def __init__(self, config):
        self.config = config
        self.logger = Logger(__name__).logger

    def load_data(self, language: str) -> pd.DataFrame:
        """Load data with strict two-column enforcement"""
        file_path = os.path.join(
            self.config.DATA_DIR, "raw", f"{language}_social_media.csv"
        )
        
        try:
            # First attempt with comma separator
            df = pd.read_csv(
                file_path,
                encoding='utf-8',
                usecols=[0, 1],  # Only read first two columns
                names=['text', 'label'],  # Force column names
                header=0  # Skip header row
            )
            return self._validate_dataframe(df)
        except Exception as e:
            self.logger.warning(f"Initial load failed: {str(e)}")
            try:
                # Second attempt with flexible parsing
                df = pd.read_csv(
                    file_path,
                    encoding='utf-8',
                    sep=None,
                    engine='python',
                    usecols=[0, 1],  # Only read first two columns
                    names=['text', 'label'],  # Force column names
                    header=0  # Skip header row
                )
                return self._validate_dataframe(df)
            except Exception as e:
                self.logger.error(f"Failed to load data: {str(e)}")
                return pd.DataFrame(columns=['text', 'label'])

    def _validate_dataframe(self, df: pd.DataFrame) -> pd.DataFrame:
        """Enhanced DataFrame validation"""
        required_cols = ['text', 'label']
        
        try:
            # Ensure required columns exist
            if not all(col in df.columns for col in required_cols):
                self.logger.error(f"Missing required columns. Found: {df.columns}")
                return pd.DataFrame(columns=required_cols)
            
            # Clean text data
            df['text'] = df['text'].astype(str).str.strip()
            
            # Convert and validate labels
            df['label'] = pd.to_numeric(df['label'], errors='coerce')
            df = df.dropna(subset=['label'])
            df['label'] = df['label'].astype(int)
            
            # Keep only valid sentiment labels
            mask = df['label'].isin([0, 1, 2])
            df = df[mask].reset_index(drop=True)
            
            if len(df) == 0:
                self.logger.warning("No valid data after validation")
                return pd.DataFrame(columns=required_cols)
            
            self.logger.info(f"Valid samples after validation: {df.shape[0]}")
            return df[required_cols]
            
        except Exception as e:
            self.logger.error(f"Error validating DataFrame: {str(e)}")
            return pd.DataFrame(columns=required_cols)

    def split_data(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:
        """Enhanced data splitting with better balance and validation"""
        from sklearn.model_selection import train_test_split
        
        try:
            if 'label' not in df.columns:
                raise ValueError("No label column found for stratification")
                
            # Calculate class distribution
            class_dist = df['label'].value_counts(normalize=True)
            self.logger.info(f"Class distribution before split: {class_dist.to_dict()}")
            
            # Stratified split maintaining class ratios
            train_df, test_df = train_test_split(
                df,
                test_size=0.3,  # 70-30 split
                stratify=df['label'],
                random_state=42,
                shuffle=True
            )
            
            # Validate split results
            train_dist = train_df['label'].value_counts(normalize=True)
            test_dist = test_df['label'].value_counts(normalize=True)
            
            self.logger.info(f"Training set size: {len(train_df)} samples")
            self.logger.info(f"Test set size: {len(test_df)} samples")
            self.logger.info(f"Training distribution: {train_dist.to_dict()}")
            self.logger.info(f"Test distribution: {test_dist.to_dict()}")
            
            return train_df, test_df
            
        except Exception as e:
            self.logger.error(f"Error in data splitting: {str(e)}")
            # Return empty frames if split fails
            return pd.DataFrame(columns=df.columns), pd.DataFrame(columns=df.columns)

    def load_processed_data(self, language: str) -> pd.DataFrame:
        file_path = os.path.join(
            self.config.DATA_DIR, "processed", f"{language}_processed_data.csv"
        )
        return pd.read_csv(file_path)

    def get_features_and_labels(self, df: pd.DataFrame) -> Tuple[pd.Series, pd.Series]:
        """Get features and labels with NaN validation"""
        # Ensure cleaned_text exists
        if 'cleaned_text' not in df.columns:
            self.logger.error("Column 'cleaned_text' not found in DataFrame")
            raise ValueError("Missing 'cleaned_text' column")
            
        # Convert label to numeric and handle NaN
        labels = pd.to_numeric(df['label'], errors='coerce')
        valid_mask = labels.notna() & labels.isin([0, 1, 2])
        
        if not valid_mask.any():
            self.logger.error("No valid labels found after validation")
            raise ValueError("No valid labels in dataset")
            
        # Filter both features and labels
        features = df['cleaned_text'][valid_mask]
        labels = labels[valid_mask].astype(int)
        
        self.logger.info(f"Using {len(features)} valid samples after NaN removal")
        
        return features, labels
    
    def load_manual_data(self, language: str) -> pd.DataFrame:
        """Load manually labeled data for a given language"""
        file_path = os.path.join(
            self.config.DATA_DIR, 
            "raw", 
            f"{language}_manual_labeled.csv"
        )
        try:
            df = pd.read_csv(file_path)
            self.logger.info(f"Successfully loaded manual data for {language}")
            return df
        except FileNotFoundError:
            self.logger.warning(f"No manual data found for {language} at {file_path}")
            return pd.DataFrame(columns=['text', 'label'])

    def load_data(self, file_path: str) -> pd.DataFrame:
        """Load data from a CSV file."""
        return pd.read_csv(file_path)

================
File: src/data/preprocessor.py
================
import pandas as pd
from src.utils.logger import Logger
from src.features.text_cleaner import TextCleaner


class DataPreprocessor:
    def __init__(self, language: str, config):
        self.language = language
        self.config = config
        self.logger = Logger(__name__).logger
        self.text_cleaner = TextCleaner(language, config)

    def preprocess(self, df: pd.DataFrame) -> pd.DataFrame:
        """Preprocess data with enhanced validation"""
        self.logger.info(f"Preprocessing {self.language} data...")

        try:
            # Ensure we have a copy and data is not empty
            if df is None or df.empty:
                raise ValueError("Empty input data")
            df = df.copy()

            # Validate text column
            if "text" not in df.columns:
                raise ValueError("No 'text' column found")

            # Convert text to string and clean
            df["text"] = df["text"].astype(str).fillna("")
            df["cleaned_text"] = df["text"].apply(self.text_cleaner.clean_text)

            # Remove invalid texts
            df = df[df["cleaned_text"].str.strip().str.len() > 3].copy()

            # Validate label column if it exists
            if "label" in df.columns:
                df["label"] = pd.to_numeric(df["label"], errors="coerce")
                df = df.dropna(subset=["label"])
                df["label"] = df["label"].astype(int)
                df = df[df["label"].isin([0, 1, 2])].copy()

            elif "sentiment" in df.columns:
                df["label"] = df["sentiment"].apply(self._convert_to_basic_sentiment)
                df = df.drop(columns=["sentiment"])
            else:
                df["label"] = 1  # Neutral sentiment

            df = df.reset_index(drop=True)
            if len(df) == 0:
                raise ValueError("No valid samples after preprocessing")

            self.logger.info(f"Preprocessed {len(df)} valid samples")
            return df

        except Exception as e:
            self.logger.error(f"Preprocessing error: {str(e)}")
            # Return empty DataFrame with required columns
            return pd.DataFrame(columns=["text", "cleaned_text", "label"])

    def _convert_to_basic_sentiment(self, label):
        """Convert detailed emotion label to basic sentiment"""
        if label in self.config.EMOTION_LABELS["POSITIVE"].keys():
            return 2  # positive
        elif label in self.config.EMOTION_LABELS["NEGATIVE"].keys():
            return 0  # negative
        else:
            return 1  # neutral

    def save_processed_data(self, df: pd.DataFrame, output_path: str):
        df.to_csv(output_path, index=False)
        self.logger.info(f"Saved processed data to {output_path}")

================
File: src/docs/algorithm_overview.py
================
class TongQuanThuatToan:
    """
    Tổng quan về các thuật toán sử dụng trong hệ thống phân tích cảm xúc.
    """

    @staticmethod
    def feature_extraction_algorithms():
        """
        Các thuật toán trích xuất đặc trưng (Feature Extraction)
        """
        return {
            "TF-IDF": {
                "name": "Term Frequency-Inverse Document Frequency",
                "purpose": "Chuyển đổi văn bản thành vector số dựa trên tần suất từ",
                "implementation": "sklearn.feature_extraction.text.TfidfVectorizer",
                "parameters": {
                    "max_features": "2000 - Giới hạn số lượng đặc trưng",
                    "ngram_range": "(1,3) - Sử dụng unigrams, bigrams và trigrams",
                    "min_df": "2 - Loại bỏ các từ hiếm",
                    "max_df": "0.95 - Loại bỏ các từ phổ biến"
                }
            },
            "SVD": {
                "name": "Singular Value Decomposition",
                "purpose": "Giảm chiều dữ liệu và trích xuất các đặc trưng quan trọng",
                "implementation": "sklearn.decomposition.TruncatedSVD",
                "parameters": {
                    "n_components": "95 hoặc min(features-1, samples-1)",
                    "algorithm": "randomized"
                }
            },
            "Character N-grams": {
                "name": "Character Level Features",
                "purpose": "Phân tích mẫu ký tự, hữu ích cho lỗi chính tả và biến thể từ",
                "implementation": "Custom TfidfVectorizer với analyzer='char'",
                "parameters": {
                    "ngram_range": "(2,4)",
                    "max_features": "500"
                }
            }
        }

    @staticmethod
    def classification_algorithms():
        """
        Các thuật toán phân loại (Classification)
        """
        return {
            "RandomForest": {
                "name": "Random Forest Classifier",
                "purpose": "Phân loại tổng hợp dựa trên nhiều cây quyết định",
                "strengths": [
                    "Hiệu quả với dữ liệu có nhiều chiều",
                    "Chống overfitting tốt",
                    "Có thể xử lý dữ liệu không cân bằng"
                ],
                "parameters": {
                    "n_estimators": "200-300 cây",
                    "max_depth": "20-30 độ sâu tối đa",
                    "class_weight": "balanced"
                }
            },
            "LinearSVC": {
                "name": "Linear Support Vector Classification",
                "purpose": "Phân loại tuyến tính dựa trên Support Vector Machines",
                "strengths": [
                    "Hiệu quả với văn bản có chiều cao",
                    "Tốt cho dữ liệu phân tách tuyến tính",
                    "Nhanh và hiệu quả bộ nhớ"
                ],
                "parameters": {
                    "C": [0.1, 1.0, 10.0],
                    "max_iter": 2000,
                    "class_weight": "balanced"
                }
            },
            "MultinomialNB": {
                "name": "Multinomial Naive Bayes",
                "purpose": "Phân loại xác suất dựa trên định lý Bayes",
                "strengths": [
                    "Hiệu quả với dữ liệu văn bản",
                    "Nhanh trong huấn luyện và dự đoán",
                    "Hoạt động tốt với ít dữ liệu"
                ],
                "parameters": {
                    "alpha": [0.1, 0.5, 1.0],
                    "fit_prior": [True, False]
                }
            }
        }

    @staticmethod
    def text_augmentation_techniques():
        """
        Các kỹ thuật tăng cường dữ liệu văn bản
        """
        return {
            "Synonym Replacement": {
                "description": "Thay thế từ bằng từ đồng nghĩa",
                "implementation": "Sử dụng từ điển đồng nghĩa hoặc thay thế ký tự",
                "purpose": "Tăng đa dạng từ vựng"
            },
            "Random Swap": {
                "description": "Hoán đổi vị trí ngẫu nhiên các từ",
                "implementation": "Thuật toán hoán đổi ngẫu nhiên",
                "purpose": "Tạo biến thể cấu trúc câu"
            },
            "Random Deletion": {
                "description": "Xóa ngẫu nhiên một số từ",
                "implementation": "Xóa với xác suất cho trước",
                "purpose": "Mô phỏng câu thiếu từ"
            },
            "Text Humanization": {
                "description": "Thêm biến thể người dùng thực",
                "implementation": "Thêm typo, emojis, từ lóng",
                "purpose": "Tăng tính thực tế của dữ liệu"
            }
        }

    @staticmethod
    def evaluation_metrics():
        """
        Các độ đo đánh giá
        """
        return {
            "Classification Report": {
                "metrics": ["Precision", "Recall", "F1-score"],
                "purpose": "Đánh giá chi tiết từng lớp"
            },
            "Confusion Matrix": {
                "purpose": "Phân tích chi tiết dự đoán đúng/sai",
                "visualization": "Heatmap with seaborn"
            },
            "ROC Curve": {
                "purpose": "Đánh giá hiệu suất phân loại ở các ngưỡng khác nhau",
                "metrics": ["AUC-ROC"]
            }
        }

    @staticmethod
    def get_pipeline_overview():
        """
        Tổng quan về pipeline xử lý
        """
        return {
            "1. Data Preprocessing": {
                "steps": [
                    "Làm sạch văn bản",
                    "Chuẩn hóa ký tự",
                    "Tokenization",
                    "Loại bỏ stopwords"
                ]
            },
            "2. Feature Engineering": {
                "steps": [
                    "TF-IDF Vectorization",
                    "Character N-grams",
                    "Dimensionality Reduction (SVD)",
                    "Feature Scaling"
                ]
            },
            "3. Model Training": {
                "steps": [
                    "Ensemble Learning",
                    "Cross Validation",
                    "Hyperparameter Optimization",
                    "Model Selection"
                ]
            },
            "4. Evaluation": {
                "steps": [
                    "Performance Metrics",
                    "Error Analysis",
                    "Visualization",
                    "Model Comparison"
                ]
            }
        }

    @staticmethod
    def get_optimization_techniques():
        """
        Các kỹ thuật tối ưu hóa
        """
        return {
            "Hyperparameter Tuning": {
                "method": "Grid Search với Cross Validation",
                "parameters": {
                    "RandomForest": ["n_estimators", "max_depth", "min_samples_split"],
                    "LinearSVC": ["C", "max_iter", "tol"],
                    "MultinomialNB": ["alpha", "fit_prior"]
                }
            },
            "Feature Selection": {
                "method": "SelectKBest với chi2",
                "purpose": "Chọn đặc trưng quan trọng nhất"
            },
            "Ensemble Methods": {
                "technique": "Voting Classifier",
                "purpose": "Kết hợp dự đoán từ nhiều mô hình"
            },
            "Class Balancing": {
                "method": "Class Weights",
                "purpose": "Xử lý dữ liệu không cân bằng"
            }
        }

    @staticmethod
    def get_model_selection_criteria():
        """
        Tiêu chí lựa chọn mô hình
        """
        return {
            "Performance": {
                "metrics": ["F1-score", "Accuracy", "ROC-AUC"],
                "importance": "High"
            },
            "Training Time": {
                "consideration": "Thời gian huấn luyện hợp lý",
                "importance": "Medium"
            },
            "Memory Usage": {
                "consideration": "Sử dụng bộ nhớ hiệu quả",
                "importance": "Medium"
            },
            "Interpretability": {
                "consideration": "Khả năng giải thích kết quả",
                "importance": "Medium-High"
            }
        }

================
File: src/features/feature_engineering.py
================
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from src.config import Config
from src.utils.logger import Logger
import numpy as np
import os
import joblib
import re


class FeatureExtractor:
    def __init__(self, language: str, config: Config):
        try:
            self.language = language
            self.config = config
            self.is_fitted = False
            self.logger = Logger(__name__).logger

            # Initialize all required attributes
            self.tfidf = TfidfVectorizer(max_features=config.MAX_FEATURES)
            self.svd = TruncatedSVD(n_components=config.SVD_COMPONENTS) 
            self.scaler = StandardScaler()
            self.feature_dims = None
            self.vocabulary = None
            self.n_features = None
            self.min_components = 2
            self.word_vectorizer = None
            self.char_vectorizer = None

            # Load lexicons and initialize vectorizers
            self.sentiment_lexicon = self._load_sentiment_lexicon()
            self.positive_words = self._load_word_list("positive")
            self.negative_words = self._load_word_list("negative")

            # Try loading existing extractors first
            if not self._initialize_extractors():
                self._initialize_base_extractors()

        except Exception as e:
            print(f"Error initializing FeatureExtractor: {str(e)}")
            raise

    def preprocess_text(self, text: str):
        # Implement text preprocessing logic
        return text

    def _initialize_base_extractors(self):
        """Initialize feature extractors with documented parameters"""

        # TF-IDF vectorizer
        self.tfidf = TfidfVectorizer(
            max_features=2000,
            ngram_range=(1, 3),
            min_df=2,
            max_df=0.95,
            strip_accents="unicode",
            token_pattern=r"(?u)\b\w+\b",
            lowercase=True,
        )

        # SVD for dimensionality reduction
        self.svd = TruncatedSVD(n_components=None)

        # Word and character level vectorizers
        self.word_vectorizer = TfidfVectorizer(
            max_features=2000,
            ngram_range=(1, 3),
            min_df=2,
            max_df=0.95,
            strip_accents="unicode",
            token_pattern=r"(?u)\b\w+\b",
            lowercase=True,
        )

        self.char_vectorizer = TfidfVectorizer(
            analyzer="char", ngram_range=(2, 4), max_features=500
        )

        self.scaler = MinMaxScaler()

    def _initialize_extractors(self):
        """Load pretrained extractors if available"""
        model_path = os.path.join(
            self.config.DATA_DIR, "models", f"{self.language}_sentiment_model.pkl"
        )

        if os.path.exists(model_path):
            try:
                model_info = joblib.load(model_path)
                if "feature_extractor" in model_info:
                    # Load all vectorizers and transformers
                    self.tfidf = model_info["feature_extractor"]["vectorizer"]
                    self.svd = model_info["feature_extractor"]["svd"]
                    self.scaler = model_info["feature_extractor"]["scaler"]
                    self.word_vectorizer = model_info["feature_extractor"].get(
                        "word_vectorizer"
                    )
                    self.char_vectorizer = model_info["feature_extractor"].get(
                        "char_vectorizer"
                    )
                    self.feature_dims = model_info["feature_extractor"].get(
                        "feature_dims"
                    )
                    self.vocabulary = self.tfidf.vocabulary_

                    # Initialize vectorizers if they don't exist in saved model
                    if self.word_vectorizer is None:
                        self._initialize_text_vectorizers()

                    self.is_fitted = True
                    print(
                        f"Loaded feature extractor with {self.feature_dims} dimensions"
                    )
                    return True
            except Exception as e:
                print(f"Error loading pretrained extractors: {str(e)}")
                self._initialize_text_vectorizers()
        return False

    def _initialize_text_vectorizers(self):
        """Initialize word and character vectorizers"""
        self.word_vectorizer = TfidfVectorizer(
            max_features=1000,
            ngram_range=(1, 2),
            min_df=1,
            max_df=1.0,
            strip_accents="unicode",
            token_pattern=r"(?u)\b\w+\b",
            lowercase=True,
        )

        self.char_vectorizer = TfidfVectorizer(
            analyzer="char", ngram_range=(2, 4), max_features=500, min_df=1, max_df=1.0
        )

    def _load_sentiment_lexicon(self):
        """Load sentiment lexicon based on language"""
        try:
            lexicon_path = os.path.join(
                self.config.DATA_DIR,
                "lexicons",
                f"{self.language}_sentiment_lexicon.txt",
            )
            if os.path.exists(lexicon_path):
                with open(lexicon_path, "r", encoding="utf-8") as f:
                    return set(line.strip() for line in f)
            return set()
        except Exception:
            return set()

    def _load_word_list(self, category):
        """Load positive/negative word lists"""
        try:
            path = os.path.join(
                self.config.DATA_DIR,
                "lexicons",
                f"{self.language}_{category}_words.txt",
            )
            if os.path.exists(path):
                with open(path, "r", encoding="utf-8") as f:
                    return set(line.strip() for line in f)
            return set()
        except Exception:
            return set()

    def extract_features(self, texts):
        """Enhanced feature extraction with proper array handling"""
        try:
            # Validate input
            if texts is None or len(texts) == 0:
                raise ValueError("Empty input texts provided")

            # Convert input
            if isinstance(texts, str):
                texts = [texts]
            elif isinstance(texts, pd.Series):
                texts = texts.tolist()

            # Clean and validate texts
            valid_texts = [str(t).strip() for t in texts if str(t).strip()]
            if not valid_texts:
                raise ValueError("No valid text content after cleaning")

            # Extract features based on fit status
            if not self.is_fitted:
                # Training phase - fit and transform
                word_features = self.word_vectorizer.fit_transform(
                    valid_texts
                ).toarray()
                char_features = self.char_vectorizer.fit_transform(
                    valid_texts
                ).toarray()
                tfidf_features = self.tfidf.fit_transform(valid_texts).toarray()
            else:
                # Prediction phase - transform only
                word_features = self.word_vectorizer.transform(valid_texts).toarray()
                char_features = self.char_vectorizer.transform(valid_texts).toarray()
                tfidf_features = self.tfidf.transform(valid_texts).toarray()

            # Add new linguistic features
            linguistic_features = self._extract_linguistic_features(valid_texts)

            # Add emotion lexicon features
            emotion_features = self._extract_emotion_features(valid_texts)

            # Add semantic features if available
            semantic_features = self._extract_semantic_features(valid_texts)

            # Debugging: Print shapes of individual feature arrays
            print(f"Word features shape: {word_features.shape}")
            print(f"Char features shape: {char_features.shape}")
            print(f"Tfidf features shape: {tfidf_features.shape}")
            print(f"Linguistic features shape: {linguistic_features.shape}")
            print(f"Emotion features shape: {emotion_features.shape}")
            if semantic_features is not None:
                print(f"Semantic features shape: {semantic_features.shape}")

            # Ensure all feature arrays are 2D and have consistent sample size
            features_list = [
                word_features,
                char_features,
                tfidf_features,
                linguistic_features,
                emotion_features,
            ]

            if semantic_features is not None:
                features_list.append(semantic_features)

            num_samples = len(valid_texts)
            for i, feat in enumerate(features_list):
                # Check if feature array is None
                if feat is None:
                    raise ValueError(f"Feature array at index {i} is None")

                # Ensure feature arrays are 2D
                if feat.ndim == 1:
                    feat = feat.reshape(-1, 1)
                    features_list[i] = feat

                # Check if the number of samples matches
                if feat.shape[0] != num_samples:
                    raise ValueError(
                        f"Feature array at index {i} has inconsistent number of samples. Expected {num_samples}, got {feat.shape[0]}"
                    )

            # Combine all features
            all_features = np.hstack(features_list)
            print(f"All features shape after hstack: {all_features.shape}")

            # Scale features
            if not self.is_fitted:
                self.scaler.fit(all_features)
                self.is_fitted = True

            scaled_features = self.scaler.transform(all_features)

            return scaled_features

        except Exception as e:
            print(f"Feature extraction failed: {str(e)}")
            print(f"Debug info - Input size: {len(texts)}")
            print(
                f"Debug info - Features shape: {[f.shape for f in features_list if f is not None]}"
            )
            print(f"Debug info - Is fitted: {self.is_fitted}")
            print(
                f"Debug info - Vectorizers: word={self.word_vectorizer is not None}, char={self.char_vectorizer is not None}"
            )
            raise

    def _extract_and_scale_features(self, tfidf_features, texts):
        """Extract and scale features using SVD"""
        n_components = min(
            tfidf_features.shape[1] - 1, len(texts) - 1, self.config.MAX_FEATURES
        )
        self.svd.n_components = n_components

        svd_features = self.svd.fit_transform(tfidf_features)
        scaled_features = self.scaler.fit_transform(svd_features)

        return scaled_features

    def _extract_statistical_features(self, texts):
        """Enhanced statistical features for better sentiment detection"""
        features = []
        for text in texts:
            text = str(text)
            words = text.split()

            # Basic features
            length = len(text)
            word_count = len(text.split())
            avg_word_length = length / max(word_count, 1)

            # Additional features
            unique_chars = len(set(text))
            digit_count = sum(c.isdigit() for c in text)
            upper_count = sum(c.isupper() for c in text)
            space_count = sum(c.isspace() for c in text)
            special_chars = sum(not c.isalnum() for c in text)

            # New advanced features
            sentiment_words = len([w for w in words if w in self.sentiment_lexicon])
            exclamation_count = text.count("!")
            question_count = text.count("?")
            emoji_count = len(re.findall(r"[\U0001F300-\U0001F9FF]", text))

            # Word patterns
            caps_word_count = len([w for w in words if w.isupper()])
            word_length_variance = np.var([len(w) for w in words]) if words else 0

            # Sentiment patterns
            positive_words = len([w for w in words if w in self.positive_words])
            negative_words = len([w for w in words if w in self.negative_words])

            # Additional sentiment-specific features
            exclamation_sequences = len(re.findall(r"!+", text))
            question_sequences = len(re.findall(r"\?+", text))
            uppercase_words = sum(1 for word in words if word.isupper())
            word_count = len(words)

            # Emotional pattern features
            positive_emoticons = len(re.findall(r"[:;]-?[\)pP]", text))
            negative_emoticons = len(re.findall(r"[:;]-?[\(]", text))
            emoji_pattern = len(re.findall(r"[\U0001F600-\U0001F64F]", text))

            # Sentiment word ratios
            positive_ratio = sum(
                1 for word in words if word in self.positive_words
            ) / max(word_count, 1)
            negative_ratio = sum(
                1 for word in words if word in self.negative_words
            ) / max(word_count, 1)

            features.append(
                [
                    length,
                    word_count,
                    avg_word_length,
                    unique_chars,
                    digit_count,
                    upper_count,
                    space_count,
                    special_chars,
                    sentiment_words / max(len(words), 1),
                    exclamation_count,
                    question_count,
                    emoji_count,
                    caps_word_count / max(len(words), 1),
                    word_length_variance,
                    positive_words / max(len(words), 1),
                    negative_words / max(len(words), 1),
                    exclamation_sequences,
                    question_sequences,
                    uppercase_words / max(word_count, 1),
                    positive_emoticons,
                    negative_emoticons,
                    emoji_pattern,
                    positive_ratio,
                    negative_ratio,
                ]
            )

        return np.array(features, dtype=np.float32)

    def _extract_linguistic_features(self, texts):
        """Extract linguistic features from texts"""
        features = []
        for text in texts:
            text = str(text)
            words = text.split()

            # Syntactic features
            sentence_count = len([s for s in text.split(".") if len(s.strip()) > 0])
            avg_words_per_sentence = len(words) / max(sentence_count, 1)
            avg_word_length = sum(len(w) for w in words) / max(len(words), 1)

            # Basic features
            punctuation_ratio = sum(c in ".,!?;:" for c in text) / max(len(text), 1)
            capital_ratio = sum(c.isupper() for c in text) / max(len(text), 1)

            # Stop words ratio
            stop_words = self.config.LANGUAGE_CONFIGS[self.language]["stop_words"]
            if isinstance(stop_words, str) and stop_words == "english":
                from nltk.corpus import stopwords

                stop_words = set(stopwords.words("english"))
            else:
                stop_words = set(stop_words)
            stop_word_ratio = sum(w.lower() in stop_words for w in words) / max(
                len(words), 1
            )

            # Combine basic features
            feature_vector = [
                sentence_count,
                avg_words_per_sentence,
                avg_word_length,
                punctuation_ratio,
                capital_ratio,
                stop_word_ratio,
            ]

            features.append(feature_vector)

        return np.array(features, dtype=np.float32)

    def _extract_emotion_features(self, texts):
        """Extract emotion-based features from texts"""
        features = []
        for text in texts:
            text = str(text).lower()
            words = text.split()

            # Get emotion keywords for current language
            emotion_keywords = self.config.EMOTION_KEYWORDS.get(self.language, {})

            # Calculate emotion scores
            emotion_scores = []
            for emotion, keywords in sorted(
                emotion_keywords.items()
            ):  # Sort for consistent order
                score = sum(1 for word in words if word in keywords)
                emotion_scores.append(score / max(len(words), 1))

            # Additional emotion indicators
            exclamation_ratio = text.count("!") / max(len(text), 1)
            question_ratio = text.count("?") / max(len(text), 1)
            emoji_ratio = len(re.findall(r"[\U0001F300-\U0001F9FF]", text)) / max(
                len(text), 1
            )

            # Combine all emotion features
            feature_vector = [
                *emotion_scores,
                exclamation_ratio,
                question_ratio,
                emoji_ratio,
            ]
            features.append(feature_vector)

        return np.array(features, dtype=np.float32)

    def _extract_semantic_features(self, texts):
        """Extract semantic features from texts if available"""
        if not hasattr(self, "word_vectors"):
            return None

        vector_size = getattr(self.word_vectors, "vector_size", 100)
        features = []

        for text in texts:
            words = str(text).lower().split()
            word_vectors = []

            for word in words:
                try:
                    if word in self.word_vectors:
                        word_vectors.append(self.word_vectors[word])
                except:
                    continue

            if word_vectors:
                avg_vector = np.mean(word_vectors, axis=0)
            else:
                avg_vector = np.zeros(vector_size)

            features.append(avg_vector)

        return np.array(features, dtype=np.float32)

================
File: src/features/text_cleaner.py
================
import re
import unicodedata
from underthesea import word_tokenize  # For Vietnamese
from nltk.tokenize import word_tokenize as en_tokenize
from nltk.corpus import stopwords


class TextCleaner:
    """Text cleaning and preprocessing class"""

    def __init__(self, language: str, config):
        self.language = language
        self.config = config
        self.stop_words = self._get_stop_words()

    def _get_stop_words(self):
        return self.config.LANGUAGE_CONFIGS[self.language]["stop_words"]

    def clean_text(self, text: str) -> str:
        """Clean and normalize input text"""
        # Remove HTML
        text = re.sub(r"<[^>]+>", "", text)

        # Normalize text to NFC form to standardize characters
        text = unicodedata.normalize("NFC", text)

        # Remove characters that are not letters or whitespace
        text = re.sub(r"[^\w\s]", " ", text, flags=re.UNICODE)

        # Remove digits and underscores
        text = re.sub(r"[\d_]+", " ", text)

        text = text.lower()

        # Tokenize based on languages
        if self.language == "vi":
            tokens = word_tokenize(text)
        else:
            tokens = en_tokenize(text)

        # Remove stop words
        tokens = [t for t in tokens if t not in self.stop_words]

        return " ".join(tokens)

================
File: src/main.py
================
import argparse
import json
from logging import config
import subprocess
from anyio import open_process
from matplotlib import pyplot as plt
import pandas as pd
import os
import sys
import joblib
from datetime import datetime
import psutil
from rich.prompt import Prompt
import requests
import socket
import time
import logging
from logging.handlers import RotatingFileHandler

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

from src.data.data_collection import DataCollector
from src.utils.server_utils import force_kill_port, is_port_in_use
from src.api.app import app, start_api_server, stop_api_server, get_api_status
from src.config import Config
from src.data.data_loader import DataLoader
from src.data.preprocessor import DataPreprocessor
from src.features.feature_engineering import FeatureExtractor
from src.models.model_trainer import EnhancedModelTrainer
from src.models.model_predictor import SentimentPredictor
from src.utils.evaluation import ModelEvaluator
from src.utils.logger import Logger
from src.utils.menu import TerminalMenu
from scripts.generate_training_data import TrainingDataGenerator
from src.visualization import ModelVisualizer

# Add logger initialization at the top level
logger = Logger(__name__).logger


def parse_args():
    parser = argparse.ArgumentParser(description="Sentiment Analysis CLI")
    parser.add_argument(
        "--mode",
        type=str,
        required=True,
        choices=["train", "predict", "evaluate"],
        help="Mode of operation: train, predict, or evaluate",
    )
    parser.add_argument(
        "--language",
        type=str,
        required=True,
        choices=["en", "vi"],
        help="Language for sentiment analysis (en/vi)",
    )
    parser.add_argument(
        "--input", type=str, help="Input file path for prediction or evaluation"
    )
    parser.add_argument(
        "--output", type=str, help="Output file path for saving results"
    )
    return parser.parse_args()


def train(language: str, config: Config):
    logger = Logger(__name__).logger
    logger.info(f"Starting training for {language} language")

    try:
        # Initialize components with proper error handling
        data_loader = DataLoader(config)
        preprocessor = DataPreprocessor(language, config)
        feature_extractor = None

        try:
            feature_extractor = FeatureExtractor(language, config)
            if feature_extractor is None:
                raise ValueError("Failed to initialize feature extractor")
        except Exception as fe:
            logger.error(f"Feature extractor initialization failed: {str(fe)}")
            raise

        # initialize model trainer
        model_trainer = EnhancedModelTrainer(language, config)
        if feature_extractor:
            model_trainer.feature_extractor = feature_extractor

        # Load and validate data with error checks
        file_path = os.path.join(config.DATA_DIR, 'raw', f'{language}_social_media.csv')
        df = data_loader.load_data(file_path)
        if df is None or df.empty:
            raise ValueError("No data loaded")

        processed_df = preprocessor.preprocess(df)
        if processed_df is None or processed_df.empty:
            raise ValueError("No valid samples after preprocessing")

        # Split and extract features with validation
        train_df, test_df = data_loader.split_data(processed_df)
        if train_df.empty or test_df.empty:
            raise ValueError("Error in train-test split")

        X_train, y_train = data_loader.get_features_and_labels(train_df)
        if len(X_train) == 0 or len(y_train) == 0:
            raise ValueError("No training samples available")

        # Record start time
        start_time = datetime.now()

        # Train model with error handling
        models = model_trainer.train_with_grid_search(X_train, y_train)
        if not models:
            raise ValueError("Model training failed - no valid models returned")

        # Calculate training time
        training_time = (datetime.now() - start_time).total_seconds()

        # Get metrics for best performing model
        best_model_name = max(
            models.items(), key=lambda x: getattr(x[1], "best_score_", 0)
        )[0]
        best_model = models[best_model_name]

        # Evaluate on test set
        X_test, y_test = data_loader.get_features_and_labels(test_df)
        X_test_features = feature_extractor.extract_features(X_test)

        # Calculate metrics using the best model
        test_score = best_model.score(X_test_features, y_test)

        final_metrics = {
            "test_score": test_score,
            "best_model": best_model_name,
            "training_time": training_time,
        }

        if hasattr(best_model, "feature_importances_"):
            final_metrics["feature_importance"] = (
                best_model.feature_importances_.tolist()
            )

        # Save final model with metrics
        model_trainer.save_final_model(models, final_metrics)

        logger.info("Training completed successfully")
        logger.info(f"Total training time: {training_time:.2f} seconds")
        logger.info(f"Best model: {best_model_name} with test score: {test_score:.4f}")

        return models

    except Exception as e:
        logger.error(f"Training failed: {str(e)}")
        # Load last checkpoint if available
        checkpoint_dir = os.path.join(config.DATA_DIR, "checkpoints")
        if os.path.exists(checkpoint_dir):
            checkpoints = sorted(
                [
                    f
                    for f in os.listdir(checkpoint_dir)
                    if f.startswith(f"{language}_checkpoint")
                ]
            )
            if checkpoints:
                latest_checkpoint = joblib.load(
                    os.path.join(checkpoint_dir, checkpoints[-1])
                )
                logger.info(f"Loaded latest checkpoint from {checkpoints[-1]}")
                return latest_checkpoint["model_state"]
        raise e


def predict(language: str, input_file: str, output_file: str, config: Config):
    logger = Logger(__name__).logger
    logger.info(f"Starting prediction for {language} language")

    # Initialize components
    predictor = SentimentPredictor(language, config)
    preprocessor = DataPreprocessor(language, config)
    feature_extractor = FeatureExtractor(language, config)

    # Load and process input data
    df = pd.read_csv(input_file)
    processed_df = preprocessor.preprocess(df)
    features = feature_extractor.extract_features(processed_df["cleaned_text"])

    # Make predictions
    predictions = predictor.predict(features)
    df["sentiment"] = predictions
    df.to_csv(output_file, index=False)

    logger.info(f"Predictions saved to {output_file}")

    # Output prediction results
    for text, sentiment in zip(df["text"], df["sentiment"]):
        print(f"Text: {text}")
        print(f"Prediction: {sentiment}")


def evaluate(language: str, input_file: str, config: Config):
    logger = Logger(__name__).logger
    logger.info(f"Starting evaluation for {language} language")

    # Initialize components
    predictor = SentimentPredictor(language, config)
    preprocessor = DataPreprocessor(language, config)
    feature_extractor = FeatureExtractor(language, config)
    evaluator = ModelEvaluator(language)

    # Load and process test data
    df = pd.read_csv(input_file)
    processed_df = preprocessor.preprocess(df)
    features = feature_extractor.extract_features(processed_df["cleaned_text"])

    # Make predictions and evaluate
    predictions = predictor.predict(features)
    probabilities = predictor.predict_proba(features)
    results = evaluator.evaluate(processed_df["label"], predictions, probabilities)

    logger.info("Evaluation results:")
    logger.info(results["classification_report"])


def validate_paths(input_file: str = None, output_file: str = None):
    """Validate input and output paths"""
    if input_file:
        if not os.path.exists(input_file):
            raise FileNotFoundError(f"Input file not found: {input_file}")

    if output_file:
        output_dir = os.path.dirname(output_file)
        if output_dir:
            os.makedirs(output_dir, exist_ok=True)


def test_model(language: str, config: Config):
    """Interactive model testing"""
    logger = Logger(__name__).logger
    menu = TerminalMenu(config)  # Pass config here

    try:
        # Initialize components
        predictor = SentimentPredictor(language, config)
        preprocessor = DataPreprocessor(language, config)
        feature_extractor = FeatureExtractor(language, config)

        while True:
            try:
                # Get test text
                test_text = menu.get_test_text()
                if test_text.lower() == "q":
                    break

                # Create DataFrame with single text
                df = pd.DataFrame({"text": [test_text]})

                # Process text
                processed_df = preprocessor.preprocess(df)
                if processed_df.empty:
                    menu.display_result(False, "Text preprocessing failed")
                    continue

                # Extract features
                features = feature_extractor.extract_features(
                    processed_df["cleaned_text"]
                )
                if features is None or features.size == 0:
                    menu.display_result(False, "Feature extraction failed")
                    continue

                # Get predictions with emotion analysis
                emotion_result = predictor.predict_emotion(features, test_text)

                # Display results
                menu.display_emotion_result(test_text, emotion_result)

            except Exception as e:
                logger.error(f"Error processing text: {str(e)}")
                menu.display_result(False, f"Error: {str(e)}")

    except Exception as e:
        logger.error(f"Test model error: {str(e)}")
        menu.display_result(False, f"Error: {str(e)}")

    return


def restore_model(language: str, config: Config):
    """Restore model from checkpoint"""
    logger = Logger(__name__).logger
    trainer = EnhancedModelTrainer(language, config)

    try:
        # List available checkpoints
        checkpoints = trainer.list_checkpoints()
        if not checkpoints:
            logger.warning("No checkpoints available")
            return None

        # Display available checkpoints
        print("\nAvailable checkpoints:")
        for i, cp in enumerate(checkpoints):
            print(f"{i+1}. {cp['filename']}")
            print(f"   Timestamp: {cp['timestamp']}")
            print(f"   Epoch: {cp['epoch']}")
            print(f"   Score: {cp['metrics']:.4f if cp['metrics'] else 'N/A'}")

        # Get user choice
        choice = input(
            "\nEnter checkpoint number to restore (or press Enter for latest): "
        )
        if choice.strip():
            idx = int(choice) - 1
            if 0 <= idx < len(checkpoints):
                checkpoint_name = checkpoints[idx]["filename"]
            else:
                raise ValueError("Invalid checkpoint number")
        else:
            checkpoint_name = None

        # Restore model
        model, metrics = trainer.restore_from_checkpoint(checkpoint_name)
        if model is not None:
            logger.info("Model restored successfully")
            logger.info(f"Model metrics: {metrics}")
            return model

    except Exception as e:
        logger.error(f"Error restoring model: {str(e)}")
        return None


def display_metrics(language: str, config: Config):
    """Display current model metrics and performance visualization"""
    logger = Logger(__name__).logger
    model_path = os.path.join(
        config.DATA_DIR, "models", f"{language}_sentiment_model.pkl"
    )
    metrics_img_path = os.path.join(
        config.DATA_DIR, "metrics", f"{language}_model_metrics.png"
    )
    os.makedirs(os.path.dirname(metrics_img_path), exist_ok=True)

    try:
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"No model found for {language}")

        # Load model info
        model_info = joblib.load(model_path)

        # Print basic info
        print("\n=== Model Performance Metrics ===")
        print(f"Language: {language.upper()}")

        # Extract metrics
        if "metrics" not in model_info:
            raise ValueError("No metrics found in model")

        metrics = model_info["metrics"]

        # Extract scores
        scores = []
        model_names = []

        if isinstance(metrics, dict):
            model_data = metrics.get("models", {})
            if not model_data:
                model_data = {"base_model": metrics}

            for model_name, model_metrics in model_data.items():
                if isinstance(model_metrics, dict):
                    # Try to get score from various possible keys
                    score = None
                    for score_key in [
                        "best_score",
                        "test_score",
                        "f1_score",
                        "accuracy",
                    ]:
                        if score_key in model_metrics:
                            score = float(model_metrics[score_key])
                            break

                    if score is not None:
                        scores.append(score)
                        model_names.append(model_name)
                        print(f"\n{model_name.upper()} Score: {score:.4f}")

        if not scores:
            raise ValueError("No valid scores found in metrics")

        # Create simple bar plot of scores
        plt.figure(figsize=(15, 5))

        # Plot 1: Model Scores
        plt.subplot(1, 2, 1)
        bars = plt.bar(range(len(scores)), scores, color=["blue", "green", "red"])
        plt.xticks(range(len(model_names)), model_names, rotation=45)
        plt.title(f"Model Performance Comparison\n{language.upper()}")
        plt.xlabel("Models")
        plt.ylabel("Score")
        plt.ylim(0, 1)

        # Add score labels
        for bar, score in zip(bars, scores):
            plt.text(
                bar.get_x() + bar.get_width() / 2,
                score + 0.01,
                f"{score:.3f}",
                ha="center",
            )

        # Plot 2: Overtraining Analysis
        plt.subplot(1, 2, 2)
        has_data = False

        # Kiểm tra dữ liệu training history
        if isinstance(metrics, dict):
            # Thử lấy từ các vị trí có thể
            history_sources = [
                metrics.get('training_history', {}),
                metrics.get('models', {}),
            ]

            for history in history_sources:
                if history:  # Nếu không rỗng
                    for model_name, model_data in history.items():
                        if isinstance(model_data, dict):
                            train_scores = model_data.get('train_scores', [])
                            valid_scores = model_data.get('valid_scores', [])

                            if train_scores and valid_scores:  # Nếu có dữ liệu
                                has_data = True
                                epochs = range(1, len(train_scores) + 1)
                                
                                # Plot with different colors for each model
                                train_line, = plt.plot(epochs, train_scores, 'o-', 
                                    label=f'{model_name}_train', alpha=0.7)
                                val_line, = plt.plot(epochs, valid_scores, 's--', 
                                    label=f'{model_name}_val', alpha=0.7)

                                # Print scores for debugging
                                print(f"\n{model_name} Training History:")
                                print(f"Training scores: {[f'{score:.4f}' for score in train_scores]}")
                                print(f"Validation scores: {[f'{score:.4f}' for score in valid_scores]}")
                    
                    if has_data:
                        break  # Nếu đã tìm thấy dữ liệu, không cần kiểm tra nguồn khác

        # Cấu hình plot
        if has_data:
            plt.title('Training vs Validation Performance')
            plt.xlabel('Epochs')
            plt.ylabel('Score')
            plt.legend(loc='lower right')
            plt.grid(True, alpha=0.3)
            plt.ylim(0, 1)
        else:
            plt.text(0.5, 0.5, 'No training history available',
                    ha='center', va='center', fontsize=12, color='red')
            print("Warning: No training history found in metrics")

        plt.tight_layout()
        plt.savefig(metrics_img_path, dpi=300, bbox_inches="tight")
        plt.show()

        print(f"\nMetrics visualization saved to: {metrics_img_path}")

    except Exception as e:
        logger.error(f"Error displaying metrics: {str(e)}")
        print(f"Error: Could not display metrics: {str(e)}")


def handle_data_collection(menu, language, config):
    """Handle data collection menu options"""
    while True:
        choice = menu.display_data_collection_menu()
        if choice == "b":
            break

        try:
            # Get custom sample counts
            sample_counts = menu.get_custom_sample_count()
            collector = DataCollector(config)

            if choice == "1":
                app_id = menu.console.input("Enter Google Play app ID: ")
                df = collector.collect_google_play_reviews(
                    app_id, language, sample_counts=sample_counts
                )

            elif choice == "2":
                product_ids = menu.console.input(
                    "Enter Shopee product IDs (comma-separated): "
                )
                df = collector.collect_shopee_reviews(
                    product_ids.split(","), sample_counts=sample_counts
                )

            elif choice == "3":
                token = menu.console.input("Enter Facebook access token: ")
                post_ids = menu.console.input("Enter post IDs (comma-separated): ")
                df = collector.collect_facebook_comments(
                    post_ids.split(","), token, sample_counts=sample_counts
                )

            elif choice == "4":
                file_path = menu.get_file_path("input")
                df = collector.collect_manual_reviews(
                    file_path, sample_counts=sample_counts
                )

            elif choice == "5":
                url = menu.console.input("Enter website URL: ")
                df = collector.collect_from_website(url, sample_counts=sample_counts)

            if not df.empty:
                # Print collection statistics
                stats = df["sentiment"].value_counts()
                menu.console.print("\n[cyan]Collection Statistics:[/cyan]")
                menu.console.print(f"Positive samples: {stats.get(2, 0)}")
                menu.console.print(f"Neutral samples: {stats.get(1, 0)}")
                menu.console.print(f"Negative samples: {stats.get(0, 0)}")

                output_path = menu.get_file_path("output")
                collector.save_collected_data(df, output_path)
                menu.display_result(True, f"Collected {len(df)} samples total")

        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")
        menu.wait_for_user()


def run_detailed_test(menu, endpoint: str, language: str):
    """Run detailed API testing"""
    try:
        # Test single text
        response = requests.post(
            f"{endpoint}/predict",
            json={"text": "Tôi rất thích sản phẩm này", "language": language},
        )

        # Calculate basic metrics
        metrics = {
            "Response Time": response.elapsed.total_seconds(),
            "Status Code": response.status_code,
            "Response Size": len(response.content),
        }

        # Test accuracy if response is successful
        if response.status_code == 200:
            result = response.json()
            metrics["Confidence"] = result.get("confidence", 0)
            metrics["Sentiment Score"] = result.get("sentiment", -1)

        menu.display_performance_metrics(metrics)
        return metrics

    except Exception as e:
        menu.display_result(False, f"Test failed: {str(e)}")
        return None


def test_api(menu, language):
    """Test API endpoints with detailed options"""
    while True:
        choice = menu.display_api_test_menu()
        if choice == "b":
            break

        try:
            endpoint = menu.get_api_endpoint()

            if choice == "1":  # Test single text prediction
                text = menu.get_test_text()
                if text.lower() == "q":
                    continue

                response = requests.post(
                    f"{endpoint}/predict", json={"text": text, "language": language}
                )
                if response.status_code == 200:
                    menu.display_api_response(response.json())
                else:
                    menu.display_result(False, f"API Error: {response.text}")

            elif choice == "2":  # Test batch prediction
                texts = []
                menu.console.print("\nEnter texts (empty line to finish):")
                while True:
                    text = input("> ").strip()
                    if not text:
                        break
                    texts.append(text)

                if texts:
                    response = requests.post(
                        f"{endpoint}/batch", json={"texts": texts, "language": language}
                    )
                    if response.status_code == 200:
                        menu.display_api_response(response.json()["results"])
                    else:
                        menu.display_result(False, f"API Error: {response.text}")

            elif choice == "3":  # Test health check
                response = requests.get(f"{endpoint}/health")
                if response.status_code == 200:
                    menu.display_api_response(response.json())
                else:
                    menu.display_result(False, f"API Error: {response.text}")

            elif choice == "4":  # Detailed testing
                while True:
                    test_choice = menu.display_detailed_test_menu()
                    if test_choice == "b":
                        break

                    if test_choice == "1":
                        # Test với văn bản đơn lẻ
                        text = menu.get_test_text()
                        if text.lower() == "q":
                            continue

                        response = requests.post(
                            f"{endpoint}/predict",
                            json={"text": text, "language": language},
                        )
                        metrics = run_detailed_test(menu, endpoint, language)
                        if response.status_code == 200:
                            menu.display_api_response(response.json())

                    elif test_choice == "2":
                        # Test với tập dữ liệu mẫu
                        batch_size = menu.get_test_batch_size()
                        test_texts = [
                            "Sản phẩm tốt",
                            "Dịch vụ kém",
                            "Bình thường",
                            # Thêm các mẫu test khác...
                        ][:batch_size]

                        response = requests.post(
                            f"{endpoint}/batch",
                            json={"texts": test_texts, "language": language},
                        )
                        if response.status_code == 200:
                            menu.display_api_response(response.json()["results"])

                    elif test_choice == "3":
                        # Test hiệu năng
                        menu.display_progress("Testing performance")
                        metrics = run_detailed_test(menu, endpoint, language)

                    elif test_choice == "4":
                        # Test độ chính xác
                        menu.display_progress("Testing accuracy")
                        # Implement accuracy testing with known samples
                        test_samples = [
                            ("Sản phẩm rất tốt, tôi rất thích", 2),  # Positive
                            ("Sản phẩm này thật tệ", 0),  # Negative
                            ("Sản phẩm tạm được", 1),  # Neutral
                        ]

                        correct = 0
                        for text, expected in test_samples:
                            response = requests.post(
                                f"{endpoint}/predict",
                                json={"text": text, "language": language},
                            )
                            if response.status_code == 200:
                                result = response.json()
                                if result["sentiment"] == expected:
                                    correct += 1

                        accuracy = correct / len(test_samples)
                        menu.display_performance_metrics({"Accuracy": accuracy})

                    elif test_choice == "5":
                        # Test khả năng chịu tải
                        menu.display_progress("Testing load capacity")
                        batch_sizes = [10, 50, 100]
                        load_metrics = {}

                        for size in batch_sizes:
                            test_texts = ["Test text"] * size
                            start_time = datetime.now()
                            response = requests.post(
                                f"{endpoint}/batch",
                                json={"texts": test_texts, "language": language},
                            )
                            processing_time = (
                                datetime.now() - start_time
                            ).total_seconds()

                            load_metrics[f"Batch {size}"] = {
                                "Processing Time": processing_time,
                                "Time per Text": processing_time / size,
                            }

                        menu.display_performance_metrics(
                            {"Load Test Results": load_metrics}
                        )

        except requests.exceptions.ConnectionError:
            menu.display_result(False, "Could not connect to API server")
        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")

        menu.wait_for_user()


def find_free_port(start_port=7270, end_port=7280):
    """Find first available port in range"""
    import socket

    for port in range(start_port, end_port + 1):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            try:
                sock.bind(("", port))
                return port
            except OSError:
                continue
    return None


def force_kill_port(port):
    """Force kill any process using the specified port"""
    try:
        # Get all network connections
        connections = psutil.net_connections()
        for conn in connections:
            try:
                # Check if connection is using our port
                if conn.laddr.port == port:
                    # Find and kill the process
                    try:
                        proc = psutil.Process(conn.pid)
                        proc.kill()
                        return True
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
            except (AttributeError, TypeError):
                continue
        return False
    except Exception as e:
        print(f"Error killing process on port {port}: {e}")
        return False


def end_task_by_name(name: str) -> bool:
    """End task by process name"""
    try:
        killed = False
        for proc in psutil.process_iter(["pid", "name", "cmdline"]):
            try:
                # Check process name first
                if name.lower() in proc.info["name"].lower():
                    proc.kill()
                    killed = True
                    logger.info(
                        f"Killed process: {proc.info['name']} (PID: {proc.info['pid']})"
                    )
                    continue

                # Then check cmdline if available
                cmdline = proc.info.get("cmdline")
                if cmdline:
                    if any(name.lower() in cmd.lower() for cmd in cmdline):
                        proc.kill()
                        killed = True
                        logger.info(
                            f"Killed process: {proc.info['name']} (PID: {proc.info['pid']})"
                        )

            except (
                psutil.NoSuchProcess,
                psutil.AccessDenied,
                psutil.ZombieProcess,
            ) as e:
                logger.debug(f"Skip process: {e}")
                continue
        return killed
    except Exception as e:
        logger.error(f"Error ending task {name}: {e}")
        return False


def cleanup_api_servers():
    """Stop all running API server processes"""
    try:
        killed = False
        target_ports = [7270, 8000]  # Define target ports

        # Get all connections using target ports
        connections = psutil.net_connections()
        target_pids = set()

        for conn in connections:
            try:
                if hasattr(conn, "laddr") and conn.laddr.port in target_ports:
                    target_pids.add(conn.pid)
            except (AttributeError, TypeError):
                continue

        # Only kill Python processes that are using our target ports
        for pid in target_pids:
            try:
                proc = psutil.Process(pid)
                # Verify it's a Python process before killing
                if "python" in proc.name().lower():
                    proc.kill()
                    killed = True
                    logger.info(f"Killed Python process using port {port}: PID {pid}")
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                logger.debug(f"Skip process {pid}: {e}")
                continue

        # Verify ports are freed
        for port in target_ports:
            if is_port_in_use(port):
                logger.warning(f"Port {port} is still in use")

        # Small delay to ensure processes are terminated
        if killed:
            time.sleep(1)

        return True
    except Exception as e:
        logger.error(f"Error cleaning up servers: {e}")
        return False


def start_api_server(host="0.0.0.0", port=7270):
    """Start API server with improved management"""
    global server_process
    try:
        # Kill any existing process using the port
        if is_port_in_use(port):
            force_kill_port(port)
            time.sleep(1)  # Wait for port to be freed

        # Set environment variables for better stability
        env = os.environ.copy()
        env["PYTHONUNBUFFERED"] = "1"
        env["PYTHONPATH"] = project_root

        # Start server with improved settings
        command = [
            sys.executable,
            "-m",
            "uvicorn",
            "src.api.app:app",
            f"--host={host}",
            f"--port={port}",
            "--reload",
            "--reload-dir",
            "src",
            "--workers",
            "1",  # Single worker for stability
            "--timeout-keep-alive",
            "30",
            "--limit-concurrency",
            "100",
            "--log-level",
            "info",
        ]

        server_process = subprocess.Popen(
            command, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )

        # Verify server started successfully
        time.sleep(2)
        if server_process.poll() is not None:
            stderr = server_process.stderr.read()
            raise RuntimeError(f"Server failed to start: {stderr}")

        logger.info(f"API server started on {host}:{port}")
        return True

    except Exception as e:
        logger.error(f"Failed to start API server: {str(e)}")
        return False


# Improved server stop function
def stop_api_server():
    """Stop API server with improved cleanup"""
    global server_process
    try:
        # Try graceful shutdown first
        if server_process and server_process.poll() is None:
            requests.post(f"http://localhost:{config.API_CONFIG['PORT']}/shutdown")
            time.sleep(2)

        # Force kill if still running
        if server_process and server_process.poll() is None:
            server_process.terminate()
            server_process.wait(timeout=5)

        # Additional cleanup
        cleanup_api_servers()
        time.sleep(1)

        server_process = None
        return True

    except Exception as e:
        logger.error(f"Error stopping API server: {e}")
        # Force cleanup
        cleanup_api_servers()
        return False


def handle_api_server(menu, language, config):
    """Handle API server operations"""
    while True:
        choice = menu.display_api_menu()
        if choice == "b":
            break

        try:
            if choice == "1":  # Start Server
                menu.display_progress("Starting API server")
                # Get user choice for new terminal

                success = start_api_server(
                    config.API_CONFIG["HOST"], config.API_CONFIG["PORT"]
                )

                if success:
                    menu.display_result(
                        "API server started on http://localhost:{config.API_CONFIG['PORT']}"
                    )
                else:
                    menu.display_result(False, "Failed to start server")

            elif choice == "2":  # Stop Server
                menu.display_progress("Stopping API server")
                try:
                    # Try graceful shutdown first
                    response = requests.post(
                        f"http://localhost:{config.API_CONFIG['PORT']}/shutdown"
                    )
                    if response.status_code == 200:
                        menu.display_result(True, "Server stopped gracefully")
                    else:
                        # Only kill process on used port
                        if force_kill_port(config.API_CONFIG["PORT"]):
                            menu.display_result(
                                True, "Server force stopped successfully"
                            )
                        else:
                            menu.display_result(False, "Failed to stop server")
                except:
                    # If server is not responding, kill specific port
                    if force_kill_port(config.API_CONFIG["PORT"]):
                        menu.display_result(True, "Server force stopped successfully")
                    else:
                        menu.display_result(False, "Failed to stop server")

            elif choice == "3":  # View Status
                try:
                    status = get_api_status()
                    menu.console.print("\n[cyan]API Server Status:[/cyan]")
                    menu.console.print(
                        f"Running: {'Yes' if status['running'] else 'No'}"
                    )
                    menu.console.print("\nLoaded Models:")
                    for lang, loaded in status["models_loaded"].items():
                        menu.console.print(
                            f"{lang.upper()}: {'Loaded' if loaded else 'Not loaded'}"
                        )
                except Exception as e:
                    menu.display_result(False, f"Error getting status: {e}")

            elif choice == "4":  # Configure Settings
                menu.console.print("\n[cyan]API Configuration:[/cyan]")
                menu.console.print(f"Host: {config.API_CONFIG['HOST']}")
                menu.console.print(f"Port: {config.API_CONFIG['PORT']}")
                menu.console.print(f"Workers: {config.API_CONFIG['WORKERS']}")
                menu.console.print(f"Request Timeout: {config.API_CONFIG['TIMEOUT']}s")
                menu.console.print(
                    f"Max Request Size: {config.API_CONFIG['MAX_REQUEST_SIZE']/1024/1024}MB"
                )
                menu.console.print("\nConfiguration can be modified in config.py")

            elif choice == "5":  # Test API
                test_api(menu, language)

            elif choice == "6":  # View Logs
                subchoice = menu.display_logs_menu()
                if subchoice != "b":
                    params = {}

                    if subchoice in ["1", "2", "3"]:  # View logs
                        params["lines"] = menu.get_log_lines()
                        if subchoice == "2":
                            params["type"] = "init"
                        elif subchoice == "3":
                            params["type"] = "request"

                    elif subchoice == "4":  # Filter by path
                        params["path"] = menu.console.input("Enter path: ")

                    elif subchoice == "5":  # Filter by status
                        params["status_code"] = menu.console.input(
                            "Enter status code: "
                        )

                    elif subchoice == "6":  # Filter by time
                        params["since"] = menu.get_log_time()

                    elif subchoice == "7":  # Filter by level
                        params["level"] = menu.get_log_level()

                    elif subchoice == "8":  # Search logs
                        params.update(menu.get_log_search_params())

                    elif subchoice == "9":  # Export logs
                        params["export"] = True
                        params["output"] = menu.get_file_path("logs")

                    # Get and display logs
                    display_server_logs(menu, config, params)

            elif choice == "7":  # Monitor Metrics
                subchoice = menu.display_metrics_menu()
                if subchoice != "b":
                    filters = menu.get_metrics_filter()
                    metrics = ModelEvaluator(language).get_filtered_metrics(filters)
                    menu.display_metrics_summary(metrics)

            elif choice == "8":  # Open Dashboard
                import webbrowser

                port = config.API_CONFIG["PORT"]
                webbrowser.open(f"http://localhost:{port}/dashboard")

            elif choice == "9":  # Export Data
                export_path = menu.get_file_path("export")
                data = {
                    "metrics": ModelEvaluator(language).get_filtered_metrics(
                        {"time_range": "7d"}
                    ),
                    "logs": get_server_logs(config.API_CONFIG["PORT"], lines=1000),
                }
                with open(export_path, "w") as f:
                    json.dump(data, f, indent=2)
                menu.display_result(True, f"Data exported to {export_path}")

        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")

        menu.wait_for_user()


def handle_preprocessing_menu(menu, language, config):
    """Handle preprocessing options"""
    while True:
        subchoice = menu.display_preprocessing_menu()
        if subchoice == "b":
            break

        try:
            if subchoice == "1":  # Clean text
                input_file = menu.get_file_path("input")
                output_file = menu.get_file_path("output")
                preprocessor = DataPreprocessor(language, config)

                df = pd.read_csv(input_file)
                processed_df = preprocessor.preprocess(df)
                processed_df.to_csv(output_file, index=False)
                menu.display_result(True, f"Cleaned data saved to {output_file}")

            elif subchoice == "2":  # Remove duplicates
                input_file = menu.get_file_path("input")
                output_file = menu.get_file_path("output")

                df = pd.read_csv(input_file)
                df.drop_duplicates(subset=["text"], inplace=True)
                df.to_csv(output_file, index=False)
                menu.display_result(
                    True, f"Duplicates removed and saved to {output_file}"
                )

            elif subchoice == "3":  # Balance dataset
                input_file = menu.get_file_path("input")
                output_file = menu.get_file_path("output")

                df = pd.read_csv(input_file)
                min_samples = df["label"].value_counts().min()
                balanced_df = pd.concat(
                    [
                        df[df["label"] == label].sample(n=min_samples, random_state=42)
                        for label in df["label"].unique()
                    ]
                )
                balanced_df.to_csv(output_file, index=False)
                menu.display_result(True, f"Balanced dataset saved to {output_file}")

            elif subchoice == "4":  # Filter by criteria
                input_file = menu.get_file_path("input")
                output_file = menu.get_file_path("output")
                min_length = menu.console.input("Enter minimum text length: ")

                df = pd.read_csv(input_file)
                filtered_df = df[df["text"].str.len() >= int(min_length)]
                filtered_df.to_csv(output_file, index=False)
                menu.display_result(True, f"Filtered data saved to {output_file}")

            elif subchoice == "5":  # Augment data
                input_file = menu.get_file_path("input")
                output_file = menu.get_file_path("output")

                from data.data_augmentation import DataAugmentor

                augmentor = DataAugmentor(language)
                df = pd.read_csv(input_file)
                augmented_df = augmentor.augment_data(df)
                augmented_df.to_csv(output_file, index=False)
                menu.display_result(True, f"Augmented data saved to {output_file}")

        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")
        menu.wait_for_user()


def handle_optimization_menu(menu, language, config):
    """Handle model optimization options"""
    while True:
        subchoice = menu.display_optimization_menu()
        if subchoice == "b":
            break

        try:
            if subchoice == "1":  # Hyperparameter tuning
                menu.display_progress("Running hyperparameter optimization...")
                trainer = EnhancedModelTrainer(language, config)
                best_params = trainer.optimize_hyperparameters()
                menu.display_result(True, f"Best parameters found: {best_params}")

            elif subchoice == "2":  # Feature selection
                menu.display_progress("Performing feature selection...")
                feature_selector = feature_selector(language, config)
                selected_features = feature_selector.select_best_features()
                menu.display_result(
                    True, f"Selected {len(selected_features)} best features"
                )

            elif subchoice == "3":  # Cross validation
                menu.display_progress("Running cross validation...")
                evaluator = ModelEvaluator(language)
                cv_scores = evaluator.cross_validate()
                menu.display_result(True, f"Cross validation scores: {cv_scores}")

            elif subchoice == "4":  # Model ensemble
                menu.display_progress("Creating model ensemble...")
                trainer = EnhancedModelTrainer(language, config)
                ensemble = trainer.create_ensemble()
                menu.display_result(True, "Model ensemble created successfully")

            elif subchoice == "5":  # Performance analysis
                menu.display_progress("Analyzing model performance...")
                evaluator = ModelEvaluator(language)
                metrics = evaluator.analyze_performance()
                menu.display_result(True, "Performance analysis complete")
                menu.display_performance_metrics(metrics)

        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")
        menu.wait_for_user()


def handle_export_menu(menu, language, config):
    """Handle export options"""
    while True:
        subchoice = menu.display_export_menu()
        if subchoice == "b":
            break

        try:
            if subchoice == "1":  # Export predictions
                input_file = menu.get_file_path("input")
                output_file = menu.get_file_path("output")
                predict(language, input_file, output_file, config)
                menu.display_result(True, f"Predictions exported to {output_file}")

            elif subchoice == "2":  # Export metrics
                output_file = menu.get_file_path("metrics")
                evaluator = ModelEvaluator(language)
                metrics = evaluator.get_all_metrics()
                evaluator.export_metrics(metrics, output_file)
                menu.display_result(True, f"Metrics exported to {output_file}")

            elif subchoice == "3":  # Generate report
                output_file = menu.get_file_path("report")
                from src.utils.report import ReportGenerator

                generator = ReportGenerator(language)
                generator.generate_report(output_file)
                menu.display_result(True, f"Report generated at {output_file}")

            elif subchoice == "4":  # Export visualizations
                output_dir = menu.get_file_path("visualizations")
                visualizer = ModelVisualizer(language)
                try:
                    visualizer.generate_plots(output_dir)
                    menu.display_result(True, f"Visualizations saved to {output_dir}")
                except Exception as e:
                    menu.display_result(
                        False, f"Error generating visualizations: {str(e)}"
                    )

            elif subchoice == "5":  # Export model
                output_file = menu.get_file_path("model")
                trainer = EnhancedModelTrainer(language, config)
                trainer.export_model(output_file)
                menu.display_result(True, f"Model exported to {output_file}")

        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")
        menu.wait_for_user()


def display_server_logs(menu, config, params=None):
    """Display and filter server logs"""
    while True:
        if not params:
            subchoice = menu.display_logs_menu()
            if subchoice == "b":
                break

            params = {}
            if subchoice == "1":  # View latest logs
                params["lines"] = menu.get_log_lines()

            elif subchoice == "2":  # View init logs
                params["type"] = "init"
                params["lines"] = menu.get_log_lines()

            elif subchoice == "3":  # View request logs
                params["type"] = "request"
                params["lines"] = menu.get_log_lines()

            elif subchoice == "4":  # Filter by path
                params["path"] = menu.console.input("Enter path: ")
                params["lines"] = menu.get_log_lines()

            elif subchoice == "5":  # Filter by status
                params["status_code"] = int(menu.console.input("Enter status code: "))
                params["lines"] = menu.get_log_lines()

            elif subchoice == "6":  # Export logs
                output_file = menu.get_file_path("logs")
                params = {"lines": 1000, "output": output_file}

        try:
            # Make API request
            response = requests.get(
                f"http://localhost:{config.API_CONFIG['PORT']}/api/logs",
                params={k: v for k, v in params.items() if k != "output"},
            )

            if response.status_code == 200:
                logs = response.json()

                if "output" in params:  # Export to file
                    with open(params["output"], "w", encoding="utf-8") as f:
                        f.writelines(logs["logs"])
                    menu.display_result(True, f"Logs exported to {params['output']}")
                else:  # Display in console
                    menu.display_filtered_logs(logs["logs"], logs["filters"])
                    menu.display_result(True, f"Found {logs['total']} log entries")
                break
            else:
                menu.display_result(False, f"Failed to get logs: {response.text}")
                break

        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")
            break

        menu.wait_for_user()


def get_server_logs(port, lines=1000):
    """Fetch server logs from the API"""
    try:
        response = requests.get(
            f"http://localhost:{port}/api/logs", params={"lines": lines}
        )
        if response.status_code == 200:
            return response.json()["logs"]
        else:
            raise RuntimeError(f"Failed to get logs: {response.text}")
    except Exception as e:
        logger.error(f"Error fetching server logs: {e}")
        return []


def setup_logging():
    log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    log_file = 'sentiment_analysis.log'

    file_handler = RotatingFileHandler(log_file, maxBytes=10*1024*1024, backupCount=5)
    file_handler.setFormatter(log_formatter)
    file_handler.setLevel(logging.INFO)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)
    console_handler.setLevel(logging.INFO)

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)


def continue_training(language: str, config: Config):
    """Continue training from checkpoint"""
    logger = Logger(__name__).logger
    menu = TerminalMenu(config)
    
    try:
        # Initialize trainer
        trainer = EnhancedModelTrainer(language, config)
        
        # List available checkpoints
        checkpoints = trainer.list_checkpoints()
        if not checkpoints:
            menu.display_result(False, "No checkpoints available")
            return
            
        # Display checkpoints
        print("\nAvailable checkpoints:")
        for i, cp in enumerate(checkpoints):
            print(f"{i+1}. {cp['filename']}")
            print(f"   Timestamp: {cp['timestamp']}")
            print(f"   Epoch: {cp['epoch']}")
            print(f"   Score: {cp['metrics']:.4f if cp['metrics'] else 'N/A'}")
            
        # Get user choice
        choice = menu.console.input("\nEnter checkpoint number (or press Enter for latest): ")
        checkpoint_name = None
        if choice.strip():
            idx = int(choice) - 1
            if 0 <= idx < len(checkpoints):
                checkpoint_name = checkpoints[idx]["filename"]
            else:
                menu.display_result(False, "Invalid checkpoint number")
                return
                
        # Get training parameters
        num_epochs = int(menu.console.input("Enter number of epochs to train: "))
        
        # Load training data
        data_loader = DataLoader(config)
        input_file = menu.get_file_path("training data")
        df = pd.read_csv(input_file)
        
        # Preprocess data
        preprocessor = DataPreprocessor(language, config)
        processed_df = preprocessor.preprocess(df)
        if processed_df.empty:
            raise ValueError("No valid samples after preprocessing")
            
        # Get features and labels
        X_train = processed_df["cleaned_text"]
        y_train = processed_df["label"]
        
        # Continue training
        menu.display_progress("Continuing model training...")
        model, metrics = trainer.continue_training(X_train, y_train, checkpoint_name, num_epochs)
        
        if model:
            menu.display_result(True, "Training continued successfully")
            # Display updated metrics
            display_metrics(language, config)
        else:
            menu.display_result(False, "Training failed")
            
    except Exception as e:
        logger.error(f"Continue training error: {str(e)}")
        menu.display_result(False, f"Error: {str(e)}")

def main():
    # Initialize config first
    config = Config()

    # Pass config to TerminalMenu
    menu = TerminalMenu(config)

    # Only cleanup when starting the program
    cleanup_api_servers()

    while True:
        menu.display_header()
        choice = menu.display_menu()

        if choice == "q":
            break

        language = menu.get_language_choice()

        try:
            if choice == "1":
                menu.display_progress("Training new model")
                train(language, config)
                menu.display_result(True, "Model training completed successfully")
            elif choice == "2":
                input_file = menu.get_file_path("input")
                output_file = menu.get_file_path("output")
                validate_paths(input_file, output_file)
                menu.display_progress("Analyzing text")
                predict(language, input_file, output_file, config)
                menu.display_result(True, f"Results saved to {output_file}")

            elif choice == "3":
                input_file = menu.get_file_path("test data")
                validate_paths(input_file)
                menu.display_progress("Evaluating model")
                evaluate(language, input_file, config)

            elif choice == "4":
                output_file = menu.get_file_path("output")
                validate_paths(output_file=output_file)
                num_samples = menu.get_sample_count()
                menu.display_progress(f"Generating {num_samples} training samples")

                generator = TrainingDataGenerator(language, config, num_samples)
                generator.generate_training_data(output_file)

                menu.display_result(
                    True, f"Generated {num_samples} samples successfully"
                )

            elif choice == "5":
                menu.display_progress("Loading model metrics")
                display_metrics(language, config)

            elif choice == "6":  # Add new test option
                menu.display_progress("Loading model for testing")
                test_model(language, config)

            elif choice == "7":  # Add new restore option
                menu.display_progress("Restoring model from checkpoint")
                model = restore_model(language, config)
                if model:
                    menu.display_result(True, "Model restored successfully")
                else:
                    menu.display_result(False, "Failed to restore model")

            elif choice == "8":
                handle_data_collection(menu, language, config)

            elif choice == "9":
                handle_preprocessing_menu(menu, language, config)

            elif choice == "10":
                handle_optimization_menu(menu, language, config)

            elif choice == "11":
                handle_export_menu(menu, language, config)

            elif choice == "12":  # API Server
                handle_api_server(menu, language, config)
            elif choice == "13":  # Add new menu option
                continue_training(language, config)

        except Exception as e:
            menu.display_result(False, f"Error: {str(e)}")

        menu.wait_for_user()


if __name__ == "__main__":
    setup_logging()
    main()

================
File: src/models/model_predictor.py
================
import os
import joblib
import numpy as np
from scipy import stats
from src.features.feature_engineering import FeatureExtractor
from src.config import Config
from src.utils.logger import Logger


class SentimentPredictor:
    def __init__(self, language: str, config: Config):
        self.language = language
        self.config = config
        self.logger = Logger(__name__).logger
        self.model_path = os.path.join(
            config.DATA_DIR, "models", f"{language}_sentiment_model.pkl"
        )
        self.feature_extractor = FeatureExtractor(language, config)
        self.models = self._load_model()
        self.feature_dims = (
            self.feature_extractor.feature_dims
        )  # Ensure feature_dims is set

    def _load_model(self):
        """Load trained model from file"""
        model_path = os.path.join(
            self.config.DATA_DIR, "models", f"{self.language}_sentiment_model.pkl"
        )

        if not os.path.exists(model_path):
            raise FileNotFoundError(
                f"No model found for {self.language} at {model_path}"
            )

        model_info = joblib.load(model_path)

        if "model" in model_info:
            model = model_info["model"]
            if isinstance(model, dict):
                return {k: v for k, v in model.items() if hasattr(v, "predict")}
            elif hasattr(model, "predict"):
                return {"base": model}

        raise ValueError("No valid models found in model file")

    def predict(self, features):
        """Ensemble prediction using voting with dimension validation"""
        if not self.models:
            raise ValueError("No models available")

        if not isinstance(features, np.ndarray):
            features = np.array(features)

        # Validate feature dimensions
        if self.feature_dims:
            if features.shape[1] != self.feature_dims:
                raise ValueError(
                    f"Feature dimension mismatch. Expected {self.feature_dims}, got {features.shape[1]}"
                )

        predictions = []
        for name, model in self.models.items():
            try:
                if hasattr(model, "predict"):
                    pred = model.predict(features)
                    predictions.append(pred)
            except Exception as e:
                self.logger.error(f"Error in {name} prediction: {str(e)}")
                continue

        if not predictions:
            raise RuntimeError("All models failed to predict")

        # Use majority voting
        stacked_preds = np.vstack(predictions)
        modes, _ = stats.mode(stacked_preds, axis=0)
        return modes.flatten()

    def predict_proba(self, features):
        """Get probability estimates from available models"""
        if not self.models:
            raise ValueError("No models loaded")

        probas = []
        for name, model in self.models.items():
            try:
                # Handle models that don't have predict_proba
                if hasattr(model, "predict_proba"):
                    proba = model.predict_proba(features)
                elif hasattr(model, "decision_function"):
                    # Convert decision function to probabilities
                    dec = model.decision_function(features)
                    proba = 1 / (1 + np.exp(-dec))
                    # Normalize to get probabilities
                    proba = proba / proba.sum(axis=1, keepdims=True)
                else:
                    continue
                probas.append(proba)
            except Exception as e:
                self.logger.error(f"Error in {name} probability estimation: {str(e)}")
                continue

        if probas:
            # Average probabilities from all models
            return np.mean(probas, axis=0)

        raise RuntimeError("No models could provide probability estimates")

    def predict_detailed_emotion(self, features):
        """Predict detailed emotions based on sentiment probabilities"""
        sentiments = self.predict(features)
        probabilities = self.predict_proba(features)

        predictions = []
        for sent, probs in zip(sentiments, probabilities):
            # Map sentiment to emotion category
            if sent == 2:
                emotions = self.config.EMOTION_LABELS["POSITIVE"]
            elif sent == 0:
                emotions = self.config.EMOTION_LABELS["NEGATIVE"]
            else:
                emotions = self.config.EMOTION_LABELS["NEUTRAL"]

            # Select random emotion from category with confidence
            emotion = np.random.choice(list(emotions.values()))
            confidence = np.max(probs)

            predictions.append(
                {
                    "sentiment": sent,
                    "sentiment_confidence": confidence,
                    "detailed_emotion": emotion,
                    "emotion_confidence": confidence
                    * 0.8,  # Slightly lower confidence for detailed emotion
                }
            )

        return predictions

    def predict_emotion(self, features, text: str = None):
        """Predict detailed emotion with confidence scores"""
        try:
            # Get base sentiment prediction
            sentiment = self.predict(features)[0]
            probabilities = self.predict_proba(features)[0]
            base_confidence = max(probabilities)

            # Initialize emotion detector if text is provided
            emotion_scores = {}

            if text:
                text = text.lower()
                # Get emotion keywords for the current language
                keywords = self.config.EMOTION_KEYWORDS.get(self.language, {})

                # Calculate emotion scores based on keyword presence
                for emotion, words in keywords.items():
                    score = sum(1 for word in words if word in text)
                    multiplier = 1.0

                    # Adjust score based on punctuation and capitalization
                    if "!" in text:
                        multiplier *= 1.2
                    if text.isupper():
                        multiplier *= 1.3

                    emotion_scores[emotion] = score * multiplier

                # Normalize scores
                total = sum(emotion_scores.values()) or 1
                emotion_scores = {k: v / total for k, v in emotion_scores.items()}

            # Get emotion mapping for the predicted sentiment
            valid_emotions = {
                emotion: details
                for emotion, details in self.config.EMOTION_MAPPING.items()
                if details["sentiment"] == sentiment
            }

            # Select most likely emotion
            if emotion_scores:
                # Filter emotions by base sentiment
                valid_scores = {
                    emotion: score
                    for emotion, score in emotion_scores.items()
                    if emotion in valid_emotions
                }

                if valid_scores:
                    predicted_emotion = max(valid_scores.items(), key=lambda x: x[1])[0]
                else:
                    # Fallback to default emotion for sentiment
                    predicted_emotion = next(iter(valid_emotions))
            else:
                # Fallback if no text analysis
                predicted_emotion = next(iter(valid_emotions))

            # Get emotion details
            emotion_info = self.config.EMOTION_MAPPING[predicted_emotion]

            return {
                "sentiment": sentiment,
                "sentiment_confidence": base_confidence,
                "emotion": predicted_emotion,
                "emotion_vi": emotion_info["vi"],
                "emotion_emoji": emotion_info["emoji"],
                "emotion_confidence": base_confidence
                * 0.8,  # Slightly lower confidence for detailed emotion
                "emotion_scores": emotion_scores if emotion_scores else None,
            }

        except Exception as e:
            self.logger.error(f"Error in emotion prediction: {str(e)}")
            return None

    async def predict_async(self, text: str):
        try:
            self.logger.info(f"Received text for prediction: {text}")
            processed_text = self.feature_extractor.preprocess_text(text)
            self.logger.info(f"Processed text: {processed_text}")
            features = self.feature_extractor.extract_features([processed_text])
            self.logger.info(f"Extracted features: {features.shape}")
            prediction = self.predict(features)
            self.logger.info(f"Prediction result: {prediction}")
            return prediction[0]
        except Exception as e:
            self.logger.error(f"Prediction error: {e}")
            return None

================
File: src/models/model_trainer.py
================
import os
import joblib
from datetime import datetime
import warnings
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import GridSearchCV, StratifiedKFold
from sklearn.feature_selection import (
    SelectFromModel,
    SelectKBest,
    chi2,
    mutual_info_classif,
)
from sklearn.utils.class_weight import compute_sample_weight, compute_class_weight
import matplotlib.pyplot as plt
import seaborn as sns
from src.utils.logger import Logger
from sklearn.metrics import (
    f1_score,
    precision_score,
    recall_score,
    make_scorer,
    balanced_accuracy_score,
    roc_auc_score,
)
import numpy as np
import collections


class SVMWithProba(LinearSVC):
    """SVM with probability estimates"""

    def predict_proba(self, X):
        decision = self.decision_function(X)
        if len(decision.shape) == 1:
            decision = np.column_stack([-decision, decision])
        probs = 1 / (1 + np.exp(-decision))
        probs /= probs.sum(axis=1, keepdims=True)
        return probs


class EnhancedModelTrainer:
    """Enhanced model trainer with ensemble learning and performance monitoring."""

    def __init__(self, language: str, config):
        self.language = language
        self.config = config
        self.logger = Logger(__name__).logger
        self.checkpoint_dir = os.path.join(config.DATA_DIR, "checkpoints")
        self.models_dir = os.path.join(config.DATA_DIR, "models")
        os.makedirs(self.checkpoint_dir, exist_ok=True)
        os.makedirs(self.models_dir, exist_ok=True)
        self.training_time = 0
        self.feature_extractor = None  # Initialize feature extractor as None
        self.param_grid = config.PARAM_GRID
        self.model_config = config.MODEL_TRAINING_CONFIG
        self.regularization_config = config.REGULARIZATION_CONFIG
        self.validation_config = config.VALIDATION_CONFIG
        self.scoring_config = config.SCORING_CONFIG

    def _convert_deque_to_list(self, obj):
        """Recursively convert deque objects to lists in the given object."""
        if isinstance(obj, collections.deque):
            return list(obj)
        elif isinstance(obj, dict):
            return {k: self._convert_deque_to_list(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self._convert_deque_to_list(v) for v in obj]
        else:
            return obj

    def create_ensemble_model(self):
        """Create model ensemble with documented algorithms"""

        rf = RandomForestClassifier(
            n_estimators=1000,  # Increased from 300
            max_depth=50,  # Increased from 30
            min_samples_split=self.model_config["preprocessing"]["min_df"],
            class_weight=self.model_config["class_weight_method"],
            ccp_alpha=self.regularization_config["rf_reg"]["ccp_alpha"],
            max_samples=0.7,  # Reduced from 0.8 for more randomization
            random_state=42,
            bootstrap=True,
            oob_score=True,  # Enable out-of-bag score estimation
            n_jobs=-1  # Use all CPU cores
        )

        svm = SVMWithProba(
            C=0.5,  # Reduced from 1.0 for better regularization
            max_iter=2000,  # Increased from 1000
            class_weight="balanced",
            dual=False,
            tol=1e-4
        )

        nb = MultinomialNB(
            alpha=0.8,  # Adjusted from default
            fit_prior=True
        )

        models = [
            ("rf", Pipeline([("scaler", MinMaxScaler()), ("rf", rf)])),
            ("svm", Pipeline([("scaler", MinMaxScaler()), ("svm", svm)])),
            ("nb", Pipeline([("scaler", MinMaxScaler()), ("nb", nb)])),
        ]
        return models

    def save_checkpoint(self, model, metrics, epoch=None):
        """Save training checkpoint"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        checkpoint_path = os.path.join(
            self.checkpoint_dir, f"{self.language}_checkpoint_{timestamp}.pkl"
        )

        checkpoint = {
            "model_state": model,
            "metrics": self._convert_deque_to_list(metrics),
            "epoch": epoch,
            "timestamp": timestamp,
            "language": self.language,
        }

        joblib.dump(checkpoint, checkpoint_path)
        self.logger.info(f"Saved checkpoint to {checkpoint_path}")

        # Keep only last 5 checkpoints
        checkpoints = sorted(
            [
                f
                for f in os.listdir(self.checkpoint_dir)
                if f.startswith(f"{self.language}_checkpoint")
            ]
        )
        if len(checkpoints) > 5:
            for old_checkpoint in checkpoints[:-5]:
                os.remove(os.path.join(self.checkpoint_dir, old_checkpoint))

    def save_final_model(self, model, metrics):
        """Save the final trained model with all feature extractors"""
        model_path = os.path.join(
            self.models_dir, f"{self.language}_sentiment_model.pkl"
        )

        # Ensure metrics are properly formatted
        model_metrics = {
            "models": {},
            "total_time": metrics.get("total_time", self.training_time),
        }

        # Format metrics for each model type
        if isinstance(model, dict):
            for model_name, model_obj in model.items():
                model_metrics["models"][model_name] = {
                    "best_score": metrics.get(
                        "test_score", 0.0
                    ),  # Default to test_score if available
                    "training_time": self.training_time,
                    "parameters": getattr(model_obj, "get_params", lambda: {})(),
                }

                # Add additional metrics if available
                if model_name in metrics.get("models", {}):
                    model_metrics["models"][model_name].update(
                        metrics["models"][model_name]
                    )

                # Add feature importance for RF model
                if model_name == "rf" and hasattr(model_obj, "feature_importances_"):
                    model_metrics["models"][model_name][
                        "feature_importance"
                    ] = model_obj.feature_importances_.tolist()

        model_info = {
            "model": model,
            "metrics": self._convert_deque_to_list(metrics),
            "feature_extractor": {
                "vectorizer": self.feature_extractor.tfidf,
                "svd": self.feature_extractor.svd,
                "scaler": self.feature_extractor.scaler,
                "word_vectorizer": self.feature_extractor.word_vectorizer,
                "char_vectorizer": self.feature_extractor.char_vectorizer,
                "feature_dims": self.feature_extractor.feature_dims,
            },
            "config": {
                "language": self.language,
                "max_features": self.config.MAX_FEATURES,
                "timestamp": datetime.now().strftime("%Y%m%d_%H%M%S"),
            },
        }

        joblib.dump(model_info, model_path)
        self.logger.info(f"Saved final model to {model_path}")

    def plot_training_progress(self, grid_search, X_test=None, y_test=None):
        """Visualizes training progress and performance metrics"""
        try:
            # Create figure with 3 subplots
            fig = plt.figure(figsize=(20, 6))

            # 1. Model Performance Comparison
            ax1 = plt.subplot(131)
            scores = []
            names = []

            for name, model in grid_search.items():
                # Get all available scores
                train_f1 = np.mean(model.cv_results_["mean_train_f1"])
                val_f1 = np.mean(model.cv_results_["mean_test_f1"])
                test_score = None
                if X_test is not None and y_test is not None:
                    test_score = f1_score(
                        y_test, model.predict(X_test), average="weighted"
                    )

                scores.append(
                    {"train": train_f1, "validation": val_f1, "test": test_score}
                )
                names.append(name)

            # Plot grouped bar chart
            x = np.arange(len(names))
            width = 0.25

            ax1.bar(
                x - width,
                [s["train"] for s in scores],
                width,
                label="Train",
                color="skyblue",
            )
            ax1.bar(
                x,
                [s["validation"] for s in scores],
                width,
                label="Validation",
                color="lightgreen",
            )
            if all(s["test"] is not None for s in scores):
                ax1.bar(
                    x + width,
                    [s["test"] for s in scores],
                    width,
                    label="Test",
                    color="salmon",
                )

            ax1.set_ylabel("F1 Score")
            ax1.set_title("Model Performance Comparison")
            ax1.set_xticks(x)
            ax1.set_xticklabels(names)
            ax1.legend()
            ax1.grid(True, alpha=0.3)

            # 2. Learning Curves
            ax2 = plt.subplot(132)
            for name, model in grid_search.items():
                train_scores = model.cv_results_["mean_train_f1"]
                val_scores = model.cv_results_["mean_test_f1"]
                epochs = range(1, len(train_scores) + 1)

                ax2.plot(epochs, train_scores, "o-", label=f"{name}_train", alpha=0.7)
                ax2.plot(epochs, val_scores, "s--", label=f"{name}_val", alpha=0.7)

            ax2.set_xlabel("Epochs")
            ax2.set_ylabel("F1 Score")
            ax2.set_title("Learning Curves")
            ax2.legend(bbox_to_anchor=(1.05, 1), loc="upper left")
            ax2.grid(True, alpha=0.3)

            # 3. Model Performance Details
            ax3 = plt.subplot(133)
            details = []
            metrics = ["precision", "recall", "f1"]

            for name, model in grid_search.items():
                row = [name]
                for metric in metrics:
                    train_score = np.mean(model.cv_results_[f"mean_train_{metric}"])
                    val_score = np.mean(model.cv_results_[f"mean_test_{metric}"])
                    row.extend([train_score, val_score])
                details.append(row)

            # Create table
            cell_text = [
                [f"{x:.3f}" if isinstance(x, float) else x for x in row]
                for row in details
            ]
            columns = ["Model"] + sum([[f"{m}_train", f"{m}_val"] for m in metrics], [])
            table = ax3.table(cellText=cell_text, colLabels=columns, loc="center")
            table.auto_set_font_size(False)
            table.set_fontsize(9)
            table.scale(1.2, 1.5)
            ax3.axis("off")
            ax3.set_title("Detailed Metrics")

            plt.tight_layout()
            return fig

        except Exception as e:
            self.logger.error(f"Error plotting training progress: {str(e)}")
            import traceback

            print(traceback.format_exc())
            return None

    def _plot_learning_curves(self, grid_search):
        """Plot learning curves showing training vs validation performance"""
        if isinstance(grid_search, dict):
            for name, model in grid_search.items():
                if hasattr(model, "cv_results_"):
                    train_scores = model.cv_results_["mean_train_f1"]
                    valid_scores = model.cv_results_["mean_test_f1"]
                    iterations = range(1, len(train_scores) + 1)

                    plt.plot(
                        iterations, train_scores, "o-", label=f"{name}_train", alpha=0.8
                    )
                    plt.plot(
                        iterations, valid_scores, "s-", label=f"{name}_val", alpha=0.8
                    )

            plt.title("Learning Curves")
            plt.xlabel("Parameter Combination")
            plt.ylabel("F1 Score")
            plt.legend(loc="center right")
            plt.grid(True)

    def train_with_grid_search(self, X_train, y_train):
        """Train with documented evaluation metrics"""
        start_time = datetime.now()
        self.logger.info("Starting model training...")

        try:
            # Basic feature extraction
            if self.feature_extractor is None:
                from src.features.feature_engineering import FeatureExtractor

                self.feature_extractor = FeatureExtractor(self.language, self.config)

            # Extract and validate features
            X_train_features = self.feature_extractor.extract_features(X_train)
            if X_train_features is None or X_train_features.shape[0] == 0:
                raise ValueError("Feature extraction failed")

            # Simple parameter grid with corrected keys
            self.param_grid = {
                "rf__n_estimators": [300],
                "rf__max_depth": [30],
                "svm__C": [1.0],
                "nb__alpha": [0.1],
            }

            # Update scorers to handle different model types safely
            scorers = {
                "f1": make_scorer(f1_score, average="weighted"),
                "precision": make_scorer(
                    precision_score, average="weighted", zero_division=1
                ),
                "recall": make_scorer(
                    recall_score, average="weighted", zero_division=1
                ),
            }

            # K-fold CV as documenteds
            cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

            if isinstance(y_train, pd.Series):
                y_train = y_train.to_numpy()
            if isinstance(X_train, pd.Series):
                X_train = X_train.to_numpy()

            X_train_features = self.feature_extractor.extract_features(X_train)

            # Initialize dictionaries to store training history
            training_history = {}

            # Train models
            models = self.create_ensemble_model()
            best_models = {}
            best_metrics = {}

            # Update grid search to use decision function for SVM
            for name, pipeline in models:
                try:
                    self.logger.info(f"\nTraining {name} model...")

                    # Get training scores for each fold
                    num_epochs = 10  # Increased from 5
                    train_scores = []
                    valid_scores = []

                    # Create cross-validation splits with stratification
                    cv = StratifiedKFold(
                        n_splits=num_epochs, 
                        shuffle=True, 
                        random_state=42
                    )

                    # Add early stopping
                    patience = self.config.VALIDATION_CONFIG["early_stopping"]["patience"]
                    min_delta = self.config.VALIDATION_CONFIG["early_stopping"]["min_delta"]
                    best_score = float('-inf')
                    patience_count = 0

                    # Manual cross-validation loop with early stopping
                    for fold, (train_idx, val_idx) in enumerate(cv.split(X_train_features, y_train)):
                        # Split data - using numpy indexing
                        X_train_fold = X_train_features[train_idx]
                        X_val_fold = X_train_features[val_idx]
                        y_train_fold = y_train[train_idx]
                        y_val_fold = y_train[val_idx]

                        # Train model
                        pipeline.fit(X_train_fold, y_train_fold)

                        # Get scores using weighted F1
                        train_score = f1_score(
                            y_train_fold,
                            pipeline.predict(X_train_fold),
                            average="weighted",
                        )
                        val_score = f1_score(
                            y_val_fold, pipeline.predict(X_val_fold), average="weighted"
                        )

                        train_scores.append(train_score)
                        valid_scores.append(val_score)

                        self.logger.info(
                            f"Fold {fold+1}/{num_epochs} - "
                            f"Train: {train_score:.4f}, Val: {val_score:.4f}"
                        )

                        # Add early stopping check
                        if val_score > best_score + min_delta:
                            best_score = val_score
                            patience_count = 0
                        else:
                            patience_count += 1

                        if patience_count >= patience:
                            self.logger.info(f"Early stopping triggered at fold {fold+1}")
                            break

                    # Store training history
                    training_history[name] = {
                        "train_scores": train_scores,
                        "valid_scores": valid_scores,
                        "epochs": range(1, num_epochs + 1),
                    }

                    # Final training on full dataset
                    pipeline.fit(X_train_features, y_train)
                    best_models[name] = pipeline
                    best_metrics[name] = {
                        "best_score": np.max(valid_scores),
                        "training_time": (datetime.now() - start_time).total_seconds(),
                        "train_scores": train_scores,
                        "valid_scores": valid_scores,
                        "epochs": range(1, num_epochs + 1),
                    }

                    self.logger.info(
                        f"{name} Final Scores:\n"
                        f"Best validation score: {np.max(valid_scores):.4f}\n"
                        f"Final training score: {train_scores[-1]:.4f}"
                    )

                except Exception as e:
                    self.logger.error(f"Error training {name}: {str(e)}")
                    continue

            if not best_models:
                raise ValueError("No models were successfully trained")

            # Save final model
            final_metrics = {
                "models": best_metrics,
                "total_time": (datetime.now() - start_time).total_seconds(),
                "training_history": training_history,  # Include full training history
                "feature_importance": getattr(
                    best_models["rf"], "feature_importances_", None
                ),
                "validation_scores": {
                    "precision": self.scoring_config["precision_zero_division"]
                },
            }
            self.save_final_model(best_models, final_metrics)

            return best_models

        except Exception as e:
            self.logger.error(f"Training failed: {str(e)}")
            return None

    def list_checkpoints(self):
        """List all available checkpoints with better metrics handling"""
        checkpoints = []
        try:
            for file in os.listdir(self.checkpoint_dir):
                if file.startswith(f"{self.language}_checkpoint"):
                    checkpoint_path = os.path.join(self.checkpoint_dir, file)
                    info = joblib.load(checkpoint_path)
                    metrics_value = None

                    # Safely extract metrics
                    if "metrics" in info:
                        if isinstance(info["metrics"], dict):
                            metrics_value = info["metrics"].get("best_score")
                        else:
                            metrics_value = str(info["metrics"])

                    checkpoints.append(
                        {
                            "filename": file,
                            "timestamp": info.get("timestamp", "Unknown"),
                            "epoch": info.get("epoch", "Unknown"),
                            "metrics": metrics_value,
                        }
                    )
            return sorted(checkpoints, key=lambda x: x["timestamp"], reverse=True)
        except Exception as e:
            self.logger.error(f"Error listing checkpoints: {str(e)}")
            return []

    def restore_from_checkpoint(self, checkpoint_name=None):
        """Restore model from checkpoint"""
        try:
            if checkpoint_name is None:
                # Get latest checkpoint
                checkpoints = sorted(
                    [
                        f
                        for f in os.listdir(self.checkpoint_dir)
                        if f.startswith(f"{self.language}_checkpoint")
                    ]
                )
                if not checkpoints:
                    raise ValueError("No checkpoints found")
                checkpoint_name = checkpoints[-1]

            checkpoint_path = os.path.join(self.checkpoint_dir, checkpoint_name)
            if not os.path.exists(checkpoint_path):
                raise FileNotFoundError(f"Checkpoint not found: {checkpoint_path}")

            checkpoint = joblib.load(checkpoint_path)
            self.logger.info(f"Restored model from checkpoint: {checkpoint_name}")
            return checkpoint["model_state"], checkpoint["metrics"]

        except Exception as e:
            self.logger.error(f"Error restoring checkpoint: {str(e)}")
            return None, None

    def optimize_hyperparameters(self, X_train=None, y_train=None):
        """Optimize hyperparameters using cross-validation"""
        self.logger.info("Starting hyperparameter optimization...")

        try:
            # Use stored data if not provided
            if X_train is None or y_train is None:
                # Load last checkpoint to get data
                checkpoints = self.list_checkpoints()
                if not checkpoints:
                    raise ValueError("No checkpoints found and no data provided")
                checkpoint = joblib.load(
                    os.path.join(self.checkpoint_dir, checkpoints[0]["filename"])
                )
                X_train = checkpoint.get("X_train")
                y_train = checkpoint.get("y_train")

            if X_train is None or y_train is None:
                raise ValueError("No training data available")

            # Extract features
            if self.feature_extractor is None:
                from src.features.feature_engineering import FeatureExtractor

                self.feature_extractor = FeatureExtractor(self.language, self.config)

            X_train_features = self.feature_extractor.extract_features(X_train)

            # Define expanded parameter grid for optimization
            expanded_param_grid = {
                "rf__n_estimators": [300, 500, 1000],
                "rf__max_depth": [30, 50, 100],
                "rf__min_samples_split": [2, 5, 10],
                "rf__min_samples_leaf": [1, 2, 4],
                "rf__max_features": ["sqrt", "log2", None],
                "svm__C": [0.1, 1.0, 10.0],
                "svm__tol": [1e-4, 1e-5],
                "svm__max_iter": [3000, 5000],
                "nb__alpha": [0.01, 0.1, 0.5, 1.0],
                "nb__fit_prior": [True, False],
                "feature_selection__k": [300, 500, 1000],
            }

            # Configure cross-validation
            cv = StratifiedKFold(
                n_splits=self.config.MODEL_TRAINING_CONFIG["cv_folds"],
                shuffle=True,
                random_state=42,
            )

            # Initialize models
            models = self.create_ensemble_model()
            best_params = {}

            # Optimize each model separately
            for name, pipeline in models:
                self.logger.info(f"\nOptimizing {name} model...")

                # Get relevant parameters for this model
                model_params = {
                    k: v for k, v in expanded_param_grid.items() if k.startswith(name)
                }

                # Configure scoring
                scorers = {
                    "f1": make_scorer(f1_score, average="weighted", zero_division=1),
                    "precision": make_scorer(
                        precision_score, average="weighted", zero_division=1
                    ),
                    "recall": make_scorer(
                        recall_score, average="weighted", zero_division=1
                    ),
                    "balanced_accuracy": make_scorer(balanced_accuracy_score),
                }

                # Perform grid search
                grid_search = GridSearchCV(
                    pipeline,
                    param_grid=model_params,
                    cv=cv,
                    scoring=scorers,
                    refit="balanced_accuracy",
                    n_jobs=-1,
                    verbose=1,
                )

                # Fit with sample weights if applicable
                sample_weights = compute_sample_weight("balanced", y_train)
                fit_params = {}
                if name in ["rf", "svm"]:
                    fit_params = {f"{name}__sample_weight": sample_weights}

                grid_search.fit(X_train_features, y_train, **fit_params)

                # Store best parameters
                best_params[name] = {
                    "params": grid_search.best_params_,
                    "score": grid_search.best_score_,
                }

                self.logger.info(f"Best {name} parameters: {grid_search.best_params_}")
                self.logger.info(f"Best {name} score: {grid_search.best_score_:.4f}")

            # Save optimized parameters
            optimization_path = os.path.join(
                self.config.DATA_DIR,
                "optimization",
                f"{self.language}_optimized_params.json",
            )
            os.makedirs(os.path.dirname(optimization_path), exist_ok=True)

            with open(optimization_path, "w") as f:
                import json

                json.dump(best_params, f, indent=4)

            self.logger.info(f"Saved optimized parameters to {optimization_path}")
            return best_params

        except Exception as e:
            self.logger.error(f"Hyperparameter optimization failed: {str(e)}")
            return None

    def continue_training(self, X_train, y_train, checkpoint_name=None, num_epochs=5):
        """Continue training from a checkpoint"""
        self.logger.info("Continuing training from checkpoint...")
        try:
            # Restore model state from checkpoint
            model, metrics = self.restore_from_checkpoint(checkpoint_name)
            if model is None:
                raise ValueError("Could not restore model from checkpoint")

            # Get last epoch
            start_epoch = metrics.get("epoch", 0) if metrics else 0
            
            # Extract features if not already done
            if self.feature_extractor is None:
                from src.features.feature_engineering import FeatureExtractor
                self.feature_extractor = FeatureExtractor(self.language, self.config)
            
            X_train_features = self.feature_extractor.extract_features(X_train)

            # Continue training for each model in ensemble
            for name, pipeline in model.items():
                self.logger.info(f"\nContinuing training for {name}...")
                
                # Setup validation
                cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
                train_scores = metrics.get("models", {}).get(name, {}).get("train_scores", [])
                valid_scores = metrics.get("models", {}).get(name, {}).get("valid_scores", [])
                
                # Training loop
                for epoch in range(start_epoch + 1, start_epoch + num_epochs + 1):
                    epoch_train_scores = []
                    epoch_valid_scores = []
                    
                    for fold, (train_idx, val_idx) in enumerate(cv.split(X_train_features, y_train)):
                        # Split data
                        X_train_fold = X_train_features[train_idx]
                        X_val_fold = X_train_features[val_idx]
                        y_train_fold = y_train[train_idx]
                        y_val_fold = y_train[val_idx]

                        # Calculate class weights
                        sample_weights = compute_sample_weight("balanced", y_train_fold)
                        
                        # Partial fit for the model
                        if name in ["rf", "svm"]:
                            pipeline.fit(X_train_fold, y_train_fold, 
                                      **{f"{name}__sample_weight": sample_weights})
                        else:
                            pipeline.fit(X_train_fold, y_train_fold)

                        # Get scores
                        train_score = f1_score(y_train_fold, 
                                             pipeline.predict(X_train_fold), 
                                             average="weighted")
                        val_score = f1_score(y_val_fold, 
                                           pipeline.predict(X_val_fold), 
                                           average="weighted")
                        
                        epoch_train_scores.append(train_score)
                        epoch_valid_scores.append(val_score)

                    # Average scores for epoch
                    avg_train = np.mean(epoch_train_scores)
                    avg_valid = np.mean(epoch_valid_scores)
                    train_scores.append(avg_train)
                    valid_scores.append(avg_valid)

                    self.logger.info(
                        f"Epoch {epoch} - Train: {avg_train:.4f}, Val: {avg_valid:.4f}"
                    )

                    # Update model metrics
                    metrics["models"][name].update({
                        "train_scores": train_scores,
                        "valid_scores": valid_scores,
                        "last_epoch": epoch
                    })

                    # Save checkpoint
                    if epoch % self.config.MODEL_SAVE_CONFIG["checkpoint_frequency"] == 0:
                        self.save_checkpoint(model, metrics, epoch)

            # Final save
            self.save_checkpoint(model, metrics, start_epoch + num_epochs)
            self.save_final_model(model, metrics)
            
            return model, metrics

        except Exception as e:
            self.logger.error(f"Continue training failed: {str(e)}")
            return None, None

================
File: src/utils/augmentation.py
================
import random
import re
from typing import List, Dict


class TextAugmenter:
    def __init__(self):
        self.common_typos = {
            "a": "aq",
            "b": "vb",
            "c": "xc",
            "d": "sd",
            "e": "er",
            "h": "gh",
            "i": "ui",
            "k": "jk",
            "m": "nm",
            "n": "bn",
            "o": "io",
            "p": "op",
            "r": "er",
            "s": "as",
            "t": "rt",
            "u": "yu",
            "v": "cv",
            "w": "qw",
            "y": "ty",
        }

        self.vi_variations = {
            "vâng": ["vang", "vânggg", "vâg", "uk"],
            "không": ["khong", "hông", "ko", "k", "khg"],
            "rất": ["rat", "rất là", "rất chi là"],
            "tốt": ["tot", "tốt", "tuyệt"],
            "được": ["dc", "đc", "được"],
            "biết": ["bít", "bik", "biết"],
            "thích": ["thik", "thích", "thíchhh"],
            "quá": ["qá", "quá trời", "quớ"],
        }

        self.en_variations = {
            "yes": ["yep", "yeah", "yup", "yas"],
            "no": ["nope", "nah", "noway"],
            "very": ["rlly", "rly", "super", "v"],
            "good": ["gud", "noice", "gr8"],
            "thanks": ["thx", "tks", "ty"],
            "please": ["pls", "plz", "plss"],
            "love": ["luv", "luvv", "lovee"],
            "cool": ["kewl", "noice", "lit"],
        }

        self.emojis = {
            "positive": ["😊", "😄", "👍", "❤️", "🥰", "💯", "✨"],
            "negative": ["😢", "😞", "👎", "😠", "😕", "💔", "😫"],
            "neutral": ["🤔", "😐", "💭", "👀", "🆗", "💁"],
        }

        from src.utils.templates import CommentTemplates

        self.templates = CommentTemplates()

    def _apply_typos(self, word: str) -> str:
        if len(word) < 4 or random.random() > 0.3:  # 30% chance for typo
            return word

        pos = random.randint(1, len(word) - 1)
        chars = list(word)
        if chars[pos] in self.common_typos:
            chars[pos] = random.choice(list(self.common_typos[chars[pos]]))
        return "".join(chars)

    def _get_variation(self, word: str, language: str) -> str:
        variations = self.vi_variations if language == "vi" else self.en_variations
        return variations.get(word.lower(), [word])[0]

    def _add_emojis(self, text: str, sentiment: str = "neutral") -> str:
        if random.random() > 0.3:  # 30% chance to add emoji
            return text
        emoji = random.choice(self.emojis[sentiment])
        position = random.choice(["prefix", "suffix"])
        return f"{emoji} {text}" if position == "prefix" else f"{text} {emoji}"

    def humanize_text(
        self, text: str, language: str = "vi", sentiment: str = "neutral"
    ) -> str:
        """Create more natural text variations"""
        words = text.split()
        result = []

        for word in words:
            # Apply variations
            if random.random() < 0.3:  # 30% chance for informal variations
                word = self._get_variation(word, language)
            elif random.random() < 0.2:  # 20% chance for typos
                word = self._apply_typos(word)

            # Random repeated letters (excitement/emphasis)
            if random.random() < 0.1:  # 10% chance
                if word[-1] in "aeiouydg":
                    word = word + word[-1] * random.randint(1, 3)

            result.append(word)

        text = " ".join(result)

        # Add emojis based on sentiment
        text = self._add_emojis(text, sentiment)

        # Random punctuation variations
        if random.random() < 0.2:  # 20% chance
            text = text + random.choice(["!!!", "..", "?!", "!"])

        return text

    def _tokenize(self, text: str) -> List[str]:
        """Simple tokenization that works for both English and Vietnamese"""
        return text.split()

    def synonym_replacement(self, text: str) -> str:
        """Simple word variation by character substitution"""
        words = self._tokenize(text)
        if len(words) < 2:
            return text

        n = max(1, int(len(words) * 0.1))  # Replace 10% of words
        indexes = random.sample(range(len(words)), min(n, len(words)))

        for i in indexes:
            word = words[i]
            if len(word) > 3:
                # Simple character substitution instead of using WordNet
                pos = random.randint(1, len(word) - 2)
                chars = list(word)
                chars[pos] = random.choice(
                    [c for c in "abcdefghijklmnopqrstuvwxyz" if c != chars[pos]]
                )
                words[i] = "".join(chars)

        return " ".join(words)

    def random_swap(self, text: str) -> str:
        words = text.split()
        if len(words) < 2:
            return text

        n = max(1, int(len(words) * 0.1))  # Swap 10% of words
        for _ in range(n):
            idx1, idx2 = random.sample(range(len(words)), 2)
            words[idx1], words[idx2] = words[idx2], words[idx1]

        return " ".join(words)

    def random_deletion(self, text: str) -> str:
        words = text.split()
        if len(words) < 2:
            return text

        keep_prob = 0.9  # Keep 90% of words
        words = [word for word in words if random.random() < keep_prob]

        return " ".join(words) if words else text

    def random_insertion(self, text: str) -> str:
        words = text.split()
        n = max(1, int(len(words) * 0.1))  # Insert 10% new words

        for _ in range(n):
            if not words:
                break
            # Insert a random word from the text at a random position
            word_to_insert = random.choice(words)
            insert_pos = random.randint(0, len(words))
            words.insert(insert_pos, word_to_insert)

        return " ".join(words)

    def _add_expression(
        self, comment: str, sentiment: str, language: str = "vi"
    ) -> str:
        """Thêm biểu thức cảm xúc vào bình luận"""
        if random.random() > 0.3:  # 30% chance
            return comment

        expressions = (
            self.templates.vi_expressions
            if language == "vi"
            else self.templates.en_expressions
        )
        expr = random.choice(expressions[sentiment])

        position = random.choice(["prefix", "suffix"])
        if position == "prefix":
            return f"{expr}, {comment.lower()}"
        return f"{comment}, {expr}"

    def _apply_internet_slang(self, text: str, language: str) -> str:
        """Apply internet slang to text"""
        if random.random() > 0.4:  # 40% chance to use internet slang
            return text

        words = text.split()
        result = []

        for word in words:
            if random.random() < 0.3:  # 30% chance per word
                slang_word = self.templates.get_internet_term(word, language)
                result.append(slang_word)
            else:
                result.append(word)

        return " ".join(result)

    def _randomly_combine_expressions(self, text: str, sentiment: str, language: str) -> str:
        """Randomly combine multiple expressions and slang terms"""
        if random.random() > 0.3:
            return text
            
        num_expressions = random.randint(1, 3)  # Add 1-3 expressions
        expressions = []
        
        for _ in range(num_expressions):
            expr_type = random.choice(['slang', 'expression', 'internet_term'])
            if expr_type == 'slang':
                category = random.choice(list(self.templates.vi_slangs[sentiment].keys()))
                expr = self.templates.get_random_slang(sentiment, category, language)
            elif expr_type == 'expression':
                expr = random.choice(self.templates.vi_expressions[sentiment])
            else:
                word = random.choice(list(self.templates.vi_slangs['internet_terms'].keys()))
                expr = self.templates.get_internet_term(word, language)
                
            if expr:
                expressions.append(expr)
                
        if expressions:
            position = random.choice(['prefix', 'both', 'suffix'])
            if position == 'prefix':
                return f"{' '.join(expressions)} {text}"
            elif position == 'suffix':
                return f"{text} {' '.join(expressions)}"
            else:
                return f"{expressions[0]} {text} {' '.join(expressions[1:])}"
        return text

    def _add_random_punctuation(self, text: str, sentiment: str) -> str:
        """Add random punctuation based on sentiment"""
        if random.random() > 0.4:
            return text
            
        punct_patterns = {
            'positive': ['!!!', '!?!', '...!!!', '!!! <3'],
            'negative': ['...', '!?', '(?)', '>.<'],
            'neutral': ['...', '.', '...?', '(?!)']
        }
        
        num_puncts = random.randint(1, 3)
        puncts = [random.choice(punct_patterns[sentiment]) for _ in range(num_puncts)]
        return f"{text}{''.join(puncts)}"

    def generate_realistic_comment(
        self, topic: str, sentiment: str, language: str = "vi"
    ) -> str:
        """Generate a realistic comment for a given topic and sentiment"""
        templates = (
            self.templates.vi_templates
            if language == "vi"
            else self.templates.en_templates
        )
        fillers = (
            self.templates.vi_fillers if language == "vi" else self.templates.en_fillers
        )

        if topic not in templates:
            topic = list(templates.keys())[0]  # default to first topic

        topic_templates = templates[topic][sentiment]
        template = random.choice(topic_templates)

        # Generate fillers for the template
        filled_comment = template
        for placeholder in re.findall(r"\{(\w+)\}", template):
            if placeholder in fillers:
                filler = random.choice(fillers[placeholder])
                filled_comment = filled_comment.replace(f"{{{placeholder}}}", filler)
            else:
                # Generic fillers for undefined placeholders
                filled_comment = filled_comment.replace(f"{{{placeholder}}}", "")

        # Add variations and humanization
        filled_comment = self.humanize_text(filled_comment, language, sentiment)

        # Add slang and internet speech variations
        if random.random() < 0.4:  # 40% chance to use slang
            filled_comment = self._apply_internet_slang(filled_comment, language)

            # Add random slang intensifier
            if random.random() < 0.3:
                intensifier = self.templates.get_random_intensifier(language)
                filled_comment = f"{intensifier} {filled_comment}"

        # Add expressions and emojis
        filled_comment = self._add_expression(filled_comment, sentiment, language)
        filled_comment = self._add_emojis(filled_comment, sentiment)

        # Random variations in punctuation and emphasis
        if random.random() < 0.3:
            filled_comment = filled_comment + random.choice(["!!!", "..", "?!", "!!"])

        # Randomize comment structure
        if random.random() < 0.3:
            # Add random topic-specific context
            contexts = {
                'product_review': ['Mới mua', 'Dùng được 1 tuần', 'Đặt trên shopee'],
                'food_review': ['Ghé quán hôm qua', 'Đi ăn với bạn', 'Oder mang về'],
                'movie_review': ['Xem buổi chiều', 'Ra rạp coi', 'Xem trên Netflix'],
                'service_review': ['Làm dịch vụ hôm qua', 'Mới trải nghiệm', 'Book lịch']
            }
            if topic in contexts:
                context = random.choice(contexts[topic])
                filled_comment = f"{context}, {filled_comment}"

        # Add random expressions and slang combinations
        filled_comment = self._randomly_combine_expressions(filled_comment, sentiment, language)
        
        # Add varied punctuation
        filled_comment = self._add_random_punctuation(filled_comment, sentiment)

        return filled_comment

    def generate_topic_comment(self, topic: str, sentiment: str, language: str = 'vi') -> str:
        """Generate a comment for a specific topic and sentiment"""
        if not topic.endswith('_review'):
            topic = f"{topic}_review"
            
        return self.generate_realistic_comment(topic, sentiment, language)

    def generate_topic_comments(self, topic: str, count: int = 10, language: str = 'vi', sentiment: int = None) -> list:
        """Generate comments for a specific topic with optional sentiment"""
        comments = []
        sentiment_map = {0: 'negative', 1: 'neutral', 2: 'positive'}
        
        for _ in range(count):
            # If sentiment is provided, use it, otherwise randomly choose
            if sentiment is not None:
                sent = sentiment_map[sentiment]
            else:
                sent = random.choice(['negative', 'neutral', 'positive'])
                
            text = self.generate_topic_comment(topic, sent, language)
            label = {'negative': 0, 'neutral': 1, 'positive': 2}[sent]
            
            comments.append({
                'text': text,
                'label': label
            })
            
        return comments

================
File: src/utils/evaluation.py
================
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns


class ModelEvaluator:
    """
    Model evaluation utility with visualization capabilities.
    
    Attributes:
        language (str): Language code for the model being evaluated
    """
    def __init__(self, language: str):
        self.language = language

    def evaluate(self, y_true, y_pred, y_prob=None):
        """
        Evaluates model performance with multiple metrics.
        
        Args:
            y_true: True labels
            y_pred: Predicted labels
            y_prob: Prediction probabilities (optional)
            
        Returns:
            dict: Dictionary containing evaluation metrics and plots
        """
        results = {}
        
        # Detailed metrics
        report = classification_report(y_true, y_pred, output_dict=True)
        results["classification_report"] = classification_report(y_true, y_pred)
        results["metrics"] = {
            "accuracy": report['accuracy'],
            "macro_f1": report['macro avg']['f1-score'],
            "weighted_f1": report['weighted avg']['f1-score']
        }
        
        # Plot metrics
        self._plot_metrics_summary(results["metrics"])

        # Basic classification metrics
        results["classification_report"] = classification_report(y_true, y_pred)

        # Confusion matrix
        cm = confusion_matrix(y_true, y_pred)
        self.plot_confusion_matrix(cm)

        if y_prob is not None:
            # ROC curve
            self.plot_roc_curve(y_true, y_prob)

        return results

    def _plot_metrics_summary(self, metrics):
        """Plots a summary of key performance metrics"""
        plt.figure(figsize=(10, 4))
        colors = ['skyblue', 'lightgreen', 'lightcoral']
        
        plt.bar(metrics.keys(), metrics.values(), color=colors)
        plt.title(f'Model Performance Metrics - {self.language.upper()}')
        plt.ylim(0, 1)
        
        for i, v in enumerate(metrics.values()):
            plt.text(i, v + 0.01, f'{v:.3f}', ha='center')
            
        plt.tight_layout()
        plt.show()

    def plot_confusion_matrix(self, cm):
        plt.figure(figsize=(8, 6))
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
        plt.title(f"Confusion Matrix - {self.language.upper()}")
        plt.ylabel("True Label")
        plt.xlabel("Predicted Label")
        plt.show()

    def plot_roc_curve(self, y_true, y_prob):
        from sklearn.metrics import roc_curve, auc

        fpr, tpr, _ = roc_curve(y_true, y_prob[:, 1])
        roc_auc = auc(fpr, tpr)

        plt.figure(figsize=(8, 6))
        plt.plot(
            fpr, tpr, color="darkorange", lw=2, label=f"ROC curve (AUC = {roc_auc:.2f})"
        )
        plt.plot([0, 1], [0, 1], color="navy", lw=2, linestyle="--")
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.05])
        plt.xlabel("False Positive Rate")
        plt.ylabel("True Positive Rate")
        plt.title(f"ROC Curve - {self.language.upper()}")
        plt.legend(loc="lower right")
        plt.show()

================
File: src/utils/logger.py
================
import logging
import sys
from logging.handlers import RotatingFileHandler

class Logger:
    def __init__(self, name, log_file='sentiment_analysis.log'):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.INFO)
        
        # Console handler
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        console_handler.setFormatter(console_formatter)
        
        # File handler with utf-8 encoding
        file_handler = RotatingFileHandler(
            log_file, maxBytes=1024*1024, backupCount=5, encoding='utf-8'
        )
        file_handler.setLevel(logging.INFO)
        file_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        file_handler.setFormatter(file_formatter)
        
        # Add handlers
        self.logger.addHandler(console_handler)
        self.logger.addHandler(file_handler)

================
File: src/utils/menu.py
================
import os
import sys
from typing import List, Dict, Callable
from datetime import datetime, timedelta
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt, IntPrompt
from rich.panel import Panel


class TerminalMenu:
    def __init__(self, config=None):
        """Initialize TerminalMenu with configuration"""
        from rich.console import Console

        self.console = Console()
        self.config = config  # Store config object
        self.default_data_dir = os.path.join(
            os.path.dirname(
                os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            ),
            "data",
        )
        os.makedirs(self.default_data_dir, exist_ok=True)
        self.menu_options = {
            "1": "Train new model",
            "2": "Analyze text",
            "3": "Evaluate model",
            "4": "Generate training data",
            "5": "View model metrics",
            "6": "Test model",
            "7": "Restore model from checkpoint",
            "8": "Data collection",
            "9": "Data preprocessing",
            "10": "Model optimization",
            "11": "Export results",
            "12": "API Server",
            "13": "Continue Training Model",
            "q": "Quit",
        }

    def clear_screen(self):
        os.system("cls" if os.name == "nt" else "clear")

    def display_header(self):
        self.clear_screen()
        self.console.print(
            Panel(
                "[bold blue]Sentiment Analysis System[/bold blue]\n"
                "[cyan]Vietnamese-English Text Analysis Tool[/cyan]",
                expand=False,
            )
        )

    def display_menu(self) -> str:
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Option", style="dim")
        table.add_column("Description")
        table.add_column("Command Example", style="green")

        table.add_row(
            "1", "Train New Model", "python main.py --mode train --language vi"
        )
        table.add_row(
            "2",
            "Analyze Text (Predict)",
            "python main.py --mode predict --language vi --input data.csv --output results.csv",
        )
        table.add_row(
            "3",
            "Evaluate Model",
            "python main.py --mode evaluate --language vi --input test.csv",
        )
        table.add_row(
            "4", "Generate Training Data", "Generate synthetic samples (specify count)"
        )
        table.add_row("5", "View Model Performance", "Display current model metrics")
        table.add_row("6", "Test Model", "Test the model with custom text")
        table.add_row(
            "7", "Restore Model from Checkpoint", "Restore model from saved checkpoint"
        )
        table.add_row("8", "Data Collection", "Collect data from various sources")
        table.add_row("9", "Data Preprocessing", "Clean and prepare collected data")
        table.add_row("10", "Model Optimization", "Tune model parameters")
        table.add_row("11", "Export Results", "Export analysis results and reports")
        table.add_row("12", "API Server", "Start/Stop REST API Server")
        table.add_row("13", "Continue Training Model", "Continue training the model")
        table.add_row("q", "Quit", "Exit the application")

        self.console.print(table)

        choice = Prompt.ask(
            "\n[yellow]Choose an option[/yellow]",
            choices=list(self.menu_options.keys()),
            default="q",
        )
        return choice

    def get_language_choice(self) -> str:
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Language")
        table.add_column("Code")

        table.add_row("Vietnamese", "vi")
        table.add_row("English", "en")

        self.console.print(table)

        return Prompt.ask(
            "\n[yellow]Select language[/yellow]", choices=["vi", "en"], default="vi"
        )

    def get_file_path(self, file_type: str) -> str:
        """Get and validate file path"""
        default_path = os.path.join(self.default_data_dir, f"{file_type}.csv")
        while True:
            path = Prompt.ask(
                f"\n[yellow]Enter {file_type} file path[/yellow]", default=default_path
            )

            # Ensure directory exists
            directory = os.path.dirname(path)
            if directory and not os.path.exists(directory):
                try:
                    os.makedirs(directory)
                except Exception as e:
                    self.console.print(f"[red]Error creating directory: {e}[/red]")
                    continue

            return path

    def get_sample_count(self) -> int:
        """Get the number of samples to generate"""
        while True:
            try:
                count = IntPrompt.ask(
                    "\n[yellow]Enter number of samples to generate[/yellow]",
                    default=1000,
                    show_default=True,
                )
                if 100 <= count <= 50000:
                    return count
                self.console.print(
                    "[red]Please enter a number between 100 and 50000[/red]"
                )
            except ValueError:
                self.console.print("[red]Please enter a valid number[/red]")

    def get_custom_sample_count(self) -> dict:
        """Get custom sample counts for each sentiment category"""
        counts = {}

        self.console.print("\n[cyan]Enter number of samples for each category:[/cyan]")

        categories = {
            "positive": "Tích cực (Positive)",
            "neutral": "Trung tính (Neutral)",
            "negative": "Tiêu cực (Negative)",
        }

        for key, label in categories.items():
            while True:
                try:
                    count = IntPrompt.ask(
                        f"\n[yellow]Số mẫu {label}[/yellow]",
                        default=100,
                        show_default=True,
                    )
                    if 0 <= count <= 10000:
                        counts[key] = count
                        break
                    self.console.print("[red]Vui lòng nhập số từ 0 đến 10000[/red]")
                except ValueError:
                    self.console.print("[red]Vui lòng nhập số hợp lệ[/red]")

        return counts

    def display_progress(self, message: str):
        self.console.print(f"[bold blue]>>> {message}...[/bold blue]")

    def display_result(self, success: bool, message: str):
        style = "green" if success else "red"
        self.console.print(f"[{style}]{message}[/{style}]")

    def wait_for_user(self):
        self.console.print("\n[yellow]Press Enter to continue...[/yellow]")
        input()

    def get_test_text(self):
        """Get test text from user"""
        print("\nEnter text to test (or 'q' to quit):")
        return input("> ").strip()

    def display_sentiment_result(self, text, sentiment, confidence):
        """Display sentiment analysis result"""
        sentiment_map = {0: "Negative", 1: "Neutral", 2: "Positive"}
        print("\nResults:")
        print("-" * 50)
        print(f"Text: {text}")
        print(f"Sentiment: {sentiment_map[sentiment]}")
        print(f"Confidence: {confidence:.2f}")
        print("-" * 50)

    def display_emotion_result(self, text, emotion_result):
        """Display emotion analysis results with proper config access"""
        try:
            self.console.print("\n[bold cyan]Analysis Results:[/bold cyan]")
            self.console.print(f"Text: {text}")

            if emotion_result:
                # Get sentiment label
                sentiment = emotion_result.get("sentiment")
                sentiment_conf = emotion_result.get("sentiment_confidence", 0)

                sentiment_label = (
                    "Tích cực"
                    if sentiment == 2
                    else "Tiêu cực" if sentiment == 0 else "Trung tính"
                )
                self.console.print(f"\nCảm xúc chung: {sentiment_label}")
                self.console.print(f"Độ tin cậy: {sentiment_conf:.2f}")

                # Display detailed emotion
                emotion = emotion_result.get("emotion", "")
                emotion_vi = emotion_result.get("emotion_vi", "")
                emoji = emotion_result.get("emotion_emoji", "")
                emotion_conf = emotion_result.get("emotion_confidence", 0)

                self.console.print(f"\nBiểu cảm chi tiết: {emotion_vi} {emoji}")
                self.console.print(f"Độ tin cậy: {emotion_conf:.2f}")

                # Display emotion scores if available
                if emotion_result.get("emotion_scores"):
                    self.console.print("\nĐiểm số các biểu cảm:")
                    for emotion, score in emotion_result["emotion_scores"].items():
                        if score > 0:
                            self.console.print(f"{emotion}: {score:.2f}")
            else:
                self.console.print("[red]Không thể phân tích cảm xúc[/red]")

        except Exception as e:
            self.console.print(f"[red]Error displaying results: {str(e)}[/red]")

    def display_data_collection_menu(self):
        """Display data collection options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "Collect from Google Play")
        table.add_row("2", "Collect from Shopee")
        table.add_row("3", "Collect from Facebook")
        table.add_row("4", "Import from CSV/Excel")
        table.add_row("5", "Scrape from websites")
        table.add_row("b", "Back to main menu")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select data collection method[/yellow]",
            choices=["1", "2", "3", "4", "5", "b"],
            default="b",
        )

    def display_preprocessing_menu(self):
        """Display preprocessing options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "Clean text data")
        table.add_row("2", "Remove duplicates")
        table.add_row("3", "Balance dataset")
        table.add_row("4", "Filter by criteria")
        table.add_row("5", "Augment data")
        table.add_row("b", "Back to main menu")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select preprocessing action[/yellow]",
            choices=["1", "2", "3", "4", "5", "b"],
            default="b",
        )

    def display_optimization_menu(self):
        """Display model optimization options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "Hyperparameter tuning")
        table.add_row("2", "Feature selection")
        table.add_row("3", "Cross validation")
        table.add_row("4", "Model ensemble")
        table.add_row("5", "Performance analysis")
        table.add_row("b", "Back to main menu")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select optimization method[/yellow]",
            choices=["1", "2", "3", "4", "5", "b"],
            default="b",
        )

    def display_export_menu(self):
        """Display export options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "Export predictions")
        table.add_row("2", "Export model metrics")
        table.add_row("3", "Generate report")
        table.add_row("4", "Export visualizations")
        table.add_row("5", "Export model")
        table.add_row("b", "Back to main menu")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select export option[/yellow]",
            choices=["1", "2", "3", "4", "5", "b"],
            default="b",
        )

    def display_api_menu(self):
        """Display enhanced API server options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "Start API Server")
        table.add_row("2", "Stop API Server")
        table.add_row("3", "View API Status")
        table.add_row("4", "Configure API Settings")
        table.add_row("5", "Test API Endpoints")
        table.add_row("6", "View Server Logs")
        table.add_row("7", "Monitor Metrics")
        table.add_row("8", "Dashboard")
        table.add_row("9", "Export Data")
        table.add_row("b", "Back to main menu")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select API option[/yellow]",
            choices=["1", "2", "3", "4", "5", "6", "7", "8", "9", "b"],
            default="b",
        )

    def display_api_test_menu(self):
        """Display API testing options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "Test single text prediction")
        table.add_row("2", "Test batch prediction")
        table.add_row("3", "Test health check")
        table.add_row("b", "Back to API menu")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select test option[/yellow]",
            choices=["1", "2", "3", "b"],
            default="b",
        )

    def get_api_endpoint(self):
        """Get API endpoint from user"""
        return Prompt.ask(
            "\n[yellow]Enter API endpoint[/yellow]", default="http://localhost:8000"
        )

    def display_api_response(self, response_data):
        """Display API response in a formatted way"""
        if isinstance(response_data, dict):
            self.console.print("\n[cyan]API Response:[/cyan]")
            for key, value in response_data.items():
                self.console.print(f"[green]{key}:[/green] {value}")
        elif isinstance(response_data, list):
            self.console.print("\n[cyan]API Response (Batch):[/cyan]")
            for item in response_data:
                self.console.print("\n[green]Item:[/green]")
                for key, value in item.items():
                    self.console.print(f"[green]{key}:[/green] {value}")

    def display_detailed_test_menu(self):
        """Display detailed testing options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "Test với văn bản đơn lẻ")
        table.add_row("2", "Test với tập dữ liệu mẫu")
        table.add_row("3", "Test hiệu năng (Performance)")
        table.add_row("4", "Test độ chính xác (Accuracy)")
        table.add_row("5", "Test khả năng chịu tải (Load)")
        table.add_row("b", "Quay lại")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Chọn loại test[/yellow]",
            choices=["1", "2", "3", "4", "5", "b"],
            default="b",
        )

    def display_performance_metrics(self, metrics: dict):
        """Display detailed performance metrics"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Metric")
        table.add_column("Value")

        for key, value in metrics.items():
            if isinstance(value, float):
                table.add_row(key, f"{value:.4f}")
            else:
                table.add_row(key, str(value))

        self.console.print("\n[cyan]Performance Metrics:[/cyan]")
        self.console.print(table)

    def get_test_batch_size(self) -> int:
        """Get batch size for testing"""
        while True:
            try:
                size = IntPrompt.ask("\n[yellow]Enter batch size[/yellow]", default=10)
                if 1 <= size <= 1000:
                    return size
                self.console.print(
                    "[red]Please enter a number between 1 and 1000[/red]"
                )
            except ValueError:
                self.console.print("[red]Please enter a valid number[/red]")

    def display_dashboard_menu(self):
        """Display dashboard management options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "View Live Metrics")
        table.add_row("2", "View Historical Data")
        table.add_row("3", "Configure Alerts")
        table.add_row("4", "Export Metrics")
        table.add_row("5", "System Status")
        table.add_row("b", "Back to API menu")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select dashboard option[/yellow]",
            choices=["1", "2", "3", "4", "5", "b"],
            default="b",
        )

    def display_metrics_summary(self, metrics):
        """Display metrics summary in a formatted table"""
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Metric")
        table.add_column("Value")

        # Add rows for each metric
        table.add_row("Uptime", metrics["uptime"])
        table.add_row("Total Requests", str(metrics["total_requests"]))
        table.add_row("Total Errors", str(metrics["total_errors"]))
        table.add_row("Memory Usage", f"{metrics['current_memory_usage']}%")
        table.add_row("CPU Usage", f"{metrics['current_cpu_usage']}%")

        # Model status
        for lang, status in metrics["active_models"].items():
            table.add_row(
                f"{lang.upper()} Model",
                "[green]Active[/green]" if status else "[red]Inactive[/red]",
            )

        self.console.print("\n[bold]API Metrics Summary[/bold]")
        self.console.print(table)

    def display_logs_menu(self):
        """Display enhanced log viewing options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "View latest logs")
        table.add_row("2", "View initialization logs")
        table.add_row("3", "View request logs")
        table.add_row("4", "Filter by path")
        table.add_row("5", "Filter by status code")
        table.add_row("6", "Export logs")
        table.add_row("b", "Back")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select option[/yellow]",
            choices=["1", "2", "3", "4", "5", "6", "b"],
            default="b",
        )

    def get_log_lines(self):
        """Get number of log lines to display"""
        return IntPrompt.ask("\n[yellow]Enter number of lines[/yellow]", default=50)

    def get_log_level(self):
        """Get log level to filter"""
        return Prompt.ask(
            "\n[yellow]Enter log level[/yellow]",
            choices=["DEBUG", "INFO", "WARNING", "ERROR", "all"],
            default="all",
        )

    def get_log_time(self):
        """Get time filter for logs"""
        hours = IntPrompt.ask(
            "\n[yellow]Show logs from last N hours[/yellow]", default=24
        )
        time_ago = datetime.now() - timedelta(hours=hours)
        return time_ago.isoformat()

    def display_logs(self, logs: List[str]):
        """Display log entries in a formatted table"""
        table = Table(
            show_header=True,
            header_style="bold magenta",
            wrap=True,
            width=self.console.width,
        )
        table.add_column("Time", style="cyan")
        table.add_column("Level", style="yellow")
        table.add_column("Message")

        for log in logs:
            try:
                parts = log.split(None, 2)
                if len(parts) >= 3:
                    time, level, msg = parts
                    table.add_row(time, level, msg.strip())
            except:
                table.add_row("", "", log.strip())

        self.console.print(table)

    def display_logs_menu(self):
        """Display enhanced log viewing options"""
        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Option")
        table.add_column("Description")

        table.add_row("1", "View Latest Logs")
        table.add_row("2", "View Init Logs")
        table.add_row("3", "View Request Logs")
        table.add_row("4", "Filter by Path")
        table.add_row("5", "Filter by Status Code")
        table.add_row("6", "Filter by Time")
        table.add_row("7", "Filter by Level")
        table.add_row("8", "Search Logs")
        table.add_row("9", "Export Logs")
        table.add_row("b", "Back")

        self.console.print(table)
        return Prompt.ask(
            "\n[yellow]Select option[/yellow]",
            choices=["1", "2", "3", "4", "5", "6", "7", "8", "9", "b"],
            default="b",
        )

    def get_log_filters(self):
        """Get log filter parameters"""
        filters = {}

        # Get log type
        filters["type"] = Prompt.ask(
            "Log type", choices=["all", "init", "request"], default="all"
        )

        # Get path filter if requested
        if Prompt.ask("Filter by path?", choices=["y", "n"], default="n") == "y":
            filters["path"] = self.console.input("Enter path (e.g., /predict): ")

        # Get status code if requested
        if Prompt.ask("Filter by status code?", choices=["y", "n"], default="n") == "y":
            filters["status_code"] = IntPrompt.ask("Enter status code (e.g., 200): ")

        # Get number of lines
        filters["lines"] = IntPrompt.ask("Number of lines to show", default=50)

        return filters

    def format_log_entry(self, log: str) -> str:
        """Format log entry for display"""
        try:
            # Parse log entry parts
            parts = log.split(" ", 3)
            timestamp = parts[0]
            level = parts[1]
            message = parts[2:]

            # Color based on log level
            level_colors = {
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "DEBUG": "blue",
            }
            color = level_colors.get(level.strip("[]"), "white")

            # Format with color
            return f"[cyan]{timestamp}[/cyan] [{color}]{level}[/{color}] {''.join(message)}"
        except:
            return log

    def display_filtered_logs(self, logs: List[str], filters: dict):
        """Display filtered logs with formatting"""
        if not logs:
            self.console.print("[yellow]No logs found matching filters[/yellow]")
            return

        # Show active filters
        self.console.print("\n[bold cyan]Active Filters:[/bold cyan]")
        for key, value in filters.items():
            if value is not None and value != "all":
                self.console.print(f"[green]{key}:[/green] {value}")

        # Show logs
        self.console.print("\n[bold cyan]Log Entries:[/bold cyan]")
        for log in logs:
            self.console.print(self.format_log_entry(log))

    def get_log_search_params(self):
        """Get log search parameters"""
        params = {}
        params["keyword"] = self.console.input(
            "[yellow]Enter search keyword: [/yellow]"
        )

        if Prompt.ask("Add date filter?", choices=["y", "n"], default="n") == "y":
            params["from_date"] = self.console.input(
                "[yellow]From date (YYYY-MM-DD): [/yellow]"
            )
            params["to_date"] = self.console.input(
                "[yellow]To date (YYYY-MM-DD): [/yellow]"
            )

        if Prompt.ask("Add more filters?", choices=["y", "n"], default="n") == "y":
            params["level"] = Prompt.ask(
                "Log level",
                choices=["ERROR", "WARNING", "INFO", "DEBUG", "all"],
                default="all",
            )
            params["path"] = self.console.input(
                "[yellow]Filter by path (optional): [/yellow]"
            )

        return params

    def get_metrics_filter(self):
        """Get metrics filter parameters"""
        filters = {}

        # Time range
        filters["time_range"] = Prompt.ask(
            "Time range", choices=["1h", "6h", "24h", "7d", "30d"], default="24h"
        )

        # Metrics type
        filters["type"] = Prompt.ask(
            "Metrics type",
            choices=["performance", "errors", "models", "all"],
            default="all",
        )

        # Aggregation
        if Prompt.ask("Add aggregation?", choices=["y", "n"], default="n") == "y":
            filters["aggregation"] = Prompt.ask(
                "Aggregation period", choices=["1min", "5min", "1h", "1d"], default="1h"
            )

        return filters

    def display_metrics_summary(self, metrics: dict):
        """Display metrics summary"""
        if not metrics:
            self.console.print("[yellow]No metrics data available[/yellow]")
            return

        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("Metric")
        table.add_column("Value")

        for key, value in metrics.items():
            if isinstance(value, float):
                formatted_value = f"{value:.2f}"
            else:
                formatted_value = str(value)

            # Add color formatting based on thresholds
            if "error" in key.lower():
                color = "red" if value > 0 else "green"
                formatted_value = f"[{color}]{formatted_value}[/{color}]"
            elif "usage" in key.lower():
                if value > 90:
                    formatted_value = f"[red]{formatted_value}%[/red]"
                elif value > 70:
                    formatted_value = f"[yellow]{formatted_value}%[/yellow]"
                else:
                    formatted_value = f"[green]{formatted_value}%[/green]"

            table.add_row(key, formatted_value)

        self.console.print(table)


def get_more_test_samples():
    """Get additional test samples"""
    return [
        ("Sản phẩm rất chất lượng, đóng gói cẩn thận", 2),
        ("Giao hàng chậm, thái độ phục vụ kém", 0),
        ("Hàng tạm được, giá hơi cao", 1),
        ("Tuyệt vời, sẽ ủng hộ shop dài dài", 2),
        ("Thất vọng về chất lượng sản phẩm", 0),
        ("Hàng đúng như mô tả", 1),
    ]


def get_dashboard_config():
    """Get dashboard configuration options"""
    config = {}
    config["update_interval"] = IntPrompt.ask("Update interval (seconds)", default=5)
    config["chart_history"] = IntPrompt.ask("Number of data points to show", default=50)
    config["alert_threshold"] = IntPrompt.ask(
        "Error rate alert threshold (%)", default=10
    )
    return config


def get_log_export_format():
    """Get log export format"""
    return Prompt.ask("Export format", choices=["txt", "json", "csv"], default="txt")


# ...existing code...

================
File: src/utils/metrics_store.py
================
import os
import json
import time
from datetime import datetime, timedelta
from collections import deque
from threading import Lock
import atexit
from typing import Dict, Any
from src.utils.server_utils import ConnectionManager
from src.utils.logger import Logger
import collections

def _convert_deque_to_list(obj):
    """Recursively convert deque objects to lists in the given object."""
    if isinstance(obj, collections.deque):
        return list(obj)
    elif isinstance(obj, dict):
        return {k: _convert_deque_to_list(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [_convert_deque_to_list(v) for v in obj]
    else:
        return obj

class MetricsStore:
    _instance = None
    _lock = Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(MetricsStore, cls).__new__(cls)
                cls._instance._initialized = False
            return cls._instance

    def __init__(self):
        if self._initialized:
            return
            
        self.logger = Logger(__name__).logger
        self._data = {
            "requests": deque(maxlen=100),
            "response_times": deque(maxlen=100),
            "errors": deque(maxlen=100),
            "start_time": datetime.now().isoformat(),
            "total_requests": 0,
            "total_errors": 0,
            "model_performance": {
                "vi": {
                    "loading_time": 0.0, 
                    "inference_times": deque(maxlen=1000),
                    "accuracy": 0.0,
                    "precision": 0.0,
                    "recall": 0.0
                },
                "en": {
                    "loading_time": 0.0, 
                    "inference_times": deque(maxlen=1000),
                    "accuracy": 0.0,
                    "precision": 0.0,
                    "recall": 0.0
                },
            }
        }
        self._file_path = "metrics.json"
        self._lock = Lock()
        self._initialized = True
        self._load_metrics()
        atexit.register(self._save_metrics)
        self.requests = deque(maxlen=1000)
        self.response_times = deque(maxlen=1000)
        self.errors = deque(maxlen=1000)
        self.total_requests = 0
        self.total_errors = 0
        self.start_time = datetime.now()
        self.model_loading_times = {"vi": [], "en": []}
        self.inference_times = {"vi": [], "en": []}
        self.accuracy = {"vi": 0.0, "en": 0.0}
        self.precision = {"vi": 0.0, "en": 0.0}
        self.recall = {"vi": 0.0, "en": 0.0}

    def _load_metrics(self):
        """Load metrics from file if exists"""
        try:
            if os.path.exists(self._file_path):
                with open(self._file_path, 'r') as f:
                    data = json.load(f)
                    # Convert lists back to deques
                    for key in ['requests', 'response_times', 'errors']:
                        self._data[key] = deque(data[key], maxlen=100)
                    self._data['total_requests'] = data['total_requests']
                    self._data['total_errors'] = data['total_errors']
                    self._data['start_time'] = data['start_time']
                    self._data['model_performance'] = data.get('model_performance', self._data['model_performance'])
        except json.JSONDecodeError as e:
            self.logger.error(f"Error loading metrics: {e}")
            # Reset metrics to default state
            self.requests = deque(maxlen=1000)
            self.response_times = deque(maxlen=1000)
            self.errors = deque(maxlen=1000)
            self.total_requests = 0
            self.total_errors = 0
            self.start_time = datetime.now()
        except Exception as e:
            self.logger.error(f"Unexpected error loading metrics: {e}")
            # Reset metrics to default state
            self.requests = deque(maxlen=1000)
            self.response_times = deque(maxlen=1000)
            self.errors = deque(maxlen=1000)
            self.total_requests = 0
            self.total_errors = 0
            self.start_time = datetime.now()

    def _save_metrics(self):
        """Save metrics to file"""
        try:
            metrics_to_save = _convert_deque_to_list(self._data)
            with open(self._file_path, 'w') as f:
                json.dump(metrics_to_save, f)
        except Exception as e:
            self.logger.error(f"Error saving metrics: {e}")

    def update_metrics(self, processing_time, is_error=False):
        """Update metrics with thread safety"""
        with self._lock:
            self._data['total_requests'] += 1
            self._data['requests'].append(datetime.now().isoformat())
            self._data['response_times'].append(processing_time)
            
            if is_error:
                self._data['total_errors'] += 1
                self._data['errors'].append(datetime.now().isoformat())

            # Periodically save metrics
            if self._data['total_requests'] % 100 == 0:
                self._save_metrics()
        self.requests.append(datetime.now())
        self.response_times.append(processing_time)
        if is_error:
            self.errors.append(datetime.now())
            self.total_errors += 1
        self.total_requests += 1

    def get_metrics(self):
        """Get current metrics"""
        with self._lock:
            return {
                "total_requests": self._data['total_requests'],
                "total_errors": self._data['total_errors'],
                "recent_requests": len(self._data['requests']),
                "avg_response_time": (
                    sum(self._data['response_times']) / len(self._data['response_times'])
                    if self._data['response_times'] else 0
                ),
                "start_time": self._data['start_time']
            }
        return {
            "total_requests": self.total_requests,
            "total_errors": self.total_errors,
            "requests_last_period": len(self.requests),
            "average_response_time": (
                sum(self.response_times) / len(self.response_times)
                if self.response_times else 0
            ),
            "error_rate": (
                (self.total_errors / self.total_requests) * 100
                if self.total_requests else 0
            ),
        }

    def clear_metrics(self):
        """Clear all metrics"""
        with self._lock:
            self._data['requests'].clear()
            self._data['response_times'].clear()
            self._data['errors'].clear()
            self._data['total_requests'] = 0
            self._data['total_errors'] = 0
            self._data['start_time'] = datetime.now().isoformat()
            self._save_metrics()

    def clear_all(self):
        """Clear all metrics and reinitialize"""
        with self._lock:
            self._data = {
                "requests": deque(maxlen=100),
                "response_times": deque(maxlen=100),
                "errors": deque(maxlen=100),
                "start_time": datetime.now().isoformat(),
                "total_requests": 0,
                "total_errors": 0,
                "model_performance": {
                    "vi": {
                        "loading_time": 0.0, 
                        "inference_times": deque(maxlen=1000),
                        "accuracy": 0.0,
                        "precision": 0.0,
                        "recall": 0.0
                    },
                    "en": {
                        "loading_time": 0.0, 
                        "inference_times": deque(maxlen=1000),
                        "accuracy": 0.0,
                        "precision": 0.0,
                        "recall": 0.0
                    },
                }
            }
            self._save_metrics()
        self.requests.clear()
        self.response_times.clear()
        self.errors.clear()
        self.total_requests = 0
        self.total_errors = 0
        self.model_loading_times = {"vi": [], "en": []}
        self.inference_times = {"vi": [], "en": []}
        self.accuracy = {"vi": 0.0, "en": 0.0}
        self.precision = {"vi": 0.0, "en": 0.0}
        self.recall = {"vi": 0.0, "en": 0.0}
        self.start_time = datetime.now()
        self.logger.info("All metrics have been cleared.")

    def update_model_loading_time(self, language: str, loading_time: float):
        """Update model loading time for a specific language."""
        if language in self.model_loading_times:
            self.model_loading_times[language].append(loading_time)
            self.logger.debug(f"Model loading time for {language}: {loading_time}s")
        else:
            self.logger.warning(f"Attempted to update loading time for unsupported language: {language}")

    def update_inference_time(self, language: str, inference_time: float):
        """Update inference time for a specific language."""
        if language in self.inference_times:
            self.inference_times[language].append(inference_time)
            self.logger.debug(f"Inference time for {language}: {inference_time}s")
        else:
            self.logger.warning(f"Attempted to update inference time for unsupported language: {language}")

    def update_ml_metrics(self, language: str, accuracy_score: float, precision_score: float, recall_score: float):
        """Update ML performance metrics for a specific language."""
        if language in self.accuracy:
            self.accuracy[language] = accuracy_score
            self.precision[language] = precision_score
            self.recall[language] = recall_score
            self.logger.debug(f"ML Metrics for {language} - Accuracy: {accuracy_score}, Precision: {precision_score}, Recall: {recall_score}")
        else:
            self.logger.warning(f"Attempted to update ML metrics for unsupported language: {language}")

    def update_processing_time(self, processing_time: float):
        """Update processing time."""
        self.response_times.append(processing_time)
        self.logger.debug(f"Processing time updated: {processing_time}s")

    def increment_total_requests(self):
        """Increment total requests counter."""
        self.total_requests += 1
        self.logger.debug(f"Total requests incremented: {self.total_requests}")

    def add_request(self, timestamp: datetime):
        """Add a new request timestamp."""
        self.requests.append(timestamp)
        self.logger.debug(f"Request added at {timestamp}")

    def add_response_time(self, response_time: float):
        """Add a new response time."""
        self.response_times.append(response_time)
        self.logger.debug(f"Response time added: {response_time}s")

    def cleanup_old_metrics(self, cutoff: datetime):
        """Remove metrics older than the cutoff time."""
        while self.requests and self.requests[0] < cutoff:
            removed_request = self.requests.popleft()
            removed_response_time = self.response_times.popleft()
            self.logger.debug(f"Old request at {removed_request} removed")
            self.logger.debug(f"Old response time {removed_response_time}s removed")

    def get_requests_per_sec(self, interval: int) -> float:
        """Calculate requests per second over the given interval."""
        cutoff = datetime.now() - timedelta(seconds=interval)
        recent_requests = [req for req in self.requests if req >= cutoff]
        requests_per_sec = len(recent_requests) / interval
        self.logger.debug(f"Requests per second: {requests_per_sec}")
        return requests_per_sec

    def get_avg_response_time(self) -> float:
        """Calculate average response time."""
        if self.response_times:
            avg_time = sum(self.response_times) / len(self.response_times)
            self.logger.debug(f"Average response time: {avg_time}s")
            return avg_time
        return 0.0

    def get_error_rate(self) -> float:
        """Calculate error rate."""
        if self.requests:
            error_rate = len(self.errors) / len(self.requests)
            self.logger.debug(f"Error rate: {error_rate}")
            return error_rate
        return 0.0

    def get_model_performance(self) -> Dict[str, Any]:
        """Get current model performance metrics."""
        return {
            lang: {
                "loading_time_avg": sum(times) / len(times) if times else 0.0,
                "inference_time_avg": sum(self.inference_times[lang]) / len(self.inference_times[lang]) if self.inference_times[lang] else 0.0,
                "accuracy": self.accuracy.get(lang, 0.0),
                "precision": self.precision.get(lang, 0.0),
                "recall": self.recall.get(lang, 0.0)
            } for lang, times in self.model_loading_times.items()
        }

    def __getitem__(self, key):
        """Allow dictionary-like access to metrics"""
        return self._data[key]

    def __setitem__(self, key, value):
        """Allow dictionary-like setting of metrics"""
        with self._lock:
            self._data[key] = value

    async def send_metrics(self, manager: ConnectionManager, metrics: Dict[str, Any]):
        """Send metrics to all active WebSocket connections"""
        try:
            await manager.broadcast(json.dumps(metrics))
        except Exception as e:
            self.logger.error(f"Metrics update error: {e}")

================
File: src/utils/report.py
================
import os
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from ..models.model_predictor import SentimentPredictor
from ..utils.logger import Logger
import joblib


class ReportGenerator:
    """
    Generates detailed analysis reports for sentiment model performance
    """

    def __init__(self, language: str):
        self.language = language
        self.logger = Logger(__name__).logger

    def get_model_info(self):
        """Get current model information and metrics"""
        try:
            model_path = os.path.join(
                "data", "models", f"{self.language}_sentiment_model.pkl"
            )
            model_info = joblib.load(model_path)
            return model_info
        except Exception as e:
            self.logger.error(f"Error loading model info: {e}")
            return None

    def generate_metrics_plots(self, metrics, output_dir):
        """Generate performance metric visualizations"""
        plt.figure(figsize=(15, 10))

        # Confusion matrix
        plt.subplot(2, 2, 1)
        if "confusion_matrix" in metrics:
            sns.heatmap(metrics["confusion_matrix"], annot=True, fmt="d")
            plt.title("Confusion Matrix")

        # ROC curve
        plt.subplot(2, 2, 2)
        if "roc_curve" in metrics:
            fpr, tpr, _ = metrics["roc_curve"]
            plt.plot(fpr, tpr)
            plt.plot([0, 1], [0, 1], "k--")
            plt.title("ROC Curve")
            plt.xlabel("False Positive Rate")
            plt.ylabel("True Positive Rate")

        # Score distribution
        plt.subplot(2, 2, 3)
        if "score_distribution" in metrics:
            sns.histplot(data=metrics["score_distribution"])
            plt.title("Score Distribution")

        # Error analysis
        plt.subplot(2, 2, 4)
        if "error_analysis" in metrics:
            errors = pd.DataFrame(metrics["error_analysis"])
            sns.barplot(x="error_type", y="count", data=errors)
            plt.title("Error Analysis")
            plt.xticks(rotation=45)

        plt.tight_layout()
        plt.savefig(os.path.join(output_dir, "performance_metrics.png"))
        plt.close()

    def generate_html_report(self, model_info, metrics, output_file):
        """Generate HTML report with metrics and visualizations"""
        html = """
        <html>
        <head>
            <title>Sentiment Analysis Model Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .metric { margin: 20px 0; }
                .visualization { margin: 30px 0; }
                table { border-collapse: collapse; width: 100%; }
                th, td { border: 1px solid #ddd; padding: 8px; }
                th { background-color: #f4f4f4; }
            </style>
        </head>
        <body>
            <h1>Sentiment Analysis Model Report</h1>
            <div class="metadata">
                <h2>Model Information</h2>
                <table>
                    <tr><th>Language</th><td>{language}</td></tr>
                    <tr><th>Generated</th><td>{timestamp}</td></tr>
                    <tr><th>Model Version</th><td>{version}</td></tr>
                </table>
            </div>

            <div class="metrics">
                <h2>Performance Metrics</h2>
                <table>
                    <tr><th>Metric</th><th>Value</th></tr>
                    {metrics_rows}
                </table>
            </div>

            <div class="visualization">
                <h2>Visualizations</h2>
                <img src="performance_metrics.png" alt="Performance Metrics">
            </div>
        </body>
        </html>
        """

        # Format metrics rows
        metrics_rows = ""
        if metrics:
            for key, value in metrics.items():
                if isinstance(value, (int, float)):
                    metrics_rows += f"<tr><td>{key}</td><td>{value:.4f}</td></tr>"

        # Fill template
        report = html.format(
            language=self.language.upper(),
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            version=model_info.get("version", "N/A"),
            metrics_rows=metrics_rows,
        )

        with open(output_file, "w", encoding="utf-8") as f:
            f.write(report)

    def generate_report(self, output_file):
        """Generate complete model analysis report"""
        try:
            # Create output directory
            output_dir = os.path.dirname(output_file)
            os.makedirs(output_dir, exist_ok=True)

            # Get model info and metrics
            model_info = self.get_model_info()
            if not model_info:
                raise ValueError("Could not load model information")

            metrics = model_info.get("metrics", {})

            # Generate visualizations
            self.generate_metrics_plots(metrics, output_dir)

            # Generate HTML report
            self.generate_html_report(model_info, metrics, output_file)

            self.logger.info(f"Report generated successfully at {output_file}")
            return True

        except Exception as e:
            self.logger.error(f"Error generating report: {e}")
            return False

================
File: src/utils/server_utils.py
================
import psutil
import socket
import time
from typing import List, Optional, Any  # Add this import
import logging
from fastapi import WebSocket, WebSocketDisconnect
from starlette.websockets import WebSocketState
from src.utils.logger import Logger
import json  # Add this import at the top

logger = logging.getLogger(__name__)


def force_kill_port(port: int) -> bool:
    """Force kill any process using the specified port"""
    try:
        connections = psutil.net_connections()
        for conn in connections:
            try:
                if hasattr(conn, "laddr") and conn.laddr.port == port:
                    try:
                        proc = psutil.Process(conn.pid)
                        proc.kill()
                        return True
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
            except (AttributeError, TypeError):
                continue
        return False
    except Exception as e:
        logger.error(f"Error killing process on port {port}: {e}")
        return False


def is_port_in_use(port: int) -> bool:
    """Check if port is in use"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.bind(("", port))
            return False
        except OSError:
            return True


async def safe_send(websocket: WebSocket, message: str):
    """Safely send a message over WebSocket, handling disconnections."""
    try:
        await websocket.send_text(message)
    except WebSocketDisconnect:
        logger.warning("WebSocket disconnected before message could be sent.")
    except Exception as e:
        logger.error(f"Error sending message over WebSocket: {e}")


class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.keep_alive_interval = 10

    async def connect(self, websocket: WebSocket):
        try:
            await websocket.accept()
            self.active_connections.append(websocket)
            logger = Logger(__name__).logger
            logger.info(
                f"WebSocket client connected. Total connections: {len(self.active_connections)}"
            )
        except Exception as e:
            logger.error(f"Error accepting WebSocket connection: {e}")
            raise

    async def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        if websocket.client_state == WebSocketState.CONNECTED:
            await websocket.close()

    async def broadcast(self, message: Any):
        try:
            if isinstance(message, dict):
                message = json.dumps(message)
            elif not isinstance(message, str):
                message = str(message)

            disconnected = []
            for connection in self.active_connections:
                try:
                    if connection.client_state == WebSocketState.CONNECTED:
                        await connection.send_text(message)
                    else:
                        disconnected.append(connection)
                except Exception as e:
                    logger.error(f"Error sending message to WebSocket: {e}")
                    disconnected.append(connection)

            for connection in disconnected:
                await self.disconnect(connection)
                logger.info("WebSocket client disconnected during broadcast.")
        except Exception as e:
            logger.error(f"Broadcast failed: {e}")

    async def handle_message(self, websocket: WebSocket, message: str):
        """Handle incoming messages from WebSocket clients."""
        try:
            data = json.loads(message)
            if data.get("type") == "heartbeat":
                await websocket.send_text(json.dumps({"type": "heartbeat_ack"}))
                logger.debug("Heartbeat acknowledged.")
            # Handle other message types if necessary
        except json.JSONDecodeError:
            logger.error("Received invalid JSON message.")
        except Exception as e:
            logger.error(f"Error handling message: {e}")
            # Optionally, you can close the websocket here if needed
            # await websocket.close()

================
File: src/utils/templates.py
================
import random

class CommentTemplates:
    def __init__(self):
        self.vi_templates = {
            "product_review": {
                "positive": [
                    "Sản phẩm {quality} quá, {reason}",
                    "Mình rất {emotion} với {aspect}",
                    "Đóng gói {packaging}, giao hàng {delivery}",
                    "{aspect} tốt hơn mong đợi, {details}",
                    "Giá tiền {price_opinion}, {value_desc}",
                ],
                "negative": [
                    "{aspect} không được tốt, {issue}",
                    "Hơi thất vọng về {aspect}, {reason}",
                    "Chất lượng {quality_issue}, {details}",
                    "Giao hàng {delivery_issue}, {problem}",
                    "Không đáng giá tiền, {reason}",
                ],
                "neutral": [
                    "Sản phẩm tạm được, {details}",
                    "Cũng được, nhưng {suggestion}",
                    "Không có gì đặc biệt, {reason}",
                    "Dùng được, {opinion}",
                    "Tạm ổn, {details}",
                ],
            },
            "food_review": {
                "positive": [
                    "Món này {taste} thiệt luôn, {details}",
                    "Quán {service} chu đáo, {atmosphere}",
                    "Đồ ăn {quality} xuất sắc, {reason}",
                    "Giá cả {price_opinion}, {value}",
                    "Không gian {atmosphere}, {recommendation}",
                ],
                "negative": [
                    "Đồ ăn {taste_issue}, {reason}",
                    "Phục vụ {service_issue}, {problem}",
                    "Giá hơi {price_complaint}, {details}",
                    "Vệ sinh {cleanliness_issue}, {problem}",
                    "Thất vọng về {aspect}, {reason}",
                    "Đồ ăn {taste_issue} vl, {problem}",
                    "Quán này {slang_negative} thật, {reason}",
                    "Giá thì cắt cổ mà đồ ăn {taste_issue} vcl",
                    "Phục vụ như c*t, {service_issue}",
                    "Vệ sinh {cleanliness_issue} vl, éo bao giờ quay lại"
                ],
                "neutral": [
                    "Đồ ăn {taste} bình thường, {details}",
                    "Giá tương đối {price_opinion}, {value}",
                    "Phục vụ {service} tạm được, {details}",
                    "Không gian {atmosphere}, nhưng {suggestion}",
                    "Chất lượng trung bình, {opinion}"
                ],
            },
            "movie_review": {
                "positive": [
                    "Phim hay quá, {reason}",
                    "Diễn viên {acting}, kịch bản {script}",
                    "Cốt truyện {plot_opinion}, {details}",
                    "Xem mà {emotion}, {reason}",
                    "Đáng xem nha mọi người, {recommendation}",
                ],
                "negative": [
                    "Phim nhạt quá, {reason}",
                    "Diễn viên {acting_issue}, {problem}",
                    "Kịch bản {script_issue}, {details}",
                    "Thất vọng vì {aspect}, {reason}",
                    "Không đáng tiền vé, {details}",
                ],
                "neutral": [
                    "Phim cũng được, {reason}",
                    "Diễn viên {acting} tạm ổn, kịch bản {script}",
                    "Cốt truyện {plot_opinion}, {details}",
                    "Xem cũng được, {opinion}",
                    "Không quá tệ nhưng không xuất sắc, {details}"
                ],
            },
            "service_review": {
                "positive": [
                    "Nhân viên {staff_quality} và {staff_attitude}",
                    "Dịch vụ {service_quality}, {recommendation}",
                    "Được {good_point} và {another_point}",
                    "Rất {emotion} với {aspect}, {reason}",
                    "{service_type} ở đây {quality}, {details}",
                ],
                "negative": [
                    "Thái độ nhân viên {bad_attitude}, {issue}",
                    "Dịch vụ {service_issue}, {problem}",
                    "Không hài lòng về {aspect}, {reason}",
                    "Thất vọng về {issue_point}, {details}",
                    "{service_type} quá {negative_point}, {complaint}",
                ],
                "neutral": [
                    "Dịch vụ bình thường, {details}",
                    "Tạm được, nhưng {suggestion}",
                    "{aspect} có thể cải thiện thêm, {feedback}",
                    "Chưa có gì đặc sắc, {reason}",
                    "Cũng được, {opinion}",
                ],
            },
            "technology_review": {
                "positive": [
                    "{device} chạy {performance}, {details}",
                    "Cấu hình {spec_quality}, {feature_opinion}",
                    "Pin {battery_life}, {usage_experience}",
                    "Camera {camera_quality}, {photo_details}",
                    "Thiết kế {design_opinion}, {build_quality}",
                ],
                "negative": [
                    "{device} hay bị {tech_issue}, {problem}",
                    "Pin {battery_issue}, {complaint}",
                    "Giá quá {price_opinion} so với {comparison}",
                    "Cấu hình {spec_issue}, {performance_details}",
                    "Không đáng tiền vì {reason}, {details}",
                ],
                "neutral": [
                    "{device} dùng tạm được, {details}",
                    "Cấu hình {spec_quality} đủ dùng, {feature_opinion}",
                    "Pin {battery_life}, {usage_experience}",
                    "Camera {camera_quality}, {photo_details}",
                    "Thiết kế bình thường, {build_quality}"
                ],
            },
        }

        self.en_templates = {
            "product_review": {
                "positive": [
                    "This product is {quality}, {reason}",
                    "Really {emotion} with {aspect}",
                    "Great {packaging}, {delivery} shipping",
                    "{aspect} exceeded expectations, {details}",
                    "Price is {price_opinion}, {value_desc}",
                ],
                "negative": [
                    "{aspect} isn't good, {issue}",
                    "Disappointed with {aspect}, {reason}",
                    "Quality is {quality_issue}, {details}",
                    "Shipping was {delivery_issue}, {problem}",
                    "Not worth the money, {reason}",
                ],
                "neutral": [
                    "Product is okay, {details}",
                    "Decent but {suggestion}",
                    "Nothing special, {reason}",
                    "Usable product, {opinion}",
                    "Fairly standard, {details}"
                ]
            }
        }

        self.en_templates.update({
            "food_review": {
                "positive": [
                    "Food is {taste}, {details}",
                    "Service is {service_quality}, {atmosphere}",
                    "Quality is {quality}, {reason}",
                    "Great value for {price_opinion}, {value}",
                    "Ambiance is {atmosphere}, {recommendation}"
                ],
                "negative": [
                    "Food was {taste_issue}, {reason}",
                    "Poor service: {service_issue}, {problem}",
                    "Overpriced: {price_complaint}, {details}",
                    "Hygiene issues: {cleanliness_issue}, {problem}",
                    "Disappointed with {aspect}, {reason}"
                ],
                "neutral": [
                    "The food is average, {details}",
                    "Price is reasonable, {value}",
                    "Service is decent, {details}",
                    "Ambiance is okay but {suggestion}",
                    "Standard quality, {opinion}"
                ]
            },
            "movie_review": {
                "positive": [
                    "Great movie, {reason}",
                    "Actors were {acting}, script was {script}",
                    "Plot was {plot_opinion}, {details}",
                    "Felt {emotion} watching it, {reason}",
                    "Worth watching, {recommendation}"
                ],
                "negative": [
                    "Boring movie, {reason}",
                    "Actors were {acting_issue}, {problem}",
                    "Script was {script_issue}, {details}",
                    "Disappointed with {aspect}, {reason}",
                    "Not worth the ticket price, {details}"
                ],
                "neutral": [
                    "Movie is alright, {reason}",
                    "Acting is decent, script is {script}",
                    "Plot is {plot_opinion}, {details}",
                    "It's watchable, {opinion}",
                    "Neither great nor terrible, {details}"
                ]
            },
            "service_review": {
                "positive": [
                    "Staff were {staff_quality} and {staff_attitude}",
                    "Service was {service_quality}, {recommendation}",
                    "Had {good_point} and {another_point}",
                    "Very {emotion} with {aspect}, {reason}",
                    "{service_type} here is {quality}, {details}"
                ],
                "negative": [
                    "Staff attitude was {bad_attitude}, {issue}",
                    "Service was {service_issue}, {problem}",
                    "Not satisfied with {aspect}, {reason}",
                    "Disappointed with {issue_point}, {details}",
                    "{service_type} was too {negative_point}, {complaint}"
                ],
                "neutral": [
                    "Service was okay, {details}",
                    "Decent but {suggestion}",
                    "{aspect} could be improved, {feedback}",
                    "Nothing remarkable, {reason}",
                    "Standard service, {opinion}"
                ]
            }
        })

        self.vi_fillers = {
            "quality": ["tốt", "xuất sắc", "tuyệt vời", "đỉnh", "chất lượng"],
            "emotion": ["hài lòng", "thích", "ưng", "mê", "yêu"],
            "packaging": ["cẩn thận", "chắc chắn", "đẹp", "gọn gàng"],
            "delivery": ["nhanh", "đúng hẹn", "tốt", "chuyên nghiệp"],
            "price_opinion": ["hợp lý", "rẻ", "tốt", "phải chăng"],
            "value_desc": ["đáng đồng tiền", "chất lượng xứng đáng", "rất hời"],
            "acting": ["diễn xuất tốt", "nhập vai", "tự nhiên", "thuyết phục"],
            "script": ["hay", "cuốn", "logic", "hấp dẫn"],
            "taste": ["ngon", "tuyệt", "xuất sắc", "đúng vị", "đậm đà"],
            "service": ["phục vụ", "tận tình", "nhiệt tình", "chuyên nghiệp"],
            "atmosphere": ["thoải mái", "đẹp", "sang trọng", "ấm cúng"],
            "staff_quality": [
                "chuyên nghiệp",
                "được đào tạo bài bản",
                "có kinh nghiệm",
            ],
            "staff_attitude": ["rất thân thiện", "nhiệt tình", "vui vẻ", "chu đáo"],
            "service_quality": ["rất tốt", "chuyên nghiệp", "đúng giờ", "nhanh chóng"],
            "good_point": [
                "tư vấn tận tình",
                "giải đáp thắc mắc rõ ràng",
                "hỗ trợ nhiệt tình",
            ],
            "bad_attitude": [
                "cọc cằn",
                "thiếu chuyên nghiệp",
                "không nhiệt tình",
                "làm việc qua loa",
            ],
            "service_issue": ["chậm trễ", "thiếu chuyên nghiệp", "không đúng cam kết"],
            "performance": ["mượt mà", "nhanh", "ổn định", "tốt", "lag"],
            "spec_quality": ["khá ổn", "mạnh mẽ", "đủ dùng", "cao cấp"],
            "battery_life": ["trâu", "tốt", "dùng được lâu", "không tốt"],
            "camera_quality": ["chụp đẹp", "chi tiết", "sắc nét", "tạm được"],
            "design_opinion": ["sang trọng", "đẹp", "hiện đại", "cao cấp"],
            "tech_issue": ["lag", "đơ", "nóng", "lỗi phần mềm"],
            "recommendation": [
                "nên thử nhé",
                "recommend mọi người nên dùng",
                "sẽ ủng hộ dài dài",
                "sẽ quay lại lần sau",
            ],
            "suggestion": [
                "cần cải thiện thêm",
                "có thể tốt hơn nữa",
                "nên nâng cấp dịch vụ",
            ],
            "details": [
                "thấy rất worth",
                "đáng đồng tiền",
                "giá hơi cao",
                "cần cải thiện thêm",
            ],
            "neutral_opinion": [
                "tạm được",
                "không có gì đặc biệt",
                "bình thường",
                "trung bình",
                "không nổi bật"
            ],
            "neutral_suggestion": [
                "có thể cải thiện thêm",
                "còn nhiều điểm cần phát triển",
                "cần nâng cấp thêm",
                "nên cải tiến"
            ],
            "neutral_aspect": [
                "chất lượng tạm ổn",
                "giá cả chấp nhận được",
                "dịch vụ bình thường",
                "không có gì để khen hoặc chê"
            ]
        }

        self.vi_fillers.update({
            "quality": [
                "tốt", "xuất sắc", "tuyệt vời", "đỉnh", "chất lượng",
                "xịn xò", "đáng đồng tiền", "ưng cái bụng", "ngon lành", 
                "không phải dạng vừa đâu"
            ],
            "emotion": [
                "hài lòng", "thích", "ưng", "mê", "yêu",
                "phê quá trời", "sướng rớt nước miếng", "đê mê", 
                "mê tít thò lò", "phải lòng ngay cái nhìn đầu tiên"
            ],
        })

        self.en_fillers = {
            "quality": ["good", "excellent", "amazing", "great", "outstanding"],
            "emotion": ["happy", "satisfied", "pleased", "delighted", "impressed"],
            "packaging": ["careful", "secure", "nice", "neat", "professional"],
            "delivery": ["fast", "on-time", "efficient", "professional", "prompt"],
            "price_opinion": ["reasonable", "affordable", "fair", "good value"],
            "value_desc": ["worth the money", "great value", "excellent deal"],
            "reason": ["really love the quality", "exceeds expectations", "exactly what I needed"],
            "issue": ["not up to standard", "below expectations", "poor quality"],
            "problem": ["constant issues", "major flaws", "serious problems"],
            "details": ["highly recommend", "would buy again", "excellent purchase"],
            "suggestion": ["could be improved", "needs work", "should be better"],
            "recommendation": ["definitely recommend", "worth trying", "must buy"],
            "quality_issue": ["poor", "substandard", "disappointing", "terrible"],
            "delivery_issue": ["delayed", "late", "unprofessional", "problematic"],
            "aspect": ["quality", "design", "functionality", "performance", "features"],
            "neutral_opinion": [
                "decent", "average", "okay", "standard",
                "fair", "moderate", "acceptable", "passable"
            ],
            "neutral_suggestion": [
                "could be improved",
                "needs some work",
                "has room for improvement",
                "could be better"
            ],
            "neutral_quality": [
                "average quality",
                "acceptable standard",
                "middle-ground",
                "fair enough"
            ],
            "neutral_response": [
                "mixed feelings",
                "balanced view",
                "moderate opinion",
                "neutral stance"
            ]
        }

        missing_en_fillers = {
            "taste": ["delicious", "amazing", "excellent", "flavorful", "tasty"],
            "service": ["attentive", "professional", "friendly", "efficient"],
            "atmosphere": ["cozy", "elegant", "comfortable", "pleasant"],
            "staff_quality": ["well-trained", "experienced", "professional", "skilled"],
            "staff_attitude": ["friendly", "helpful", "courteous", "welcoming"],
            # ...add other missing categories
        }
        
        self.en_fillers.update(missing_en_fillers)

        self.vi_aspects = {
            "product": ["chất lượng", "mẫu mã", "đóng gói", "giao hàng", "giá cả"],
            "food": ["hương vị", "phục vụ", "không gian", "giá cả", "vệ sinh"],
            "movie": ["nội dung", "diễn xuất", "kịch bản", "âm thanh", "hình ảnh"],
        }

        self.en_aspects = {
            "product": ["quality", "design", "packaging", "shipping", "price"],
            "food": ["taste", "service", "ambiance", "pricing", "cleanliness"],
            "movie": ["content", "acting", "script", "sound", "visuals"],
            "service": ["staff", "efficiency", "value", "facilities", "experience"]
        }

        self.vi_expressions = {
            "positive": [
                "quá xịn luôn",
                "đỉnh thật sự",
                "không có gì để chê",
                "ưng cái bụng",
                "cực kỳ hài lòng",
                "xuất sắc",
            ],
            "negative": [
                "thất vọng quá",
                "chán thật sự",
                "không đáng tiền",
                "quá tệ",
                "không thể chấp nhận được",
            ],
            "neutral": [
                "tạm được",
                "không có gì đặc biệt",
                "bình thường",
                "cũng được",
                "tương đối ổn",
            ],
        }

        # Thêm từ lóng tiếng Việt
        self.vi_slangs = {
            "positive": {
                "xịn": ["xịn xò", "xịn sò", "đỉnh", "đỉnh cao", "cực phẩm"],
                "ngon": ["bá cháy", "bá đạo", "xuất sắc", "đỉnh của chóp"],
                "tốt": ["chất", "max good", "hết nước chấm", "không phải bàn"],
                "thích": ["khoái bá cháy", "ưng quá trời", "mê tít"],
                "hay": ["mãi đỉnh", "gút chóp", "max hay", "xịn sò"],
            },
            "negative": {
                "tệ": ["như cái bãi", "rác", "phèn", "dởm", "fail"],
                "kém": ["như hạch", "cùi bắp", "xác xơ"],
                "đắt": ["chát", "cắt cổ", "hút máu"],
                "chán": ["nhạt như nước ốc", "ngán ngẩm", "nản"],
                "dở": ["phế", "gà", "non", "trẻ trâu"],
            },
            "intensifiers": {
                "rất": ["đét", "quá xá", "dã man", "kinh hoàng"],
                "nhiều": ["ối dồi ôi", "vô số", "vô vàn"],
                "quá": ["vãi", "vl", "vcl", "xỉu up xỉu down"],
            },
            "internet_terms": {
                "ok": ["oce", "oke", "okela", "okê"],
                "không": ["kh", "hông", "khum", "hem"],
                "vậy": ["z", "dz", "v"],
                "được": ["đc", "dk", "dke"],
                "biết": ["bít", "bik", "bit"],
                "vui": ["zui", "zoui", "vkoj"],
                "buồn": ["bùn", "buon", "huhu"],
            },
            "neutral": {
                "bình thường": ["bt", "sương sương", "tàm tạm"],
                "tạm": ["tạm được", "được", "cũng được"],
                "trung bình": ["không đặc sắc", "không nổi bật"],
                "thường": ["bình bình", "không có gì đặc biệt"]
            },
            "informal_expressions": {
                "tức giận": ["tức ói", "điên tiết", "tức điên", "tức phát điên", "máu"],
                "thất vọng": ["chán đời", "nản vl", "chả buồn nói", "phát ngấy"],
                "phẫn nộ": ["đkm", "má nó", "dcm", "vkl", "ối dồi ôi"],
                "khen ngợi": ["đỉnh vl", "bá đạo vl", "max ngon", "xịn sò"],
                "chê bai": ["như c*t", "như sh*t", "như cức", "hãm vl", "tởm"],
                "bực mình": ["đ*o chịu nổi", "đ*o được", "quá mức chịu đựng"],
                "bất ngờ": ["đậu má", "vãi cả l*n", "vãi", "vcl"]
            }
        }

        # Add more slang variations to existing categories
        self.vi_slangs["positive"].update({
            "xịn": self.vi_slangs["positive"]["xịn"] + ["đỉnh vl", "xịn sò vl"],
            "ngon": self.vi_slangs["positive"]["ngon"] + ["ngon vl", "đỉnh của chóp vl"],
            "tốt": self.vi_slangs["positive"]["tốt"] + ["quá mẹ ngon", "đỉnh quá xá"],
            "thích": self.vi_slangs["positive"]["thích"] + ["phê vl", "sướng phát xỉu"]
        })

        self.vi_slangs["negative"].update({
            "tệ": self.vi_slangs["negative"]["tệ"] + ["như c*t", "như sh*t"],
            "kém": self.vi_slangs["negative"]["kém"] + ["như hạch vl", "dở ẹc"],
            "đắt": self.vi_slangs["negative"]["đắt"] + ["chém gió vl", "cướp tiền"],
            "dở": self.vi_slangs["negative"]["dở"] + ["ngu vl", "gà vl"]
        })

        # Add more internet terms
        self.vi_slangs["internet_terms"].update({
            "không": self.vi_slangs["internet_terms"]["không"] + ["éo", "đ*o", "đéo"],
            "vãi": ["v~", "vl", "vcl", "vloz"],
            "quá": ["vãi cả l", "vcl", "vl"],
            "được": ["đc", "dk", "được của l*"]
        })

        # Thêm từ lóng tiếng Anh
        self.en_slangs = {
            "positive": {
                "good": ["lit", "fire", "dope", "sick", "rad"],
                "great": ["goated", "bussin", "slaps", "hits different"],
                "amazing": ["baddie", "based", "poggers", "absolute unit"],
                "like": ["stan", "vibe with", "fuck with", "dig"],
                "perfect": ["no cap", "straight fire", "hits hard"],
            },
            "negative": {
                "bad": ["mid", "trash", "cap", "sus", "ain't it"],
                "terrible": ["wack", "garbage", "dead", "basic"],
                "expensive": ["pricey af", "costs a bag", "steep"],
                "boring": ["sleeping on it", "dry", "dead"],
                "fake": ["cap", "sus", "fugazi", "bogus"],
            },
            "intensifiers": {
                "very": ["af", "asf", "fr fr", "ong"],
                "really": ["deadass", "fr", "no cap", "straight up"],
                "absolutely": ["lowkey", "highkey", "straight up"],
            },
            "internet_terms": {
                "okay": ["k", "kk", "aight", "ight"],
                "thanks": ["ty", "thx", "thnx"],
                "please": ["pls", "plz", "plox"],
                "what": ["wat", "wut", "tf"],
                "lol": ["lmao", "lmfao", "rofl"],
                "omg": ["omfg", "bruh", "bruhhh"],
            },
            "neutral": {
                "okay": ["meh", "whatever", "so-so"],
                "average": ["decent", "fair", "normal"],
                "mediocre": ["basic", "standard", "regular"],
                "moderate": ["alright", "passable", "fine"]
            }
        }

        # Thêm template mới sử dụng từ lóng
        self.vi_templates["social_media_review"] = {
            "positive": [
                "Ẩm thực {location} {slang_positive} luôn, {intensifier} {good_point}",
                "Quán này {slang_positive} {intensifier}, {recommendation}",
                "Giá hơi chát nhưng mà {slang_positive} thật, {details}",
                "{aspect} thì {slang_positive} khỏi bàn, {intensifier} {opinion}",
                "Nhân viên {staff_quality} {intensifier}, {staff_attitude}",
            ],
            "negative": [
                "Đúng là {slang_negative} thật sự, {intensifier} {issue}",
                "Quán này {slang_negative} {intensifier}, {problem}",
                "Giá thì {price_complaint} mà {slang_negative}, {details}",
                "{aspect} thì {slang_negative} {intensifier}, {complaint}",
                "Thái độ nhân viên {bad_attitude}, {slang_negative} {intensifier}",
            ],
        }

        # Thêm từ điển emoji phù hợp với cảm xúc
        self.emojis = {
            "positive": ["😊", "🥰", "😍", "🤩", "👍", "💯", "🔥", "✨", "💪", "����"],
            "negative": ["😤", "😒", "😑", "👎", "😠", "😡", "🤬", "💢", "😫", "😩"],
            "neutral": ["🤔", "😐", "😶", "🤷", "😕", "😌", "🙂", "👀"]
        }

        # Thêm các cách diễn đạt tự nhiên
        self.natural_expressions = {
            "opening": [
                "Thật sự thì", "Nói thật là", "Theo mình thấy thì", 
                "Mình đánh giá là", "Cá nhân mình thấy",
                "Xin chia sẻ chút là", "Mình mới dùng thử và thấy",
                "Sau thời gian trải nghiệm thì"
            ],
            "closing": [
                "Đó là góc nhìn của mình ạ", "Mọi người thấy sao?",
                "Đánh giá chủ quan thôi nha", "Hy vọng review có ích",
                "Mình nghĩ vậy thôi", "Mọi người cân nhắc nha"
            ]
        }

        # Thêm mẫu câu ngắn
        self.short_templates = {
            "positive": [
                "Tuyệt vời 👍",
                "Quá ngon luôn",
                "Đỉnh thật sự",
                "Rất ưng ý",
                "Xứng đáng {score}/10",
                "Không có gì để chê",
                "Sẽ quay lại lần sau",
                "Recommend nha mọi người"
            ],
            "negative": [
                "Thất vọng quá",
                "Không đáng tiền",
                "Chán thật sự",
                "Tệ hết chỗ nói",
                "Không bao giờ quay lại",
                "Phí tiền",
                "Quá tệ {score}/10",
                "Không nên mua"
            ],
            "neutral": [
                "Tạm được",
                "Bình thường",
                "Cũng được",
                "Không có gì đặc biệt",
                "Tương đối ổn",
                "{score}/10 thôi",
                "Còn cải thiện được"
            ]
        }

        # Thêm mẫu câu dài, chi tiết
        self.long_templates = {
            "positive": [
                "Đây là lần thứ {count} mình {action} và vẫn rất {emotion}. {aspect} thì {quality}, đặc biệt là {highlight}. {recommendation}",
                "Thực sự {emotion} khi {action}. {details} Về {aspect} thì {quality}, còn {another_aspect} cũng {another_quality}. {conclusion}",
                "Mình đã {action} được {duration} rồi và phải nói là {quality}. {reason} Ngoài ra {additional_point}. {suggestion}",
                "Trải nghiệm {duration} với {product/service} này thì thấy {overall_feeling}. {aspect} thì {quality}, {another_aspect} thì {another_quality}. {detailed_review} {final_thought}"
            ],
            "negative": [
                "Thất vọng tột độ với {aspect}. {issue_details} Không những thế, {another_issue}. {complaint_details} Mình đã liên hệ {support_channel} nhưng {service_issue}. {conclusion}",
                "Đây là trải nghiệm tệ nhất từ trước đến nay với {product/service}. {main_issue} Thêm vào đó, {additional_issues}. {negative_impact} {warning}",
                "Mình đã cho cơ hội {count} lần nhưng {recurring_issue}. {details} Về {aspect} thì {quality_issue}, {service_complaint}. {final_warning}"
            ],
            "neutral": [
                "Sau {duration} sử dụng thì thấy {product/service} này {neutral_opinion}. {positive_points} nhưng {negative_points}. {improvement_suggestions}",
                "Không quá tệ nhưng cũng không xuất sắc. {aspect} thì {neutral_quality}, còn {another_aspect} thì {areas_for_improvement}. {balanced_conclusion}",
                "Mình thấy {product/service} này còn nhiều điểm cần cải thiện. {details} Tuy nhiên cũng có {positive_aspects}. {suggestions}"
            ]
        }

        # Thêm từ điển điểm số và thời lượng
        self.scores = {
            "positive": ["9", "9.5", "10", "8.5"],
            "negative": ["2", "3", "4", "1"],
            "neutral": ["5", "6", "7", "6.5"]
        }
        
        self.durations = [
            "một thời gian", "mấy tháng", "gần năm", 
            "một tuần", "vài ngày", "khá lâu",
            "hơn {number} tháng", "gần {number} năm",
            "được {number} lần"
        ]

        self.numbers = ["1", "2", "3", "4", "5", "nhiều"]

        self.en_ratings = {
            "positive": [
                "{score}/10 would recommend",
                "Solid {score}/10",
                "A strong {score} out of 10",
                "Definitely {score}/10"
            ],
            "negative": [
                "Unfortunately {score}/10",
                "Disappointing {score}/10",
                "A weak {score}/10",
                "Only {score}/10"
            ],
            "neutral": [
                "Average {score}/10",
                "Middle-of-the-road {score}/10",
                "Fair {score}/10",
                "Decent {score}/10"
            ]
        }

        self.en_durations = [
            "for a while", "for months", "nearly a year",
            "for a week", "several days", "quite some time",
            "over {number} months", "almost {number} years",
            "{number} times"
        ]

        # Add English expressions
        self.en_expressions = {
            "positive": [
                "absolutely fantastic",
                "really amazing",
                "nothing to complain about",
                "exceeded expectations",
                "extremely satisfied",
                "outstanding",
                "top notch",
                "brilliant"
            ],
            "negative": [
                "very disappointing",
                "really frustrating",
                "not worth the money",
                "terrible experience",
                "completely unacceptable",
                "worst ever",
                "absolute garbage"
            ],
            "neutral": [
                "fairly decent",
                "nothing special",
                "average",
                "okay",
                "relatively fine",
                "mediocre",
                "standard"
            ]
        }

        # Add English natural expressions
        self.en_natural_expressions = {
            "opening": [
                "To be honest,",
                "In my experience,",
                "From my perspective,",
                "After trying this,",
                "I have to say,",
                "Let me share that",
                "Based on my usage,",
                "After some time with this,"
            ],
            "closing": [
                "That's my take on it.",
                "What do you think?",
                "Just my personal opinion.",
                "Hope this helps!",
                "That's my perspective.",
                "Consider it before buying."
            ]
        }

        # Thêm mẫu bình luận tương tác
        self.interaction_templates = {
            "argument": {
                "aggressive": [
                    "Đ* biết gì mà {action}? {insult}",
                    "Ngu như {insult} mà cũng {action}",
                    "M là thằng {insult} à? Sao {action} v?",
                    "Làm như hay lắm í, {insult}",
                    "Ăn nói như {insult}, blocked!",
                ],
                "defensive": [
                    "Ai cho {subject} {action}? {counter_argument}",
                    "Mắc gì phải nghe {subject}? {dismissal}",
                    "Kệ tao, liên quan gì đến {subject}?",
                    "Đừng có mà {action}, {warning}",
                    "Nói nữa là {threat} đấy!",
                ],
                "dismissive": [
                    "Kệ người ta đi {subject} ơi",
                    "Thôi {subject} ạ, chả ai quan tâm đâu",
                    "Đ* ai thèm để ý {subject} nói gì",
                    "Lạ nhỉ? Ai hỏi {subject} không?",
                    "Không ai cần ý kiến của {subject} đâu",
                ]
            },
            "support": {
                "agreement": [
                    "+1 với {subject}, {reason}",
                    "Đồng ý với {subject} luôn, {explanation}",
                    "Chuẩn đấy {subject} ơi! {detail}",
                    "Như {subject} nói là đúng rồi",
                    "{subject} nói chuẩn quá! {agreement}"
                ],
                "praise": [
                    "Review hay quá {subject} ơi! {appreciation}",
                    "Tks {subject} đã chia sẻ nha! {gratitude}",
                    "Bài viết chất lượng {subject} ạ",
                    "Góp ý có tâm quá {subject}",
                    "Respect {subject}! {reason}"
                ]
            },
            "trolling": [
                "Ơ thế {subject} định nói gì? 🤡",
                "Nghe {subject} nói mà tức cười quá 😂",
                "Thím {subject} lại nổi hứng rồi",
                "Cao thủ {subject} lại xuất hiện kìa ae 🤣",
                "Đọc mà xỉu với {subject} luôn"
            ]
        }

        # Thêm từ vựng cho bình luận tương tác
        self.interaction_fillers = {
            "insult": [
                "ngu như bò", "óc chó", "đầu đất", "thiểu năng", 
                "ăn c*t", "ngu l*n", "mặt người óc lợn",
                "đần độn", "ngu si", "ngáo đá"
            ],
            "action": [
                "bô bô cái mồm", "phát biểu", "lên mặt dạy đời",
                "sủa", "gâu gâu", "hùa theo", "nói năng lung tung",
                "xàm xí", "thể hiện", "xen vào"
            ],
            "subject": [
                "bạn", "thím", "bác", "chế", "đồng chí",
                "cụ", "anh", "chị", "bợn", "đại ca"
            ],
            "threat": [
                "ăn block", "báo admin", "cho lên thớt",
                "cho ra đảo", "tay không bắt giặc", 
                "xử đẹp", "đập phát chết luôn"
            ],
            "counter_argument": [
                "nói cho biết nha", "nhớ đấy nhá",
                "cãi là ăn ban", "đừng có mà ngồi mơ",
                "tự soi gương đi"
            ],
            "dismissal": [
                "lo chuyện của mình đi", "đi ngủ sớm đi",
                "về mà hỏi google", "dứt ra cho nước nó trong",
                "lượn đi cho nước nó trong"
            ],
            "warning": [
                "đừng để tôi nóng", "cẩn thận cái mồm",
                "liệu mà giữ mồm", "coi chừng tay tôi",
                "cẩn thận kẻo đấm nhau"
            ],
            "appreciation": [
                "review có tâm quá", "chia sẻ xịn xò",
                "góp ý quá chuẩn", "phân tích rất hay",
                "đánh giá rất khách quan"
            ]
        }

        clean_vi_interaction = {
            "insult": [
                "không hiểu gì", "thiếu hiểu biết", "kém cỏi",
                "không có kiến thức", "thiếu kinh nghiệm"
            ],
            "action": [
                "lên tiếng", "phát biểu", "góp ý",
                "bình luận", "đánh giá", "phê bình"
            ],
            "warning": [
                "cẩn thận lời nói", "giữ ý một chút",
                "suy nghĩ kỹ hơn", "điều chỉnh cách nói",
                "xem lại cách ứng xử"
            ]
        }
        
        # Replace offensive terms with clean ones
        self.interaction_fillers.update(clean_vi_interaction)

        # Add English interaction templates
        self.en_interaction_templates = {
            "argument": {
                "aggressive": [
                    "What do you know about {action}?",
                    "You clearly don't understand {topic}",
                    "Stop talking nonsense about {topic}",
                    "Your opinion is totally wrong",
                    "You have no idea what you're saying"
                ],
                "defensive": [
                    "Who asked for your opinion?",
                    "Mind your own business",
                    "Whatever, I don't care what you think",
                    "Don't tell me what to do",
                    "You should know better"
                ],
                "dismissive": [
                    "Just ignore them",
                    "Nobody cares about that opinion",
                    "Why even bother responding?",
                    "Not worth discussing",
                    "Let's move on from this"
                ]
            },
            "support": {
                "agreement": [
                    "Totally agree with you about {topic}!",
                    "You're absolutely right, {reason}",
                    "Couldn't agree more! {detail}",
                    "That's exactly what I think",
                    "Well said! {agreement}"
                ],
                "praise": [
                    "Great review! {appreciation}",
                    "Thanks for sharing! {gratitude}",
                    "Very helpful review",
                    "Excellent feedback",
                    "Really appreciate your insights!"
                ]
            },
            "neutral": {
                "balanced": [
                    "I see both sides here, {topic}",
                    "There are pros and cons, {details}",
                    "It's not that simple, {explanation}",
                    "Let's be objective about {topic}",
                    "Consider both perspectives on {subject}"
                ],
                "moderate": [
                    "Maybe we should wait and see",
                    "Not jumping to conclusions about {topic}",
                    "Need more information about {subject}",
                    "Taking a balanced view on this",
                    "Looking at it objectively"
                ]
            }
        }

    def get_random_slang(
        self, sentiment: str, category: str, language: str = "vi"
    ) -> str:
        """Get random slang based on sentiment and category"""
        slang_dict = self.vi_slangs if language == "vi" else self.en_slangs
        if category in slang_dict and sentiment in slang_dict[category]:
            return random.choice(slang_dict[category][sentiment])
        return ""

    def get_random_intensifier(self, language: str = "vi") -> str:
        """Get random intensifier"""
        slang_dict = self.vi_slangs if language == "vi" else self.en_slangs
        return random.choice(
            slang_dict["intensifiers"]["rất" if language == "vi" else "very"]
        )

    def get_internet_term(self, word: str, language: str = "vi") -> str:
        """Get internet slang version of a word if available"""
        slang_dict = self.vi_slangs if language == "vi" else self.en_slangs
        if word.lower() in slang_dict["internet_terms"]:
            return random.choice(slang_dict["internet_terms"][word.lower()])
        return word

    def get_random_duration(self):
        """Get random duration with optional number"""
        duration = random.choice(self.durations)
        if "{number}" in duration:
            duration = duration.replace("{number}", random.choice(self.numbers))
        return duration

    def get_random_score(self, sentiment):
        """Get appropriate score based on sentiment"""
        return random.choice(self.scores[sentiment])

    def generate_varied_length_comment(self, sentiment, topic):
        """Generate comment with varied length"""
        if random.random() < 0.3:  # 30% chance for short comment
            template = random.choice(self.short_templates[sentiment])
            if "{score}" in template:
                template = template.replace("{score}", self.get_random_score(sentiment))
            return template
        elif random.random() < 0.7:  # 40% chance for normal comment
            return self.generate_normal_comment(sentiment, topic)
        else:  # 30% chance for long comment
            template = random.choice(self.long_templates[sentiment])
            return self.fill_long_template(template, sentiment, topic)

    def fill_long_template(self, template, sentiment, topic):
        """Fill in the placeholders for long templates with appropriate content"""
        replacements = {
            "{count}": random.choice(self.numbers),
            "{duration}": self.get_random_duration(),
            "{action}": self.get_random_action(topic),
            "{emotion}": self.get_random_emotion(sentiment),
        }
        
        for key, value in replacements.items():
            if key in template:
                template = template.replace(key, value)
        return template

    def get_random_action(self, topic: str, language: str = "vi") -> str:
        """Get random action based on topic and language"""
        actions = {
            "vi": {
                "general": ["dùng", "sử dụng", "trải nghiệm", "mua"],
                "food": ["ăn", "thử", "ghé quán", "đặt đồ"],
                "movie": ["xem", "ra rạp xem", "thưởng thức"],
                "service": ["sử dụng dịch vụ", "trải nghiệm", "thuê"]
            },
            "en": {
                "general": ["used", "tried", "experienced", "purchased"],
                "food": ["ate at", "tried", "visited", "ordered from"],
                "movie": ["watched", "saw", "experienced"],
                "service": ["used the service", "experienced", "hired"]
            }
        }
        
        topic_actions = actions[language].get(topic, actions[language]["general"])
        return random.choice(topic_actions)

    def get_random_emotion(self, sentiment: str, language: str = "vi") -> str:
        """Get random emotion based on sentiment and language"""
        emotions = {
            "vi": {
                "positive": self.vi_fillers["emotion"],
                "negative": ["thất vọng", "buồn", "không hài lòng", "bực mình"],
                "neutral": ["bình thường", "tạm được", "không đặc biệt"]
            },
            "en": {
                "positive": self.en_fillers["emotion"],
                "negative": ["disappointed", "upset", "dissatisfied", "frustrated"],
                "neutral": ["okay", "alright", "not special", "decent"]
            }
        }
        
        return random.choice(emotions[language][sentiment])

    def generate_interaction_comment(self, interaction_type: str, sub_type: str = None) -> str:
        """Generate an interaction comment"""
        if sub_type:
            template = random.choice(self.interaction_templates[interaction_type][sub_type])
        else:
            template = random.choice(self.interaction_templates[interaction_type])

        # Fill template with random fillers
        for key, values in self.interaction_fillers.items():
            if "{" + key + "}" in template:
                template = template.replace("{" + key + "}", random.choice(values))

        return template

================
File: src/visualization.py
================
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import os
from typing import Dict, List
import numpy as np
from datetime import datetime
import joblib

class ModelVisualizer:
    def __init__(self, language: str):
        self.language = language
        self.plot_style = {
            'figure.figsize': (12, 8),
            'axes.grid': True,
            'grid.alpha': 0.3,
            'axes.labelsize': 12,
            'axes.titlesize': 14,
            'xtick.labelsize': 10,
            'ytick.labelsize': 10
        }
        plt.style.use('seaborn')
        for key, value in self.plot_style.items():
            plt.rcParams[key] = value

    def generate_plots(self, output_dir: str):
        """Generate and save all visualization plots"""
        os.makedirs(output_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # Load model metrics
        model_path = f"data/models/{self.language}_sentiment_model.pkl"
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"Model file not found: {model_path}")
        
        model_data = joblib.load(model_path)
        metrics = model_data.get('metrics', {})

        # Generate various plots
        self._plot_performance_metrics(metrics, output_dir, timestamp)
        self._plot_confusion_matrix(metrics, output_dir, timestamp)
        self._plot_training_history(metrics, output_dir, timestamp)
        self._plot_feature_importance(metrics, output_dir, timestamp)
        
        return True

    def _plot_performance_metrics(self, metrics: Dict, output_dir: str, timestamp: str):
        """Plot key performance metrics"""
        fig, ax = plt.subplots()
        
        metrics_to_plot = {
            'Accuracy': metrics.get('accuracy', 0),
            'Precision': metrics.get('precision', 0),
            'Recall': metrics.get('recall', 0),
            'F1 Score': metrics.get('f1_score', 0)
        }
        
        bars = ax.bar(metrics_to_plot.keys(), metrics_to_plot.values())
        ax.set_ylim(0, 1)
        ax.set_title(f'{self.language.upper()} Model Performance Metrics')
        
        # Add value labels on top of bars
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{height:.3f}', ha='center', va='bottom')
        
        plt.savefig(os.path.join(output_dir, f'{timestamp}_performance_metrics.png'))
        plt.close()

    def _plot_confusion_matrix(self, metrics: Dict, output_dir: str, timestamp: str):
        """Plot confusion matrix heatmap"""
        if 'confusion_matrix' in metrics:
            cm = metrics['confusion_matrix']
            fig, ax = plt.subplots()
            
            sns.heatmap(cm, annot=True, fmt='d', ax=ax, cmap='Blues')
            ax.set_title(f'{self.language.upper()} Model Confusion Matrix')
            ax.set_xlabel('Predicted')
            ax.set_ylabel('Actual')
            
            plt.savefig(os.path.join(output_dir, f'{timestamp}_confusion_matrix.png'))
            plt.close()

    def _plot_training_history(self, metrics: Dict, output_dir: str, timestamp: str):
        """Plot training history"""
        if 'training_history' in metrics:
            history = metrics['training_history']
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
            
            # Plot accuracy
            if 'accuracy' in history:
                ax1.plot(history['accuracy'], label='Training')
                if 'val_accuracy' in history:
                    ax1.plot(history['val_accuracy'], label='Validation')
                ax1.set_title('Model Accuracy Over Time')
                ax1.set_xlabel('Epoch')
                ax1.set_ylabel('Accuracy')
                ax1.legend()
            
            # Plot loss
            if 'loss' in history:
                ax2.plot(history['loss'], label='Training')
                if 'val_loss' in history:
                    ax2.plot(history['val_loss'], label='Validation')
                ax2.set_title('Model Loss Over Time')
                ax2.set_xlabel('Epoch')
                ax2.set_ylabel('Loss')
                ax2.legend()
            
            plt.tight_layout()
            plt.savefig(os.path.join(output_dir, f'{timestamp}_training_history.png'))
            plt.close()

    def _plot_feature_importance(self, metrics: Dict, output_dir: str, timestamp: str):
        """Plot feature importance"""
        if 'feature_importance' in metrics and 'feature_names' in metrics:
            importance = metrics['feature_importance']
            features = metrics['feature_names']
            
            # Sort features by importance
            indices = np.argsort(importance)[::-1]
            
            # Plot top 20 features
            plt.figure(figsize=(10, 6))
            plt.title(f'Top 20 Most Important Features ({self.language.upper()})')
            plt.bar(range(20), importance[indices[:20]])
            plt.xticks(range(20), [features[i] for i in indices[:20]], rotation=45, ha='right')
            plt.tight_layout()
            
            plt.savefig(os.path.join(output_dir, f'{timestamp}_feature_importance.png'))
            plt.close()

    def visualize_prediction(self, text: str, prediction: Dict, output_file: str = None):
        """Create visualization for a single prediction"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
        
        # Plot sentiment scores
        sentiment_scores = prediction.get('sentiment_scores', {})
        if sentiment_scores:
            ax1.bar(sentiment_scores.keys(), sentiment_scores.values())
            ax1.set_title('Sentiment Scores')
            ax1.set_ylim(0, 1)
            
        # Plot emotion scores
        emotion_scores = prediction.get('emotion_scores', {})
        if emotion_scores:
            emotions = list(emotion_scores.keys())
            scores = list(emotion_scores.values())
            ax2.bar(emotions, scores)
            ax2.set_title('Emotion Scores')
            ax2.set_ylim(0, 1)
            plt.xticks(rotation=45)
        
        plt.suptitle(f'Analysis Results for: "{text[:50]}..."')
        plt.tight_layout()
        
        if output_file:
            plt.savefig(output_file)
        else:
            plt.show()
        plt.close()

================
File: tests/test_model.py
================
import pytest
import numpy as np
from src.models.model_trainer import EnhancedModelTrainer
from src.config import Config

@pytest.fixture
def trainer():
    config = Config()
    return EnhancedModelTrainer('vi', config)

def test_model_creation():
    config = Config()
    trainer = EnhancedModelTrainer('vi', config)
    model = trainer.create_ensemble_model()
    assert model is not None

def test_model_training():
    config = Config()
    trainer = EnhancedModelTrainer('vi', config)
    
    # Create dummy data
    X = np.random.rand(100, 10)
    y = np.random.randint(0, 2, 100)
    
    model = trainer.train_with_grid_search(X, y)
    assert model is not None

================
File: tests/test_preprocessor.py
================
import pytest
import pandas as pd
from src.data.preprocessor import DataPreprocessor
from src.config import Config

@pytest.fixture
def preprocessor():
    config = Config()
    return DataPreprocessor('vi', config)

def test_text_cleaning():
    config = Config()
    preprocessor = DataPreprocessor('vi', config)
    
    test_data = pd.DataFrame({
        'text': ['Đây là một bài test!!!', 'This is a test!!!'],
        'label': ['positive', 'negative']
    })
    
    processed_df = preprocessor.preprocess(test_data)
    assert len(processed_df) == 2
    assert 'cleaned_text' in processed_df.columns
    assert processed_df['label'].dtype == 'int64'
